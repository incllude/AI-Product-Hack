"""
–ê–≥–µ–Ω—Ç –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –æ—Ü–µ–Ω–∫–∏ —ç–∫–∑–∞–º–µ–Ω–∞ –Ω–∞ LangGraph
"""
from typing import Dict, List, Optional, Any
from langgraph.graph import StateGraph, END
from langchain_core.prompts import PromptTemplate
from langchain_core.output_parsers import StrOutputParser

from base import LangGraphAgentBase, DiagnosticState
from yagpt_llm import create_yandex_llm
import json
import re
import statistics
from datetime import datetime


class DiagnosticAgentLangGraph(LangGraphAgentBase):
    """–ê–≥–µ–Ω—Ç –¥–ª—è –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —ç–∫–∑–∞–º–µ–Ω–∞ –Ω–∞ LangGraph"""
    
    def __init__(self, subject: str = "–û–±—â–∏–µ –∑–Ω–∞–Ω–∏—è", topic_context: str = None):
        print(f"üîç [DiagnosticAgent] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–∞: {subject}")
        super().__init__(subject, topic_context)
        
        print("üîç [DiagnosticAgent] –°–æ–∑–¥–∞–Ω–∏–µ YandexGPT LLM...")
        self.llm = create_yandex_llm()
        print("‚úÖ [DiagnosticAgent] YandexGPT LLM —Å–æ–∑–¥–∞–Ω")
        
        self.diagnostic_history = []
        
        print("üîç [DiagnosticAgent] –°–æ–∑–¥–∞–Ω–∏–µ LangGraph —Å–æ—Å—Ç–æ—è–Ω–∏–π...")
        # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ —Å–æ—Å—Ç–æ—è–Ω–∏–π
        self.graph = self._create_diagnostic_graph()
        self.app = self.graph.compile()
        print("‚úÖ [DiagnosticAgent] LangGraph –≥—Ä–∞—Ñ —Å–æ–∑–¥–∞–Ω –∏ —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω")
        
        print("üîç [DiagnosticAgent] –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–º–ø—Ç–æ–≤...")
        self._setup_prompts()
        print("‚úÖ [DiagnosticAgent] –ê–≥–µ–Ω—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def _setup_prompts(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–º–ø—Ç–æ–≤ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
        
        # –ü—Ä–æ–º–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤
        self.pattern_analysis_prompt = PromptTemplate(
            input_variables=["subject", "topic_context", "questions_and_evaluations", "overall_stats"],
            template="""
–¢—ã —ç–∫—Å–ø–µ—Ä—Ç-–¥–∏–∞–≥–Ω–æ—Å—Ç –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É "{subject}".

{topic_context}

–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –ø–∞—Ç—Ç–µ—Ä–Ω—ã –≤ –æ—Ç–≤–µ—Ç–∞—Ö —Å—Ç—É–¥–µ–Ω—Ç–∞ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ç–µ–º–µ –∏ –≤—ã—è–≤–∏ –∫–ª—é—á–µ–≤—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –∏ —Å–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã –∏–º–µ–Ω–Ω–æ –≤ —ç—Ç–æ–π –æ–±–ª–∞—Å—Ç–∏.

–î–ê–ù–ù–´–ï –û–ë –û–¢–í–ï–¢–ê–•:
{questions_and_evaluations}

–û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:
{overall_stats}

–ó–ê–î–ê–ß–ò –ê–ù–ê–õ–ò–ó–ê:
1. –í—ã—è–≤–∏ –ü–ê–¢–¢–ï–†–ù–´ –≤ –æ—à–∏–±–∫–∞—Ö –∏ —É—Å–ø–µ—Ö–∞—Ö —Å—Ç—É–¥–µ–Ω—Ç–∞
2. –û–ø—Ä–µ–¥–µ–ª–∏ –ü–†–û–ë–ï–õ–´ –≤ –∑–Ω–∞–Ω–∏—è—Ö –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º —Ç–µ–º–∞–º
3. –û—Ü–µ–Ω–∏ –ü–†–û–ì–†–ï–°–° –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —ç–∫–∑–∞–º–µ–Ω–∞ (—É–ª—É—á—à–µ–Ω–∏–µ/—É—Ö—É–¥—à–µ–Ω–∏–µ)
4. –í—ã—è–≤–∏ –ö–û–ì–ù–ò–¢–ò–í–ù–´–ï –û–°–û–ë–ï–ù–ù–û–°–¢–ò (–ª–æ–≥–∏—á–µ—Å–∫–æ–µ –º—ã—à–ª–µ–Ω–∏–µ, –ø–∞–º—è—Ç—å, –ø–æ–Ω–∏–º–∞–Ω–∏–µ)
5. –û–ø—Ä–µ–¥–µ–ª–∏ –°–¢–ò–õ–¨ –û–ë–£–ß–ï–ù–ò–Ø —Å—Ç—É–¥–µ–Ω—Ç–∞

–§–û–†–ú–ê–¢ –ê–ù–ê–õ–ò–ó–ê:
–ü–ê–¢–¢–ï–†–ù–´_–û–®–ò–ë–û–ö: [—Ç–∏–ø–∏—á–Ω—ã–µ –æ—à–∏–±–∫–∏ –∏ –∏—Ö –ø—Ä–∏—á–∏–Ω—ã]
–°–ò–õ–¨–ù–´–ï_–°–¢–û–†–û–ù–´: [–≤ —á–µ–º —Å—Ç—É–¥–µ–Ω—Ç –æ—Å–æ–±–µ–Ω–Ω–æ —Å–∏–ª–µ–Ω]
–ü–†–û–ë–ï–õ–´_–ó–ù–ê–ù–ò–ô: [–∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ç–µ–º—ã, —Ç—Ä–µ–±—É—é—â–∏–µ –∏–∑—É—á–µ–Ω–∏—è]
–ö–û–ì–ù–ò–¢–ò–í–ù–´–ô_–ü–†–û–§–ò–õ–¨: [–æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –º—ã—à–ª–µ–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–∞]
–ü–†–û–ì–†–ï–°–°_–î–ò–ù–ê–ú–ò–ö–ê: [–∫–∞–∫ –º–µ–Ω—è–ª–∏—Å—å –æ—Ç–≤–µ—Ç—ã –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —ç–∫–∑–∞–º–µ–Ω–∞]
–°–¢–ò–õ–¨_–û–ë–£–ß–ï–ù–ò–Ø: [—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–º—É —Å–ø–æ—Å–æ–±—É –æ–±—É—á–µ–Ω–∏—è]
–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï_–û–ë–õ–ê–°–¢–ò: [—Å–∞–º—ã–µ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –∑–æ–Ω—ã, —Ç—Ä–µ–±—É—é—â–∏–µ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –≤–Ω–∏–º–∞–Ω–∏—è]

–ë—É–¥—å –∫–æ–Ω–∫—Ä–µ—Ç–µ–Ω –∏ –æ—Å–Ω–æ–≤—ã–≤–∞–π—Å—è —Ç–æ–ª—å–∫–æ –Ω–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –æ—Ç–≤–µ—Ç–æ–≤.
"""
        )
        
        # –ü—Ä–æ–º–ø—Ç –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
        self.final_report_prompt = PromptTemplate(
            input_variables=["subject", "pattern_analysis", "total_score", "max_score", "grade_recommendation"],
            template="""
–°–æ—Å—Ç–∞–≤—å –∏—Ç–æ–≥–æ–≤—ã–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç—á–µ—Ç –æ–± —ç–∫–∑–∞–º–µ–Ω–µ —Å—Ç—É–¥–µ–Ω—Ç–∞ –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É "{subject}".

–ê–ù–ê–õ–ò–ó –ü–ê–¢–¢–ï–†–ù–û–í:
{pattern_analysis}

–ò–¢–û–ì–û–í–´–ï –ë–ê–õ–õ–´: {total_score} –∏–∑ {max_score} ({grade_recommendation})

–°–æ–∑–¥–∞–π –ö–û–ú–ü–õ–ï–ö–°–ù–´–ô –û–¢–ß–ï–¢, –≤–∫–ª—é—á–∞—é—â–∏–π:

1. –ò–°–ü–û–õ–ù–ò–¢–ï–õ–¨–°–ö–û–ï –†–ï–ó–Æ–ú–ï (–∫—Ä–∞—Ç–∫–∞—è —Å–≤–æ–¥–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤)
2. –î–ï–¢–ê–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ù–ê–ù–ò–ô
3. –ü–†–û–§–ò–õ–¨ –û–ë–£–ß–ê–Æ–©–ï–ì–û–°–Ø (—Å–∏–ª—å–Ω—ã–µ/—Å–ª–∞–±—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã)
4. –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –û–ë–£–ß–ï–ù–ò–Æ (–∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —à–∞–≥–∏)
5. –ü–õ–ê–ù –£–°–¢–†–ê–ù–ï–ù–ò–Ø –ü–†–û–ë–ï–õ–û–í (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è)
6. –ü–†–û–ì–ù–û–ó –†–ê–ó–í–ò–¢–ò–Ø (–ø–æ—Ç–µ–Ω—Ü–∏–∞–ª —Å—Ç—É–¥–µ–Ω—Ç–∞)

–¢–†–ï–ë–û–í–ê–ù–ò–Ø –ö –û–¢–ß–ï–¢–£:
- –ë—É–¥—å –æ–±—ä–µ–∫—Ç–∏–≤–µ–Ω –∏ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–µ–Ω
- –ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å –ö–û–ù–ö–†–ï–¢–ù–´–ï —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏, –∞ –Ω–µ –æ–±—â–∏–µ —Ñ—Ä–∞–∑—ã
- –£–∫–∞–∂–∏ –ü–†–ò–û–†–ò–¢–ï–¢–´ –≤ –æ–±—É—á–µ–Ω–∏–∏
- –î–∞–π –ú–û–¢–ò–í–ò–†–£–Æ–©–£–Æ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å
- –ò—Å–ø–æ–ª—å–∑—É–π –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏—è –≤—ã–≤–æ–¥–æ–≤

–°–¢–†–£–ö–¢–£–†–ê:
=== –ò–°–ü–û–õ–ù–ò–¢–ï–õ–¨–°–ö–û–ï –†–ï–ó–Æ–ú–ï ===
[–∫—Ä–∞—Ç–∫–∏–µ –≤—ã–≤–æ–¥—ã –∏ –∏—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞]

=== –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ù–ê–ù–ò–ô ===
[–¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —É—Ä–æ–≤–Ω—è –≤–ª–∞–¥–µ–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–æ–º]

=== –ü–†–û–§–ò–õ–¨ –û–ë–£–ß–ê–Æ–©–ï–ì–û–°–Ø ===
[–∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞]

=== –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò ===
[–∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —à–∞–≥–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è]

=== –ü–õ–ê–ù –î–ï–ô–°–¢–í–ò–ô ===
[–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –∑–∞–¥–∞—á–∏ —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ —Ä–∞–º–∫–∞–º–∏]

=== –ü–†–û–ì–ù–û–ó ===
[–ø–æ—Ç–µ–Ω—Ü–∏–∞–ª –∏ –æ–∂–∏–¥–∞–µ–º–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ]
"""
        )
        
        # –ü—Ä–æ–º–ø—Ç –¥–ª—è —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        self.comparative_analysis_prompt = PromptTemplate(
            input_variables=["current_results", "benchmark_data"],
            template="""
–°—Ä–∞–≤–Ω–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å—Ç—É–¥–µ–Ω—Ç–∞ —Å —ç—Ç–∞–ª–æ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∏ –Ω–æ—Ä–º–∞–º–∏.

–†–ï–ó–£–õ–¨–¢–ê–¢–´ –°–¢–£–î–ï–ù–¢–ê:
{current_results}

–≠–¢–ê–õ–û–ù–ù–´–ï –î–ê–ù–ù–´–ï:
{benchmark_data}

–ü—Ä–æ–≤–µ–¥–∏ —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∏ –¥–∞–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—é —Å—Ç—É–¥–µ–Ω—Ç–∞.

–§–û–†–ú–ê–¢:
–ü–û–ó–ò–¶–ò–Ø_–û–¢–ù–û–°–ò–¢–ï–õ–¨–ù–û_–ù–û–†–ú–´: [–≤—ã—à–µ/–Ω–∞ —É—Ä–æ–≤–Ω–µ/–Ω–∏–∂–µ —Å—Ä–µ–¥–Ω–µ–≥–æ]
–°–ò–õ–¨–ù–´–ï_–û–ë–õ–ê–°–¢–ò_–í_–°–†–ê–í–ù–ï–ù–ò–ò: [–≥–¥–µ —Å—Ç—É–¥–µ–Ω—Ç –ø—Ä–µ–≤–æ—Å—Ö–æ–¥–∏—Ç –Ω–æ—Ä–º—É]
–û–¢–°–¢–ê–Æ–©–ò–ï_–û–ë–õ–ê–°–¢–ò: [–≥–¥–µ —Å—Ç—É–¥–µ–Ω—Ç —É—Å—Ç—É–ø–∞–µ—Ç –Ω–æ—Ä–º–µ]
–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò_–ü–û_–†–ê–ó–í–ò–¢–ò–Æ: [–∫–∞–∫ –¥–æ—Å—Ç–∏—á—å –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è]
"""
        )
    
    def _create_diagnostic_graph(self) -> StateGraph:
        """–°–æ–∑–¥–∞–µ—Ç –≥—Ä–∞—Ñ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
        graph = StateGraph(DiagnosticState)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —É–∑–ª—ã
        graph.add_node("validate_diagnostic_input", self._validate_diagnostic_input_node)
        graph.add_node("prepare_analysis_data", self._prepare_analysis_data_node)
        graph.add_node("analyze_patterns", self._analyze_patterns_node)
        graph.add_node("calculate_statistics", self._calculate_statistics_node)
        graph.add_node("determine_grade", self._determine_grade_node)
        graph.add_node("generate_final_report", self._generate_final_report_node)
        graph.add_node("extract_recommendations", self._extract_recommendations_node)
        graph.add_node("identify_critical_areas", self._identify_critical_areas_node)
        graph.add_node("create_diagnostic_result", self._create_diagnostic_result_node)
        graph.add_node("save_diagnostic_history", self._save_diagnostic_history_node)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–æ—á–∫—É –≤—Ö–æ–¥–∞
        graph.set_entry_point("validate_diagnostic_input")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ —Ä–µ–±—Ä–∞
        graph.add_edge("validate_diagnostic_input", "prepare_analysis_data")
        graph.add_edge("prepare_analysis_data", "analyze_patterns")
        graph.add_edge("analyze_patterns", "calculate_statistics")
        graph.add_edge("calculate_statistics", "determine_grade")
        graph.add_edge("determine_grade", "generate_final_report")
        graph.add_edge("generate_final_report", "extract_recommendations")
        graph.add_edge("extract_recommendations", "identify_critical_areas")
        graph.add_edge("identify_critical_areas", "create_diagnostic_result")
        graph.add_edge("create_diagnostic_result", "save_diagnostic_history")
        
        # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ
        graph.add_edge("save_diagnostic_history", END)
        
        return graph
    
    def _validate_diagnostic_input_node(self, state: DiagnosticState) -> DiagnosticState:
        """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
        try:
            questions = state.get("questions", [])
            evaluations = state.get("evaluations", [])
            
            if not questions or not evaluations:
                state["error"] = '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏'
                return state
            
            if len(questions) != len(evaluations):
                state["error"] = '–ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –æ—Ü–µ–Ω–æ–∫'
                return state
            
            self.log_operation("validate_diagnostic_input", state, "Validation passed")
            return state
            
        except Exception as e:
            state["error"] = f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {str(e)}"
            self.log_operation("validate_diagnostic_input", state, None, str(e))
            return state
    
    def _prepare_analysis_data_node(self, state: DiagnosticState) -> DiagnosticState:
        """–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"""
        try:
            if state.get("error"):
                return state
            
            questions = state["questions"]
            evaluations = state["evaluations"]
            
            analysis_text = ""
            
            for i, (question, evaluation) in enumerate(zip(questions, evaluations), 1):
                analysis_text += f"\n--- –í–û–ü–†–û–° {i} ---\n"
                analysis_text += f"–í–æ–ø—Ä–æ—Å: {question.get('question', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
                analysis_text += f"–£—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏: {question.get('topic_level', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
                analysis_text += f"–ö–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã: {question.get('key_points', '–ù–µ —É–∫–∞–∑–∞–Ω—ã')}\n"
                
                if evaluation.get('type') == 'detailed':
                    eval_data = evaluation
                    analysis_text += f"–ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞: {eval_data.get('total_score', 0)}/10\n"
                    analysis_text += f"–û—Ü–µ–Ω–∫–∏ –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º:\n"
                    criteria = eval_data.get('criteria_scores', {})
                    for criterion, score in criteria.items():
                        analysis_text += f"  - {criterion}: {score}/10\n"
                    analysis_text += f"–°–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã: {eval_data.get('strengths', '')}\n"
                    analysis_text += f"–û–±–ª–∞—Å—Ç–∏ —É–ª—É—á—à–µ–Ω–∏—è: {eval_data.get('weaknesses', '')}\n"
                else:
                    analysis_text += f"–û—Ü–µ–Ω–∫–∞: {evaluation.get('total_score', 0)}/10\n"
                    analysis_text += f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {evaluation.get('comment', '')}\n"
                
                analysis_text += "\n"
            
            state["analysis_data"] = analysis_text
            self.log_operation("prepare_analysis_data", len(questions), len(analysis_text))
            return state
            
        except Exception as e:
            state["error"] = f"–û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}"
            self.log_operation("prepare_analysis_data", state, None, str(e))
            return state
    
    def _analyze_patterns_node(self, state: DiagnosticState) -> DiagnosticState:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω—ã –≤ –æ—Ç–≤–µ—Ç–∞—Ö"""
        try:
            if state.get("error"):
                return state
            
            analysis_data = state["analysis_data"]
            questions = state["questions"]
            
            # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            stats_text = f"–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {len(questions)}\n"
            
            chain = self.pattern_analysis_prompt | self.llm | StrOutputParser()
            
            pattern_analysis = chain.invoke({
                "subject": self.subject,
                "topic_context": self.topic_context,
                "questions_and_evaluations": analysis_data,
                "overall_stats": stats_text
            })
            
            state["pattern_analysis"] = pattern_analysis
            self.log_operation("analyze_patterns", analysis_data[:200], pattern_analysis[:200])
            return state
            
        except Exception as e:
            state["error"] = f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤: {str(e)}"
            self.log_operation("analyze_patterns", state, None, str(e))
            return state
    
    def _calculate_statistics_node(self, state: DiagnosticState) -> DiagnosticState:
        """–í—ã—á–∏—Å–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –æ—Ü–µ–Ω–∫–∞–º"""
        try:
            if state.get("error"):
                return state
            
            evaluations = state["evaluations"]
            scores = []
            detailed_scores = {'correctness': [], 'completeness': [], 'understanding': [], 'structure': []}
            
            for evaluation in evaluations:
                score = evaluation.get('total_score', 0)
                scores.append(score)
                
                # –î–µ—Ç–∞–ª—å–Ω—ã–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã)
                if evaluation.get('type') == 'detailed':
                    criteria = evaluation.get('criteria_scores', {})
                    for criterion, value in criteria.items():
                        if criterion in detailed_scores:
                            detailed_scores[criterion].append(value)
            
            total_score = sum(scores)
            max_score = len(scores) * 10
            average_score = total_score / len(scores) if scores else 0
            
            stats = {
                'total_score': total_score,
                'max_score': max_score,
                'average_score': round(average_score, 2),
                'percentage': round((total_score / max_score) * 100, 1) if max_score > 0 else 0,
                'individual_scores': scores,
                'highest_score': max(scores) if scores else 0,
                'lowest_score': min(scores) if scores else 0
            }
            
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫ –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º
            for criterion, criterion_scores in detailed_scores.items():
                if criterion_scores:
                    stats[f'{criterion}_average'] = round(sum(criterion_scores) / len(criterion_scores), 2)
            
            # –ê–Ω–∞–ª–∏–∑ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
            if scores:
                stats['score_distribution'] = {
                    'excellent': len([s for s in scores if s >= 9]),
                    'good': len([s for s in scores if 7 <= s < 9]),
                    'satisfactory': len([s for s in scores if 5 <= s < 7]),
                    'poor': len([s for s in scores if s < 5])
                }
                
                # –¢—Ä–µ–Ω–¥ (–µ—Å–ª–∏ –±–æ–ª–µ–µ 2 –æ—Ü–µ–Ω–æ–∫)
                if len(scores) >= 3:
                    first_half = scores[:len(scores)//2]
                    second_half = scores[len(scores)//2:]
                    avg_first = sum(first_half) / len(first_half)
                    avg_second = sum(second_half) / len(second_half)
                    stats['trend'] = '—É–ª—É—á—à–µ–Ω–∏–µ' if avg_second > avg_first else '—É—Ö—É–¥—à–µ–Ω–∏–µ' if avg_second < avg_first else '—Å—Ç–∞–±–∏–ª—å–Ω–æ'
            
            state["statistics"] = stats
            self.log_operation("calculate_statistics", len(evaluations), stats)
            return state
            
        except Exception as e:
            state["error"] = f"–û—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}"
            self.log_operation("calculate_statistics", state, None, str(e))
            return state
    
    def _determine_grade_node(self, state: DiagnosticState) -> DiagnosticState:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∏—Ç–æ–≥–æ–≤—É—é –æ—Ü–µ–Ω–∫—É"""
        try:
            if state.get("error"):
                return state
            
            stats = state["statistics"]
            total_score = stats['total_score']
            max_score = stats['max_score']
            
            if max_score == 0:
                grade_info = {'grade': '–Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ', 'percentage': 0, 'description': '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ü–µ–Ω–∫–∏'}
            else:
                percentage = (total_score / max_score) * 100
                
                if percentage >= 90:
                    grade = '–æ—Ç–ª–∏—á–Ω–æ'
                    description = '–í—ã–¥–∞—é—â–µ–µ—Å—è –≤–ª–∞–¥–µ–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–º'
                elif percentage >= 75:
                    grade = '—Ö–æ—Ä–æ—à–æ'
                    description = '–•–æ—Ä–æ—à–µ–µ –ø–æ–Ω–∏–º–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ —Å –Ω–µ–±–æ–ª—å—à–∏–º–∏ –ø—Ä–æ–±–µ–ª–∞–º–∏'
                elif percentage >= 60:
                    grade = '—É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ'
                    description = '–ë–∞–∑–æ–≤–æ–µ –ø–æ–Ω–∏–º–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞, —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –∏–∑—É—á–µ–Ω–∏–µ'
                elif percentage >= 40:
                    grade = '–Ω–µ—É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ'
                    description = '–°–µ—Ä—å–µ–∑–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã –≤ –∑–Ω–∞–Ω–∏—è—Ö, —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä–µ–ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞'
                else:
                    grade = '–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –Ω–∏–∑–∫–æ'
                    description = '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –Ω–∏–∑–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –∑–Ω–∞–Ω–∏–π, —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–ª–Ω–æ–µ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ'
                
                grade_info = {
                    'grade': grade,
                    'percentage': round(percentage, 1),
                    'description': description,
                    'points': f"{total_score}/{max_score}"
                }
            
            state["grade_info"] = grade_info
            self.log_operation("determine_grade", stats, grade_info)
            return state
            
        except Exception as e:
            state["error"] = f"–û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –æ—Ü–µ–Ω–∫–∏: {str(e)}"
            self.log_operation("determine_grade", state, None, str(e))
            return state
    
    def _generate_final_report_node(self, state: DiagnosticState) -> DiagnosticState:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç"""
        try:
            if state.get("error"):
                return state
            
            pattern_analysis = state["pattern_analysis"]
            stats = state["statistics"]
            grade_info = state["grade_info"]
            
            chain = self.final_report_prompt | self.llm | StrOutputParser()
            
            final_report = chain.invoke({
                "subject": self.subject,
                "pattern_analysis": pattern_analysis,
                "total_score": stats['total_score'],
                "max_score": stats['max_score'],
                "grade_recommendation": f"{grade_info['grade']} ({grade_info['percentage']}%)"
            })
            
            state["final_report"] = final_report
            self.log_operation("generate_final_report", pattern_analysis[:100], final_report[:200])
            return state
            
        except Exception as e:
            state["error"] = f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {str(e)}"
            self.log_operation("generate_final_report", state, None, str(e))
            return state
    
    def _extract_recommendations_node(self, state: DiagnosticState) -> DiagnosticState:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∏–∑ –æ—Ç—á–µ—Ç–∞"""
        try:
            if state.get("error"):
                return state
            
            final_report = state["final_report"]
            
            # –ò—â–µ–º —Å–µ–∫—Ü–∏—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
            recommendations_section = re.search(r'=== –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò ===(.+?)(?==== |$)', final_report, re.DOTALL)
            
            recommendations = []
            if recommendations_section:
                text = recommendations_section.group(1).strip()
                # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
                lines = text.split('\n')
                for line in lines:
                    line = line.strip()
                    if line and not line.startswith('===') and len(line) > 10:
                        # –£–±–∏—Ä–∞–µ–º –º–∞—Ä–∫–µ—Ä—ã —Å–ø–∏—Å–∫–æ–≤
                        clean_line = re.sub(r'^[-*‚Ä¢]\s*', '', line)
                        clean_line = re.sub(r'^\d+\.\s*', '', clean_line)
                        if clean_line:
                            recommendations.append(clean_line)
            
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏, —Å–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ
            if not recommendations:
                recommendations = [
                    "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏–∑—É—á–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–Ω—Ü–µ–ø—Ü–∏–π –ø–æ —Ç–µ–º–µ",
                    "–ü—Ä–∞–∫—Ç–∏–∫–æ–≤–∞—Ç—å—Å—è –≤ —Ä–µ—à–µ–Ω–∏–∏ –∑–∞–¥–∞—á —Ä–∞–∑–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏",
                    "–û–±—Ä–∞—Ç–∏—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —Å–ª–∞–±—ã–µ –º–µ—Å—Ç–∞ –≤ –ø–æ–Ω–∏–º–∞–Ω–∏–∏",
                    "–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª –ø–æ –∫–ª—é—á–µ–≤—ã–º —Ç–µ–º–∞–º",
                    "–ü—Ä–æ–∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è —Å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–º –ø–æ —Å–ª–æ–∂–Ω—ã–º –≤–æ–ø—Ä–æ—Å–∞–º"
                ]
            
            state["recommendations"] = recommendations[:8]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            self.log_operation("extract_recommendations", final_report[:100], len(recommendations))
            return state
            
        except Exception as e:
            state["error"] = f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {str(e)}"
            self.log_operation("extract_recommendations", state, None, str(e))
            return state
    
    def _identify_critical_areas_node(self, state: DiagnosticState) -> DiagnosticState:
        """–í—ã—è–≤–ª—è–µ—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ–±–ª–∞—Å—Ç–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è"""
        try:
            if state.get("error"):
                return state
            
            analysis_data = state["analysis_data"]
            critical_areas = []
            
            # –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã –Ω–∏–∑–∫–∏—Ö –æ—Ü–µ–Ω–æ–∫
            low_score_pattern = re.findall(r'–ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞: ([0-4])/10', analysis_data)
            if len(low_score_pattern) >= 2:
                critical_areas.append("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –Ω–∏–∑–∫–∏–µ –æ—Ü–µ–Ω–∫–∏ –ø–æ –±–æ–ª—å—à–∏–Ω—Å—Ç–≤—É –≤–æ–ø—Ä–æ—Å–æ–≤")
            
            # –ò—â–µ–º –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è –ø—Ä–æ–±–ª–µ–º—ã –≤ –æ–±–ª–∞—Å—Ç—è—Ö —É–ª—É—á—à–µ–Ω–∏—è
            improvement_areas = re.findall(r'(?:–û–±–ª–∞—Å—Ç–∏ —É–ª—É—á—à–µ–Ω–∏—è|–°–ª–∞–±—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã): (.+)', analysis_data)
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–º—ã –ø—Ä–æ–±–ª–µ–º
            problem_themes = {
                '–ø–æ–Ω–∏–º–∞–Ω–∏–µ': ['–ø–æ–Ω–∏–º–∞–Ω–∏–µ', '–ø–æ–Ω–∏–º–∞–µ—Ç', '–Ω–µ–ø–æ–Ω–∏–º–∞–Ω–∏–µ', '–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø–æ–Ω–∏–º–∞–Ω–∏–µ'],
                '–ø–æ–ª–Ω–æ—Ç–∞ –æ—Ç–≤–µ—Ç–∞': ['–Ω–µ–ø–æ–ª–Ω–æ', '–Ω–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é', '–æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –¥–µ—Ç–∞–ª–µ–π', '–ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–Ω–æ'],
                '–∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ—Å—Ç—å': ['–Ω–µ–∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ', '–æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –ø—Ä–∏–º–µ—Ä–æ–≤', '–∞–±—Å—Ç—Ä–∞–∫—Ç–Ω–æ', '–Ω–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö'],
                '—Å—Ç—Ä—É–∫—Ç—É—Ä–∞': ['–Ω–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ', '—Ö–∞–æ—Ç–∏—á–Ω–æ', '–±–µ–∑ –ª–æ–≥–∏–∫–∏', '–±–µ—Å—Å–≤—è–∑–Ω–æ'],
                '–∑–Ω–∞–Ω–∏—è': ['–æ—à–∏–±–∫–∏ –≤ —Ñ–∞–∫—Ç–∞—Ö', '–Ω–µ—Ç–æ—á–Ω–æ—Å—Ç–∏', '–Ω–µ–≤–µ—Ä–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è']
            }
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏—è —Ç–µ–º
            theme_counts = {}
            for area in improvement_areas:
                area_lower = area.lower()
                for theme, keywords in problem_themes.items():
                    for keyword in keywords:
                        if keyword in area_lower:
                            theme_counts[theme] = theme_counts.get(theme, 0) + 1
                            break
            
            # –î–æ–±–∞–≤–ª—è–µ–º —á–∞—Å—Ç–æ —É–ø–æ–º–∏–Ω–∞–µ–º—ã–µ —Ç–µ–º—ã –ø—Ä–æ–±–ª–µ–º
            for theme, count in theme_counts.items():
                if count >= 2:
                    critical_areas.append(f"–°–∏—Å—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Å: {theme}")
            
            # –¢–∞–∫–∂–µ –∏—â–µ–º —Ç–æ—á–Ω—ã–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
            exact_areas = {}
            for area in improvement_areas:
                cleaned_area = area.strip()
                if len(cleaned_area) > 15:  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–µ —Ñ—Ä–∞–∑—ã
                    exact_areas[cleaned_area] = exact_areas.get(cleaned_area, 0) + 1
            
            for area, count in exact_areas.items():
                if count >= 2:
                    critical_areas.append(f"–ü–æ–≤—Ç–æ—Ä—è—é—â–∞—è—Å—è –ø—Ä–æ–±–ª–µ–º–∞: {area}")
            
            if not critical_areas:
                critical_areas.append("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ–±–ª–∞—Å—Ç–∏ –Ω–µ –≤—ã—è–≤–ª–µ–Ω—ã")
            
            state["critical_areas"] = critical_areas[:5]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            self.log_operation("identify_critical_areas", analysis_data[:100], len(critical_areas))
            return state
            
        except Exception as e:
            state["error"] = f"–û—à–∏–±–∫–∞ –≤—ã—è–≤–ª–µ–Ω–∏—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ–±–ª–∞—Å—Ç–µ–π: {str(e)}"
            self.log_operation("identify_critical_areas", state, None, str(e))
            return state
    
    def _create_diagnostic_result_node(self, state: DiagnosticState) -> DiagnosticState:
        """–°–æ–∑–¥–∞–µ—Ç –∏—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
        try:
            if state.get("error"):
                return state
            
            diagnostic_result = {
                'subject': self.subject,
                'pattern_analysis': state["pattern_analysis"],
                'statistics': state["statistics"],
                'grade_info': state["grade_info"],
                'final_report': state["final_report"],
                'recommendations': state["recommendations"],
                'critical_areas': state["critical_areas"],
                'timestamp': datetime.now()
            }
            
            state["diagnostic_result"] = diagnostic_result
            self.log_operation("create_diagnostic_result", "All components", "Result created")
            return state
            
        except Exception as e:
            state["error"] = f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: {str(e)}"
            self.log_operation("create_diagnostic_result", state, None, str(e))
            return state
    
    def _save_diagnostic_history_node(self, state: DiagnosticState) -> DiagnosticState:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫"""
        try:
            if state.get("error"):
                return state
            
            diagnostic_result = state["diagnostic_result"]
            if diagnostic_result:
                self.diagnostic_history.append(diagnostic_result)
                self.log_operation("save_diagnostic_history", "Result saved", len(self.diagnostic_history))
            
            return state
            
        except Exception as e:
            state["error"] = f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –∏—Å—Ç–æ—Ä–∏—é: {str(e)}"
            self.log_operation("save_diagnostic_history", state, None, str(e))
            return state
    
    def diagnose_exam_results(self, questions: List[Dict], evaluations: List[Dict], 
                            detailed_analysis: bool = True) -> Dict[str, Any]:
        """
        –ü—Ä–æ–≤–æ–¥–∏—Ç –∫–æ–º–ø–ª–µ–∫—Å–Ω—É—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —ç–∫–∑–∞–º–µ–Ω–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º LangGraph
        
        Args:
            questions: –°–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
            evaluations: –°–ø–∏—Å–æ–∫ –æ—Ü–µ–Ω–æ–∫ –æ—Ç–≤–µ—Ç–æ–≤
            detailed_analysis: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
            
        Returns:
            –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç—á–µ—Ç
        """
        print(f"üîç [DiagnosticAgent] –ù–∞—á–∞–ª–æ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: {len(questions)} –≤–æ–ø—Ä–æ—Å–æ–≤, {len(evaluations)} –æ—Ü–µ–Ω–æ–∫")
        try:
            # –°–æ–∑–¥–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            initial_state = DiagnosticState(
                questions=questions,
                evaluations=evaluations,
                diagnostic_result=None,
                error=None
            )
            
            print("üîç [DiagnosticAgent] –ó–∞–ø—É—Å–∫ LangGraph workflow –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏...")
            # –ó–∞–ø—É—Å–∫–∞–µ–º –≥—Ä–∞—Ñ
            result = self.app.invoke(initial_state)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if result.get("error"):
                print(f"‚ùå [DiagnosticAgent] –û—à–∏–±–∫–∞ –≤ workflow: {result['error']}")
                return {'error': result["error"]}
            
            print("‚úÖ [DiagnosticAgent] –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            return result.get("diagnostic_result", {})
            
        except Exception as e:
            error_msg = f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ diagnose_exam_results: {str(e)}"
            print(f"‚ùå [DiagnosticAgent] {error_msg}")
            self.log_operation("diagnose_exam_results", {
                "questions_count": len(questions),
                "evaluations_count": len(evaluations)
            }, None, error_msg)
            
            return {'error': error_msg}
    
    def run_diagnostics(self, questions: List[Dict], evaluations: List[Dict], 
                       detailed_analysis: bool = True) -> Dict[str, Any]:
        """
        –ê–ª–∏–∞—Å –¥–ª—è diagnose_exam_results –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        
        Args:
            questions: –°–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
            evaluations: –°–ø–∏—Å–æ–∫ –æ—Ü–µ–Ω–æ–∫ –æ—Ç–≤–µ—Ç–æ–≤
            detailed_analysis: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
            
        Returns:
            –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç—á–µ—Ç
        """
        print("üîç [DiagnosticAgent] –í—ã–∑–≤–∞–Ω run_diagnostics (–∞–ª–∏–∞—Å –¥–ª—è diagnose_exam_results)")
        return self.diagnose_exam_results(questions, evaluations, detailed_analysis)
    
    def compare_with_benchmark(self, current_results: Dict, benchmark_data: Dict = None) -> Dict[str, Any]:
        """–°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å —ç—Ç–∞–ª–æ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
        try:
            if not benchmark_data:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –Ω–æ—Ä–º—ã
                benchmark_data = {
                    'average_score': 7.0,
                    'excellence_threshold': 9.0,
                    'passing_threshold': 6.0,
                    'typical_distribution': {
                        'excellent': 0.15,
                        'good': 0.35,
                        'satisfactory': 0.35,
                        'poor': 0.15
                    }
                }
            
            chain = self.comparative_analysis_prompt | self.llm | StrOutputParser()
            
            comparison = chain.invoke({
                "current_results": str(current_results),
                "benchmark_data": str(benchmark_data)
            })
            
            return {
                'comparison_analysis': comparison,
                'benchmark_data': benchmark_data,
                'performance_level': self._determine_performance_level(
                    current_results.get('average_score', 0),
                    benchmark_data.get('average_score', 7.0)
                )
            }
            
        except Exception as e:
            self.log_operation("compare_with_benchmark", current_results, None, str(e))
            return {'error': f"–û—à–∏–±–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å —ç—Ç–∞–ª–æ–Ω–æ–º: {str(e)}"}
    
    def _determine_performance_level(self, student_avg: float, benchmark_avg: float) -> str:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —É—Ä–æ–≤–µ–Ω—å —É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç–∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —ç—Ç–∞–ª–æ–Ω–∞"""
        ratio = student_avg / benchmark_avg if benchmark_avg > 0 else 0
        
        if ratio >= 1.2:
            return "–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –≤—ã—à–µ —Å—Ä–µ–¥–Ω–µ–≥–æ"
        elif ratio >= 1.1:
            return "–≤—ã—à–µ —Å—Ä–µ–¥–Ω–µ–≥–æ"
        elif ratio >= 0.9:
            return "–Ω–∞ —É—Ä–æ–≤–Ω–µ —Å—Ä–µ–¥–Ω–µ–≥–æ"
        elif ratio >= 0.8:
            return "–Ω–∏–∂–µ —Å—Ä–µ–¥–Ω–µ–≥–æ"
        else:
            return "–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –Ω–∏–∂–µ —Å—Ä–µ–¥–Ω–µ–≥–æ"
    
    def get_diagnostic_history(self) -> List[Dict]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫"""
        return self.diagnostic_history.copy()
    
    def generate_learning_roadmap(self, diagnostic_result: Dict) -> Dict[str, Any]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–æ—Ä–æ–∂–Ω—É—é –∫–∞—Ä—Ç—É –æ–±—É—á–µ–Ω–∏—è"""
        try:
            recommendations = diagnostic_result.get('recommendations', [])
            critical_areas = diagnostic_result.get('critical_areas', [])
            
            # –ü—Ä–æ—Å—Ç–∞—è –¥–æ—Ä–æ–∂–Ω–∞—è –∫–∞—Ä—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
            roadmap = {
                'immediate_actions': critical_areas[:3],
                'short_term_goals': recommendations[:3],
                'medium_term_goals': recommendations[3:6] if len(recommendations) > 3 else [],
                'long_term_goals': recommendations[6:] if len(recommendations) > 6 else []
            }
            
            return roadmap
            
        except Exception as e:
            self.log_operation("generate_learning_roadmap", diagnostic_result, None, str(e))
            return {'error': f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ—Ä–æ–∂–Ω–æ–π –∫–∞—Ä—Ç—ã: {str(e)}"}
    
    def reset_history(self):
        """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫"""
        self.diagnostic_history = []
        super().reset_history()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è DiagnosticAgent –Ω–∞ LangGraph
def create_diagnostic_agent(
    subject: str = "–û–±—â–∏–µ –∑–Ω–∞–Ω–∏—è",
    topic_context: str = None
) -> DiagnosticAgentLangGraph:
    """–°–æ–∑–¥–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä DiagnosticAgent –Ω–∞ LangGraph"""
    print(f"üîç [create_diagnostic_agent] –°–æ–∑–¥–∞–Ω–∏–µ DiagnosticAgent –¥–ª—è '{subject}'")
    agent = DiagnosticAgentLangGraph(
        subject=subject,
        topic_context=topic_context
    )
    print("‚úÖ [create_diagnostic_agent] DiagnosticAgent —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
    return agent

# –ü—Å–µ–≤–¥–æ–Ω–∏–º –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
def create_diagnostic_agent_langgraph(
    subject: str = "–û–±—â–∏–µ –∑–Ω–∞–Ω–∏—è",
    topic_context: str = None
) -> DiagnosticAgentLangGraph:
    """–°–æ–∑–¥–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä DiagnosticAgent –Ω–∞ LangGraph (–ø—Å–µ–≤–¥–æ–Ω–∏–º –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)"""
    return create_diagnostic_agent(subject, topic_context)
