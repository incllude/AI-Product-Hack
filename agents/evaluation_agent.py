"""
–ê–≥–µ–Ω—Ç –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –Ω–∞ LangGraph
"""
# print("[EvaluationAgent] –ú–æ–¥—É–ª—å evaluation_agent.py –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è...")

from typing import Dict, List, Optional, Any
from langgraph.graph import StateGraph, END
from langchain_core.prompts import PromptTemplate
from langchain_core.output_parsers import StrOutputParser

from base import LangGraphAgentBase, EvaluationState
from yagpt_llm import create_yandex_llm
import json
import re
from datetime import datetime


class EvaluationAgentLangGraph(LangGraphAgentBase):
    """–ê–≥–µ–Ω—Ç –¥–ª—è –æ–±—ä–µ–∫—Ç–∏–≤–Ω–æ–π –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –æ—Ü–µ–Ω–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ LangGraph"""
    
    def __init__(self, subject: str = "–û–±—â–∏–µ –∑–Ω–∞–Ω–∏—è", topic_context: str = None):
        print(f"üîç [EvaluationAgent] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–∞ –æ—Ü–µ–Ω–∫–∏ –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–∞: {subject}")
        super().__init__(subject, topic_context)
        
        print("üîç [EvaluationAgent] –°–æ–∑–¥–∞–Ω–∏–µ YandexGPT LLM...")
        self.llm = create_yandex_llm()
        print("‚úÖ [EvaluationAgent] YandexGPT LLM —Å–æ–∑–¥–∞–Ω")
        
        self.evaluation_history = []
        
        print("üîç [EvaluationAgent] –°–æ–∑–¥–∞–Ω–∏–µ LangGraph —Å–æ—Å—Ç–æ—è–Ω–∏–π...")
        # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ —Å–æ—Å—Ç–æ—è–Ω–∏–π
        self.graph = self._create_evaluation_graph()
        self.app = self.graph.compile()
        print("‚úÖ [EvaluationAgent] LangGraph –≥—Ä–∞—Ñ —Å–æ–∑–¥–∞–Ω –∏ —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω")
        
        print("üîç [EvaluationAgent] –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–º–ø—Ç–æ–≤...")
        self._setup_prompts()
        print("‚úÖ [EvaluationAgent] –ê–≥–µ–Ω—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def _setup_prompts(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–º–ø—Ç–æ–≤ –¥–ª—è –æ—Ü–µ–Ω–∫–∏"""
        # print("[EvaluationAgent] _setup_prompts –≤—ã–∑–≤–∞–Ω")
        
        # –û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –æ—Ç–≤–µ—Ç–∞
        self.evaluation_prompt = PromptTemplate(
            input_variables=["subject", "topic_context", "question", "student_answer", "key_points", "topic_level"],
            template="""
–¢—ã —Å—Ç—Ä–æ–≥–∏–π –∏ –æ–±—ä–µ–∫—Ç–∏–≤–Ω—ã–π —ç–∫–∑–∞–º–µ–Ω–∞—Ç–æ—Ä –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É "{subject}".

{topic_context}

–û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —É–∫–∞–∑–∞–Ω–Ω–æ–π —Ç–µ–º–µ —ç–∫–∑–∞–º–µ–Ω–∞.

–í–û–ü–†–û–°: {question}

–û–¢–í–ï–¢ –°–¢–£–î–ï–ù–¢–ê: {student_answer}

–ö–†–ò–¢–ï–†–ò–ò –û–¶–ï–ù–ö–ò (–∫–∞–∂–¥—ã–π –æ—Ç 0 –¥–æ 10 –±–∞–ª–ª–æ–≤):

1. –ü–†–ê–í–ò–õ–¨–ù–û–°–¢–¨ –§–ê–ö–¢–û–í (0-10):
   - 9-10: –í—Å–µ —Ñ–∞–∫—Ç—ã –≤–µ—Ä–Ω—ã, –Ω–µ—Ç –æ—à–∏–±–æ–∫
   - 7-8: –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–µ–Ω–Ω–æ –≤–µ—Ä–Ω–æ, –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –Ω–µ—Ç–æ—á–Ω–æ—Å—Ç–∏
   - 5-6: –ß–∞—Å—Ç–∏—á–Ω–æ –≤–µ—Ä–Ω–æ, –µ—Å—Ç—å –æ—à–∏–±–∫–∏
   - 3-4: –ú–Ω–æ–≥–æ –æ—à–∏–±–æ–∫, –Ω–æ –µ—Å—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
   - 0-2: –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ —Ñ–∞–∫—Ç–æ–≤ –Ω–µ–≤–µ—Ä–Ω—ã

2. –ü–û–õ–ù–û–¢–ê –û–¢–í–ï–¢–ê (0-10):
   - 9-10: –ü–æ–∫—Ä—ã—Ç—ã –≤—Å–µ –∫–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã
   - 7-8: –ü–æ–∫—Ä—ã—Ç–æ –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –∫–ª—é—á–µ–≤—ã—Ö –º–æ–º–µ–Ω—Ç–æ–≤
   - 5-6: –ü–æ–∫—Ä—ã—Ç–∞ –ø–æ–ª–æ–≤–∏–Ω–∞ –∫–ª—é—á–µ–≤—ã—Ö –º–æ–º–µ–Ω—Ç–æ–≤
   - 3-4: –ü–æ–∫—Ä—ã—Ç–∞ –º–∞–ª–∞—è —á–∞—Å—Ç—å –∫–ª—é—á–µ–≤—ã—Ö –º–æ–º–µ–Ω—Ç–æ–≤
   - 0-2: –ö–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã –ø–æ—á—Ç–∏ –Ω–µ –∑–∞—Ç—Ä–æ–Ω—É—Ç—ã

3. –ü–û–ù–ò–ú–ê–ù–ò–ï –ö–û–ù–¶–ï–ü–¶–ò–ô (0-10):
   - 9-10: –ì–ª—É–±–æ–∫–æ–µ –ø–æ–Ω–∏–º–∞–Ω–∏–µ, –º–æ–∂–µ—Ç –æ–±—ä—è—Å–Ω–∏—Ç—å –ø—Ä–∏–Ω—Ü–∏–ø—ã
   - 7-8: –•–æ—Ä–æ—à–µ–µ –ø–æ–Ω–∏–º–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–Ω—Ü–µ–ø—Ü–∏–π
   - 5-6: –ü–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–Ω–æ–µ –ø–æ–Ω–∏–º–∞–Ω–∏–µ
   - 3-4: –°–ª–∞–±–æ–µ –ø–æ–Ω–∏–º–∞–Ω–∏–µ, –ø—É—Ç–∞–µ—Ç—Å—è –≤ –∫–æ–Ω—Ü–µ–ø—Ü–∏—è—Ö
   - 0-2: –ù–µ –ø–æ–Ω–∏–º–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–Ω—Ü–µ–ø—Ü–∏–π

–û–°–û–ë–´–ï –¢–†–ï–ë–û–í–ê–ù–ò–Ø:
- –ë—É–¥—å –æ–±—ä–µ–∫—Ç–∏–≤–µ–Ω –∏ —Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤
- –û—Ü–µ–Ω–∏–≤–∞–π —Ç–æ–ª—å–∫–æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
- –ù–ï —É—á–∏—Ç—ã–≤–∞–π –≥—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ –≤–ª–∏—è—é—Ç –Ω–∞ —Å–º—ã—Å–ª
- –£—á–∏—Ç—ã–≤–∞–π —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ —Ç–µ–º—ã –ø—Ä–∏ –æ—Ü–µ–Ω–∫–µ

–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:
–ü–†–ê–í–ò–õ–¨–ù–û–°–¢–¨: [–±–∞–ª–ª]/10 - [–∫—Ä–∞—Ç–∫–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ]
–ü–û–õ–ù–û–¢–ê: [–±–∞–ª–ª]/10 - [–∫—Ä–∞—Ç–∫–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ]
–ü–û–ù–ò–ú–ê–ù–ò–ï: [–±–∞–ª–ª]/10 - [–∫—Ä–∞—Ç–∫–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ]
–ò–¢–û–ì–û–í–ê–Ø_–û–¶–ï–ù–ö–ê: [—Å—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª]/10
–î–ï–¢–ê–õ–¨–ù–ê–Ø_–û–ë–†–ê–¢–ù–ê–Ø_–°–í–Ø–ó–¨: [–ø–æ–¥—Ä–æ–±–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –æ—Ç–≤–µ—Ç–∞]
–°–ò–õ–¨–ù–´–ï_–°–¢–û–†–û–ù–´: [—á—Ç–æ —Ö–æ—Ä–æ—à–æ –≤ –æ—Ç–≤–µ—Ç–µ]
–°–õ–ê–ë–´–ï_–°–¢–û–†–û–ù–´: [—á—Ç–æ –ø–ª–æ—Ö–æ –≤ –æ—Ç–≤–µ—Ç–µ, –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –æ—à–∏–±–∫–∏]

–ü—Ä–∏–º–µ—Ä:
–ü–†–ê–í–ò–õ–¨–ù–û–°–¢–¨: 8/10 - –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∞–∫—Ç—ã –≤–µ—Ä–Ω—ã, –Ω–æ –µ—Å—Ç—å –Ω–µ—Ç–æ—á–Ω–æ—Å—Ç—å –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏
–ü–û–õ–ù–û–¢–ê: 6/10 - –†–∞—Å—Å–º–æ—Ç—Ä–µ–Ω—ã –Ω–µ –≤—Å–µ –∫–ª—é—á–µ–≤—ã–µ –∞—Å–ø–µ–∫—Ç—ã
–ü–û–ù–ò–ú–ê–ù–ò–ï: 7/10 - –ü–æ–∫–∞–∑–∞–Ω–æ —Ö–æ—Ä–æ—à–µ–µ –ø–æ–Ω–∏–º–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø—Ä–∏–Ω—Ü–∏–ø–æ–≤
–ò–¢–û–ì–û–í–ê–Ø_–û–¶–ï–ù–ö–ê: 7.0/10
–î–ï–¢–ê–õ–¨–ù–ê–Ø_–û–ë–†–ê–¢–ù–ê–Ø_–°–í–Ø–ó–¨: –°—Ç—É–¥–µ–Ω—Ç –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ö–æ—Ä–æ—à–µ–µ –ø–æ–Ω–∏–º–∞–Ω–∏–µ...
–°–ò–õ–¨–ù–´–ï_–°–¢–û–†–û–ù–´: –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø–æ–Ω–∏–º–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–Ω—Ü–µ–ø—Ü–∏–π
–°–õ–ê–ë–´–ï_–°–¢–û–†–û–ù–´: –ù–µ–ø–æ–ª–Ω–æ–µ —Ä–∞—Å–∫—Ä—ã—Ç–∏–µ —Ç–µ–º—ã, –Ω–µ—Ç–æ—á–Ω–æ—Å—Ç—å –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ —Ü–∏–∫–ª–∞ for
"""
        )
        
    
    def _create_evaluation_graph(self) -> StateGraph:
        """–°–æ–∑–¥–∞–µ—Ç –≥—Ä–∞—Ñ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤"""
        # print("[EvaluationAgent] _create_evaluation_graph –≤—ã–∑–≤–∞–Ω")
        graph = StateGraph(EvaluationState)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —É–∑–ª—ã
        graph.add_node("validate_input", self._validate_input_node)
        graph.add_node("handle_empty_answer", self._handle_empty_answer_node)
        graph.add_node("detailed_evaluation", self._detailed_evaluation_node)
        graph.add_node("parse_evaluation", self._parse_evaluation_node)
        graph.add_node("create_summary", self._create_summary_node)
        graph.add_node("save_to_history", self._save_to_history_node)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–æ—á–∫—É –≤—Ö–æ–¥–∞
        graph.set_entry_point("validate_input")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —É—Å–ª–æ–≤–Ω—ã–µ —Ä–µ–±—Ä–∞
        graph.add_conditional_edges(
            "validate_input",
            self._decide_evaluation_path,
            {
                "empty_answer": "handle_empty_answer",
                "detailed": "detailed_evaluation"
            }
        )
        
        # –†–µ–±—Ä–∞ –∫ –ø–∞—Ä—Å–∏–Ω–≥—É
        graph.add_edge("detailed_evaluation", "parse_evaluation")
        graph.add_edge("handle_empty_answer", "create_summary")  # –ü—É—Å—Ç—ã–µ –æ—Ç–≤–µ—Ç—ã –∏–¥—É—Ç —Å—Ä–∞–∑—É –∫ —Å–æ–∑–¥–∞–Ω–∏—é summary
        
        # –†–µ–±—Ä–∞ –∫ —Å–æ–∑–¥–∞–Ω–∏—é summary
        graph.add_edge("parse_evaluation", "create_summary")
        
        # –†–µ–±—Ä–∞ –∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—é –≤ –∏—Å—Ç–æ—Ä–∏—é
        graph.add_edge("create_summary", "save_to_history")
        
        # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ
        graph.add_edge("save_to_history", END)
        
        return graph
    
    def _validate_input_node(self, state: EvaluationState) -> EvaluationState:
        """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"""
        # print("[EvaluationAgent] _validate_input_node –≤—ã–∑–≤–∞–Ω")
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
            if not state.get("question"):
                state["error"] = "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤–æ–ø—Ä–æ—Å"
                return state
            
            if not state.get("student_answer") or state["student_answer"].strip() == "":
                state["evaluation_type"] = "empty"
                return state
            
            # –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –æ—Ü–µ–Ω–∫—É
            state["evaluation_type"] = "detailed"
            
            self.log_operation("validate_input", state, None)
            return state
            
        except Exception as e:
            state["error"] = f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {str(e)}"
            self.log_operation("validate_input", state, None, str(e))
            return state
    
    def _decide_evaluation_path(self, state: EvaluationState) -> str:
        """–†–µ—à–∞–µ—Ç, –∫–∞–∫–æ–π –ø—É—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –æ—Ü–µ–Ω–∫–∏"""
        # print("[EvaluationAgent] _decide_evaluation_path –≤—ã–∑–≤–∞–Ω")
        if state.get("error"):
            return "empty_answer"  # Fallback –¥–ª—è –æ—à–∏–±–æ–∫
        
        evaluation_type = state.get("evaluation_type", "detailed")
        
        if evaluation_type == "empty":
            return "empty_answer"
        else:
            return "detailed"
    
    def _handle_empty_answer_node(self, state: EvaluationState) -> EvaluationState:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–ª—É—á–∞–π –ø—É—Å—Ç–æ–≥–æ –æ—Ç–≤–µ—Ç–∞"""
        # print("[EvaluationAgent] _handle_empty_answer_node –≤—ã–∑–≤–∞–Ω")
        try:
            empty_result = {
                'type': 'empty',
                'total_score': 0,
                'comment': "–û—Ç–≤–µ—Ç –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω",
                'feedback': "–°—Ç—É–¥–µ–Ω—Ç –Ω–µ –¥–∞–ª –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å",
                'raw_response': "EMPTY_ANSWER",
                'timestamp': datetime.now()
            }
            
            state["evaluation_result"] = empty_result
            self.log_operation("handle_empty_answer", state, empty_result)
            return state
            
        except Exception as e:
            state["error"] = f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—É—Å—Ç–æ–≥–æ –æ—Ç–≤–µ—Ç–∞: {str(e)}"
            self.log_operation("handle_empty_answer", state, None, str(e))
            return state
    
    def _detailed_evaluation_node(self, state: EvaluationState) -> EvaluationState:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –æ—Ü–µ–Ω–∫—É –æ—Ç–≤–µ—Ç–∞"""
        # print("[EvaluationAgent] _detailed_evaluation_node –≤—ã–∑–≤–∞–Ω")
        try:
            chain = self.evaluation_prompt | self.llm | StrOutputParser()
            
            response = chain.invoke({
                "subject": self.subject,
                "topic_context": self.topic_context,
                "question": state["question"],
                "student_answer": state["student_answer"],
                "key_points": state.get("key_points", ""),
                "topic_level": state.get("topic_level", "–±–∞–∑–æ–≤—ã–π")
            })
            
            state["raw_evaluation"] = response
            state["evaluation_type"] = "detailed"
            self.log_operation("detailed_evaluation", state, response)
            return state
            
        except Exception as e:
            state["error"] = f"–û—à–∏–±–∫–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–π –æ—Ü–µ–Ω–∫–∏: {str(e)}"
            self.log_operation("detailed_evaluation", state, None, str(e))
            return state
    
    
    def _parse_evaluation_node(self, state: EvaluationState) -> EvaluationState:
        """–ü–∞—Ä—Å–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ü–µ–Ω–∫–∏"""
        # print("[EvaluationAgent] _parse_evaluation_node –≤—ã–∑–≤–∞–Ω")
        try:
            if state.get("error") or not state.get("raw_evaluation"):
                return state
            
            response = state["raw_evaluation"]
            evaluation_type = state.get("evaluation_type", "detailed")
            
            # –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥
            evaluation_result = self._parse_detailed_evaluation(response)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            evaluation_result.update({
                'timestamp': datetime.now(),
                'question_metadata': state.get("question_metadata", {})
            })
            
            state["evaluation_result"] = evaluation_result
            self.log_operation("parse_evaluation", response, evaluation_result)
            return state
            
        except Exception as e:
            state["error"] = f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ü–µ–Ω–∫–∏: {str(e)}"
            self.log_operation("parse_evaluation", state, None, str(e))
            return state
    
    def _create_summary_node(self, state: EvaluationState) -> EvaluationState:
        """–°–æ–∑–¥–∞–µ—Ç —Å–≤–æ–¥–∫—É –æ—Ü–µ–Ω–∫–∏ –ë–ï–ó —Ç–µ–∫—Å—Ç–∞ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ QuestionAgent"""
        # print("[EvaluationAgent] _create_summary_node –≤—ã–∑–≤–∞–Ω")
        try:
            evaluation_result = state.get("evaluation_result")
            if not evaluation_result:
                state["error"] = "–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –æ—Ü–µ–Ω–∫–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–≤–æ–¥–∫–∏"
                return state
            
            question_metadata = state.get("question_metadata", {})
            
            summary = {
                # –û—Å–Ω–æ–≤–Ω—ã–µ –æ—Ü–µ–Ω–∫–∏
                'total_score': evaluation_result.get('total_score', 0),
                'criteria_scores': evaluation_result.get('criteria_scores', {}),
                
                # –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –æ—Ç–≤–µ—Ç–∞ (–æ–±–æ–±—â–µ–Ω–Ω—ã–µ)
                'strengths': evaluation_result.get('strengths', ''),
                'weaknesses': evaluation_result.get('weaknesses', ''),
                
                # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å–∞
                'bloom_level': question_metadata.get('bloom_level', 'unknown'),
                'question_type': question_metadata.get('question_type', 'unknown'),
                'topic_level': question_metadata.get('topic_level', 'unknown'),
                
                # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏
                'timestamp': evaluation_result.get('timestamp'),
                'evaluation_type': evaluation_result.get('type', 'detailed'),
                
                # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç–∏
                'performance_indicators': {
                    'correctness_level': self._categorize_score(evaluation_result.get('criteria_scores', {}).get('correctness', 0)),
                    'completeness_level': self._categorize_score(evaluation_result.get('criteria_scores', {}).get('completeness', 0)),
                    'understanding_level': self._categorize_score(evaluation_result.get('criteria_scores', {}).get('understanding', 0)),
                    'structure_level': self._categorize_score(evaluation_result.get('criteria_scores', {}).get('structure', 0)),
                    'overall_level': self._categorize_score(evaluation_result.get('total_score', 0))
                }
                
                # –í–ê–ñ–ù–û: –ù–ï –í–ö–õ–Æ–ß–ê–ï–ú —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ —Å—Ç—É–¥–µ–Ω—Ç–∞ –¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏
                # 'student_answer': evaluation_result.get('student_answer')  # <-- –ò–°–ö–õ–Æ–ß–ï–ù–û
            }
            
            state["evaluation_summary"] = summary
            self.log_operation("create_summary", evaluation_result, summary)
            return state
            
        except Exception as e:
            state["error"] = f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–≤–æ–¥–∫–∏: {str(e)}"
            self.log_operation("create_summary", state, None, str(e))
            return state
    
    def _save_to_history_node(self, state: EvaluationState) -> EvaluationState:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é"""
        # print("[EvaluationAgent] _save_to_history_node –≤—ã–∑–≤–∞–Ω")
        try:
            evaluation_result = state.get("evaluation_result")
            if evaluation_result and not state.get("error"):
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π (–≤–∫–ª—é—á–∞—è —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞)
                history_entry = {
                    'question': state["question"],
                    'answer': state["student_answer"],  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è DiagnosticAgent
                    'evaluation': evaluation_result,
                    'timestamp': evaluation_result.get('timestamp'),
                    'question_metadata': state.get("question_metadata", {})
                }
                
                self.evaluation_history.append(history_entry)
                
                self.log_operation("save_to_history", evaluation_result, "Saved successfully")
            
            return state
            
        except Exception as e:
            state["error"] = f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –∏—Å—Ç–æ—Ä–∏—é: {str(e)}"
            self.log_operation("save_to_history", state, None, str(e))
            return state
    
    def _parse_detailed_evaluation(self, response: str) -> Dict[str, Any]:
        """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –¥–µ—Ç–∞–ª—å–Ω–æ–π –æ—Ü–µ–Ω–∫–∏ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏"""
        # print("[EvaluationAgent] _parse_detailed_evaluation –≤—ã–∑–≤–∞–Ω")
        
        # –£–ø—Ä–æ—â–µ–Ω–Ω—ã–µ –∏ –Ω–∞–¥–µ–∂–Ω—ã–µ —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
        # –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ–≤—ã–µ –æ—Ü–µ–Ω–∫–∏
        correctness_score_match = re.search(r'–ü–†–ê–í–ò–õ–¨–ù–û–°–¢–¨:\s*(\d+)/10', response)
        completeness_score_match = re.search(r'–ü–û–õ–ù–û–¢–ê:\s*(\d+)/10', response)
        understanding_score_match = re.search(r'–ü–û–ù–ò–ú–ê–ù–ò–ï:\s*(\d+)/10', response)
        
        # –ó–∞—Ç–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ –∏—â–µ–º –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏—è
        correctness_reason_match = re.search(r'–ü–†–ê–í–ò–õ–¨–ù–û–°–¢–¨:\s*\d+/10\s*[‚Äî\-‚Äì]\s*(.+?)(?=\n[–ê-–Ø–Å–á–Ü–Ñ“ê]+:|$)', response, re.DOTALL)
        completeness_reason_match = re.search(r'–ü–û–õ–ù–û–¢–ê:\s*\d+/10\s*[‚Äî\-‚Äì]\s*(.+?)(?=\n[–ê-–Ø–Å–á–Ü–Ñ“ê]+:|$)', response, re.DOTALL)
        understanding_reason_match = re.search(r'–ü–û–ù–ò–ú–ê–ù–ò–ï:\s*\d+/10\s*[‚Äî\-‚Äì]\s*(.+?)(?=\n[–ê-–Ø–Å–á–Ü–Ñ“ê]+:|$)', response, re.DOTALL)
        
        # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º —á–∏—Å–ª–∞ —Å —Ç–æ—á–∫–æ–π –∏ –∑–∞–ø—è—Ç–æ–π –≤ –∫–∞—á–µ—Å—Ç–≤–µ –¥–µ—Å—è—Ç–∏—á–Ω–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è
        # –û–¢–ö–õ–Æ–ß–ï–ù–û: –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ç–æ–≥–æ–≤—É—é –æ—Ü–µ–Ω–∫—É –æ—Ç LLM, —Ç–æ–ª—å–∫–æ —Ä–∞—Å—á–µ—Ç–Ω—É—é
        # total_score_match = re.search(r'–ò–¢–û–ì–û–í–ê–Ø_–û–¶–ï–ù–ö–ê:\s*([\d,\.]+)\/10', response)
        total_score_match = None
        
        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –±–ª–æ–∫–æ–≤ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –≥—Ä–∞–Ω–∏—Ü–∞–º–∏
        feedback_match = re.search(r'–î–ï–¢–ê–õ–¨–ù–ê–Ø_–û–ë–†–ê–¢–ù–ê–Ø_–°–í–Ø–ó–¨:\s*(.+?)(?=\n(?:–°–ò–õ–¨–ù–´–ï_–°–¢–û–†–û–ù–´:|–°–õ–ê–ë–´–ï_–°–¢–û–†–û–ù–´:)|$)', response, re.DOTALL)
        strengths_match = re.search(r'–°–ò–õ–¨–ù–´–ï_–°–¢–û–†–û–ù–´:\s*(.+?)(?=\n(?:–°–õ–ê–ë–´–ï_–°–¢–û–†–û–ù–´:|–î–ï–¢–ê–õ–¨–ù–ê–Ø_–û–ë–†–ê–¢–ù–ê–Ø_–°–í–Ø–ó–¨:)|$)', response, re.DOTALL)
        weaknesses_match = re.search(r'–°–õ–ê–ë–´–ï_–°–¢–û–†–û–ù–´:\s*(.+?)(?=\n(?:–°–ò–õ–¨–ù–´–ï_–°–¢–û–†–û–ù–´:|–î–ï–¢–ê–õ–¨–ù–ê–Ø_–û–ë–†–ê–¢–ù–ê–Ø_–°–í–Ø–ó–¨:)|$)', response, re.DOTALL)
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Ü–µ–Ω–∫–∏ –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º
        correctness_score = int(correctness_score_match.group(1)) if correctness_score_match else 0
        completeness_score = int(completeness_score_match.group(1)) if completeness_score_match else 0
        understanding_score = int(understanding_score_match.group(1)) if understanding_score_match else 0
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ä–µ–¥–Ω–µ–µ –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–æ–µ –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤ –∫–∞–∫ –æ—Å–Ω–æ–≤—É
        criteria_scores = [correctness_score, completeness_score, understanding_score]
        calculated_score = sum(criteria_scores) / len(criteria_scores) if criteria_scores else 0
        
        # –£–ü–†–û–©–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê: –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ —Ä–∞—Å—á–µ—Ç–Ω—É—é –æ—Ü–µ–Ω–∫—É
        llm_final_score = None  # –ù–µ –∏–∑–≤–ª–µ–∫–∞–µ–º –∏—Ç–æ–≥–æ–≤—É—é –æ—Ü–µ–Ω–∫—É –æ—Ç LLM
        final_score = calculated_score  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ä–µ–¥–Ω–µ–µ –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–æ–µ –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤
        consistency_warning = None
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ –≤—Å–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ 0, –Ω–æ –∏—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞ > 0
        if all(score == 0 for score in criteria_scores) and final_score > 0:
            print(f"‚ö†Ô∏è –í—Å–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ 0, –Ω–æ –∏—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞ {final_score}. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ 0.")
            final_score = 0
            consistency_warning = "–í—Å–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ –æ—Ü–µ–Ω–µ–Ω—ã –≤ 0 –±–∞–ª–ª–æ–≤, –∏—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞ —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∞"
        
        # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞ (—Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö)
        if all(score == 0 for score in criteria_scores) and "–ü–†–ê–í–ò–õ–¨–ù–û–°–¢–¨:" in response:
            print(f"‚ö†Ô∏è [–ü–∞—Ä—Å–∏–Ω–≥] –ö—Ä–∏—Ç–µ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã! –û—Ç–ª–∞–¥–∫–∞:")
            print(f"  –ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å: {correctness_score}/10 (–Ω–∞–π–¥–µ–Ω–æ: {correctness_score_match is not None})")
            print(f"  –ü–æ–ª–Ω–æ—Ç–∞: {completeness_score}/10 (–Ω–∞–π–¥–µ–Ω–æ: {completeness_score_match is not None})")
            print(f"  –ü–æ–Ω–∏–º–∞–Ω–∏–µ: {understanding_score}/10 (–Ω–∞–π–¥–µ–Ω–æ: {understanding_score_match is not None})")
            print(f"  –†–∞—Å—á–µ—Ç–Ω–∞—è: {calculated_score:.1f}")
            print(f"  –§–∏–Ω–∞–ª—å–Ω–∞—è: {final_score:.1f}")
            print(f"  –ü–µ—Ä–≤—ã–µ —Å—Ç—Ä–æ–∫–∏ –æ—Ç–≤–µ—Ç–∞:")
            lines = response.split('\n')[:5]
            for i, line in enumerate(lines):
                print(f"    [{i}]: {line}")
        else:
            # –£—Å–ø–µ—à–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ - –ù–ï –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            # print(f"‚úÖ [–ü–∞—Ä—Å–∏–Ω–≥] –û—Ü–µ–Ω–∫–∏: {correctness_score}/{completeness_score}/{understanding_score}, –∏—Ç–æ–≥–æ: {final_score:.1f}")
            pass
        
        result = {
            'type': 'detailed',
            'total_score': round(final_score, 1),
            'criteria_scores': {
                'correctness': correctness_score,
                'completeness': completeness_score,
                'understanding': understanding_score
            },
            'criteria_feedback': {
                'correctness': correctness_reason_match.group(1).strip() if correctness_reason_match else "",
                'completeness': completeness_reason_match.group(1).strip() if completeness_reason_match else "",
                'understanding': understanding_reason_match.group(1).strip() if understanding_reason_match else ""
            },
            'detailed_feedback': feedback_match.group(1).strip() if feedback_match else "",
            'strengths': strengths_match.group(1).strip() if strengths_match else "",
            'weaknesses': weaknesses_match.group(1).strip() if weaknesses_match else "",
            'raw_response': response,
            'evaluation_metadata': {
                'calculated_score': round(calculated_score, 1),
                'llm_final_score': None,  # –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º LLM –æ—Ü–µ–Ω–∫—É
                'consistency_warning': consistency_warning,
                'score_method': 'criteria_average'  # –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ä–µ–¥–Ω–µ–µ –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–æ–µ
            }
        }
        
        return result
    
    
    def _categorize_score(self, score: float) -> str:
        """–ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∏—Ä—É–µ—Ç —á–∏—Å–ª–æ–≤—É—é –æ—Ü–µ–Ω–∫—É –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ"""
        # print("[EvaluationAgent] _categorize_score –≤—ã–∑–≤–∞–Ω —Å score:", score)
        if score >= 9:
            return "–æ—Ç–ª–∏—á–Ω–æ"
        elif score >= 7:
            return "—Ö–æ—Ä–æ—à–æ"
        elif score >= 5:
            return "—É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ"
        elif score >= 3:
            return "—Å–ª–∞–±–æ"
        else:
            return "–Ω–µ—É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ"
    
    def evaluate_answer(self, question: str, student_answer: str, key_points: str, 
                       topic_level: str = "–±–∞–∑–æ–≤—ã–π", detailed: bool = True) -> Dict[str, Any]:
        """
        –û—Ü–µ–Ω–∏–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç —Å—Ç—É–¥–µ–Ω—Ç–∞ –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º LangGraph
        
        # print("[EvaluationAgent] evaluate_answer –≤—ã–∑–≤–∞–Ω —Å –≤–æ–ø—Ä–æ—Å–æ–º:", question[:100] + "..." if len(question) > 100 else question)
        
        Args:
            question: –¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞
            student_answer: –û—Ç–≤–µ—Ç —Å—Ç—É–¥–µ–Ω—Ç–∞
            key_points: –ö–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã –¥–ª—è –æ—Ç–≤–µ—Ç–∞
            topic_level: –£—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ —Ç–µ–º—ã
            detailed: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –æ—Ü–µ–Ω–∫—É –∏–ª–∏ –±—ã—Å—Ç—Ä—É—é
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ü–µ–Ω–∫–∏
        """
        try:
            # –°–æ–∑–¥–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            initial_state = EvaluationState(
                question=question,
                student_answer=student_answer,
                key_points=key_points,
                topic_level=topic_level,
                question_metadata={'detailed': detailed},
                evaluation_result=None,
                evaluation_summary=None,
                error=None
            )
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –≥—Ä–∞—Ñ
            result = self.app.invoke(initial_state)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if result.get("error"):
                return {
                    "error": result["error"],
                    "type": "error",
                    "total_score": 0,
                    "timestamp": datetime.now()
                }
            
            return result.get("evaluation_result", {})
            
        except Exception as e:
            error_msg = f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ evaluate_answer: {str(e)}"
            self.log_operation("evaluate_answer", {
                "question": question[:100],
                "answer": student_answer[:100]
            }, None, error_msg)
            
            return {
                "error": error_msg,
                "type": "error", 
                "total_score": 0,
                "timestamp": datetime.now()
            }
    
    def get_evaluation_statistics(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –æ—Ü–µ–Ω–∫–∞–º"""
        # print("[EvaluationAgent] get_evaluation_statistics –≤—ã–∑–≤–∞–Ω")
        if not self.evaluation_history:
            return {'message': '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞'}
        
        scores = [eval_data['evaluation']['total_score'] for eval_data in self.evaluation_history 
                 if 'total_score' in eval_data['evaluation']]
        
        if not scores:
            return {'message': '–ù–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö –æ—Ü–µ–Ω–æ–∫'}
        
        return {
            'total_evaluations': len(self.evaluation_history),
            'average_score': sum(scores) / len(scores),
            'highest_score': max(scores),
            'lowest_score': min(scores),
            'score_distribution': {
                'excellent': len([s for s in scores if s >= 9]),
                'good': len([s for s in scores if 7 <= s < 9]),
                'satisfactory': len([s for s in scores if 5 <= s < 7]),
                'poor': len([s for s in scores if s < 5])
            }
        }
    
    def get_evaluation_history(self) -> List[Dict]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –æ—Ü–µ–Ω–æ–∫"""
        # print("[EvaluationAgent] get_evaluation_history –≤—ã–∑–≤–∞–Ω")
        return self.evaluation_history.copy()
    
    def get_evaluation_summaries_for_question_agent(self) -> List[Dict]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–≤–æ–¥–æ–∫ –æ—Ü–µ–Ω–æ–∫ –ë–ï–ó —Ç–µ–∫—Å—Ç–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è QuestionAgent
        
        # print("[EvaluationAgent] get_evaluation_summaries_for_question_agent –≤—ã–∑–≤–∞–Ω")
        
        Returns:
            –°–ø–∏—Å–æ–∫ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –æ—Ü–µ–Ω–æ–∫ –±–µ–∑ –ø—Ä–∏–≤–∞—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        """
        summaries = []
        
        for evaluation in self.evaluation_history:
            # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å–∞ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ –æ—Ü–µ–Ω–æ–∫
            question_metadata = evaluation.get('question_metadata', {})
            
            # –°–æ–∑–¥–∞–µ–º summary –±–µ–∑ —Ç–µ–∫—Å—Ç–∞ –æ—Ç–≤–µ—Ç–∞
            summary = self.create_evaluation_summary(evaluation['evaluation'], question_metadata)
            summaries.append(summary)
        
        return summaries
    
    def create_evaluation_summary(self, evaluation_result: Dict, question_data: Dict = None) -> Dict:
        """
        –°–æ–∑–¥–∞–µ—Ç —Å–≤–æ–¥–∫—É –æ—Ü–µ–Ω–∫–∏ –ë–ï–ó —Ç–µ–∫—Å—Ç–∞ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ QuestionAgent
        
        # print("[EvaluationAgent] create_evaluation_summary –≤—ã–∑–≤–∞–Ω")
        
        Args:
            evaluation_result: –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ü–µ–Ω–∫–∏ –æ—Ç evaluate_answer
            question_data: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –≤–æ–ø—Ä–æ—Å–µ
            
        Returns:
            –°–≤–æ–¥–∫–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –ë–ï–ó —Ç–µ–∫—Å—Ç–∞ –æ—Ç–≤–µ—Ç–∞ —Å—Ç—É–¥–µ–Ω—Ç–∞
        """
        summary = {
            # –û—Å–Ω–æ–≤–Ω—ã–µ –æ—Ü–µ–Ω–∫–∏
            'total_score': evaluation_result.get('total_score', 0),
            'criteria_scores': evaluation_result.get('criteria_scores', {}),
            
            # –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –æ—Ç–≤–µ—Ç–∞ (–æ–±–æ–±—â–µ–Ω–Ω—ã–µ)
            'strengths': evaluation_result.get('strengths', ''),
            'weaknesses': evaluation_result.get('weaknesses', ''),
            
            # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å–∞
            'bloom_level': question_data.get('bloom_level') if question_data else 'unknown',
            'question_type': question_data.get('question_type') if question_data else 'unknown',
            'topic_level': question_data.get('topic_level') if question_data else 'unknown',
            
            # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏
            'timestamp': evaluation_result.get('timestamp'),
            'evaluation_type': evaluation_result.get('type', 'detailed'),
            
            # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç–∏
            'performance_indicators': {
                'correctness_level': self._categorize_score(evaluation_result.get('criteria_scores', {}).get('correctness', 0)),
                'completeness_level': self._categorize_score(evaluation_result.get('criteria_scores', {}).get('completeness', 0)),
                'understanding_level': self._categorize_score(evaluation_result.get('criteria_scores', {}).get('understanding', 0)),
                'structure_level': self._categorize_score(evaluation_result.get('criteria_scores', {}).get('structure', 0)),
                'overall_level': self._categorize_score(evaluation_result.get('total_score', 0))
            }
            
            # –í–ê–ñ–ù–û: –ù–ï –í–ö–õ–Æ–ß–ê–ï–ú —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ —Å—Ç—É–¥–µ–Ω—Ç–∞ –¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏
            # 'student_answer': evaluation_result.get('student_answer')  # <-- –ò–°–ö–õ–Æ–ß–ï–ù–û
        }
        
        return summary
    
    def reset_history(self):
        """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –æ—Ü–µ–Ω–æ–∫"""
        # print("[EvaluationAgent] reset_history –≤—ã–∑–≤–∞–Ω")
        self.evaluation_history = []
        super().reset_history()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è EvaluationAgent –Ω–∞ LangGraph
def create_evaluation_agent(
    subject: str = "–û–±—â–∏–µ –∑–Ω–∞–Ω–∏—è",
    topic_context: str = None
) -> EvaluationAgentLangGraph:
    """–°–æ–∑–¥–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä EvaluationAgent –Ω–∞ LangGraph"""
    print(f"üîç [create_evaluation_agent] –°–æ–∑–¥–∞–Ω–∏–µ EvaluationAgent –¥–ª—è '{subject}'")
    agent = EvaluationAgentLangGraph(
        subject=subject,
        topic_context=topic_context
    )
    print("‚úÖ [create_evaluation_agent] EvaluationAgent —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
    return agent

# –ü—Å–µ–≤–¥–æ–Ω–∏–º –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
def create_evaluation_agent_langgraph(
    subject: str = "–û–±—â–∏–µ –∑–Ω–∞–Ω–∏—è",
    topic_context: str = None
) -> EvaluationAgentLangGraph:
    """–°–æ–∑–¥–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä EvaluationAgent –Ω–∞ LangGraph (–ø—Å–µ–≤–¥–æ–Ω–∏–º –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)"""
    # print("[EvaluationAgent] create_evaluation_agent_langgraph –≤—ã–∑–≤–∞–Ω")
    return create_evaluation_agent(subject, topic_context)

# print("[EvaluationAgent] –ú–æ–¥—É–ª—å evaluation_agent.py –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
