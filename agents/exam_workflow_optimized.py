"""
–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π workflow —ç–∫–∑–∞–º–µ–Ω–∞ –Ω–∞ LangGraph —Å –±—ã—Å—Ç—Ä–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π
"""
from typing import Dict, List, Optional, Any
from langgraph.graph import StateGraph, END
import asyncio
from concurrent.futures import ThreadPoolExecutor

from base import (
    ExamState, create_initial_exam_state, validate_exam_state, 
    update_exam_progress, should_continue_exam, calculate_exam_statistics
)
from question_agent import create_question_agent_langgraph
from evaluation_agent import create_evaluation_agent_langgraph
from diagnostic_agent import create_diagnostic_agent_langgraph
from theme_agent import create_theme_agent_langgraph
from topic_manager import TopicManager
from yagpt_llm import create_yandex_llm
from datetime import datetime
import uuid


class SharedLLMManager:
    """Singleton –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–±—â–∏–º —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–º LLM"""
    _instance = None
    _llm = None
    
    @classmethod
    def get_shared_llm(cls):
        """–ü–æ–ª—É—á–∞–µ—Ç –æ–±—â–∏–π —ç–∫–∑–µ–º–ø–ª—è—Ä YandexGPT LLM"""
        if cls._llm is None:
            print("üöÄ –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—â–µ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ YandexGPT...")
            cls._llm = create_yandex_llm()
            print("‚úÖ YandexGPT –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        return cls._llm
    
    @classmethod
    def reset_shared_llm(cls):
        """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –æ–±—â–∏–π —ç–∫–∑–µ–º–ø–ª—è—Ä (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)"""
        cls._llm = None


class OptimizedExamWorkflowLangGraph:
    """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π workflow —ç–∫–∑–∞–º–µ–Ω–∞ –Ω–∞ LangGraph —Å –±—ã—Å—Ç—Ä–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π"""
    
    def __init__(self, topic_info: Dict[str, Any] = None, max_questions: int = 5, use_theme_structure: bool = False):
        """
        –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è workflow —ç–∫–∑–∞–º–µ–Ω–∞
        
        Args:
            topic_info: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–º–µ —ç–∫–∑–∞–º–µ–Ω–∞ (–∏–∑ TopicManager)
            max_questions: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤
            use_theme_structure: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–∏ —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–æ —Ç–∞–∫—Å–æ–Ω–æ–º–∏–∏ –ë–ª—É–º–∞
        """
        print("üöÄ –ù–∞—á–∞–ª–æ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏...")
        start_time = datetime.now()
        
        # –ï—Å–ª–∏ —Ç–µ–º–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–º—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        if not topic_info:
            topic_manager = TopicManager()
            topic_info = topic_manager._get_default_topic()
        
        self.topic_info = topic_info
        self.subject = topic_info['subject']
        self.difficulty = topic_info['difficulty']
        self.max_questions = max_questions
        self.use_theme_structure = use_theme_structure
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è –∞–≥–µ–Ω—Ç–æ–≤
        topic_manager = TopicManager()
        self.topic_context = topic_manager.get_topic_context_for_prompts(topic_info)
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–∏–π —ç–∫–∑–µ–º–ø–ª—è—Ä LLM
        self.shared_llm = SharedLLMManager.get_shared_llm()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–æ–≤ —Å –ª–µ–Ω–∏–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–æ–π
        self._agents_initialized = False
        self._theme_agent = None
        self._question_agent = None
        self._evaluation_agent = None
        self._diagnostic_agent = None
        
        # –°–æ–∑–¥–∞–Ω–∏–µ workflow –≥—Ä–∞—Ñ–∞ (–ª–µ–≥–∫–æ–≤–µ—Å–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è)
        self.graph = self._create_exam_workflow_graph()
        self.app = self.graph.compile()
        
        # –ò—Å—Ç–æ—Ä–∏—è workflow
        self.workflow_history = []
        
        end_time = datetime.now()
        init_duration = (end_time - start_time).total_seconds()
        print(f"‚úÖ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ {init_duration:.2f} —Å–µ–∫—É–Ω–¥")
    
    def _initialize_agents_lazy(self):
        """–õ–µ–Ω–∏–≤–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–æ–≤ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –æ–±—Ä–∞—â–µ–Ω–∏–∏"""
        if self._agents_initialized:
            return
        
        print("üîß –õ–µ–Ω–∏–≤–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–æ–≤...")
        start_time = datetime.now()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–æ–≤ —Å –æ–±—â–∏–º LLM
        if self.use_theme_structure:
            self._theme_agent = create_theme_agent_langgraph(
                subject=self.subject,
                topic_context=self.topic_context
            )
            # –ó–∞–º–µ–Ω—è–µ–º LLM –Ω–∞ –æ–±—â–∏–π —ç–∫–∑–µ–º–ø–ª—è—Ä
            self._theme_agent.llm = self.shared_llm
        
        self._question_agent = create_question_agent_langgraph(
            subject=self.subject,
            difficulty=self.difficulty,
            topic_context=self.topic_context,
            theme_structure=None
        )
        # –ó–∞–º–µ–Ω—è–µ–º LLM –Ω–∞ –æ–±—â–∏–π —ç–∫–∑–µ–º–ø–ª—è—Ä
        self._question_agent.llm = self.shared_llm
        
        self._evaluation_agent = create_evaluation_agent_langgraph(
            subject=self.subject,
            topic_context=self.topic_context
        )
        # –ó–∞–º–µ–Ω—è–µ–º LLM –Ω–∞ –æ–±—â–∏–π —ç–∫–∑–µ–º–ø–ª—è—Ä
        self._evaluation_agent.llm = self.shared_llm
        
        self._diagnostic_agent = create_diagnostic_agent_langgraph(
            subject=self.subject,
            topic_context=self.topic_context
        )
        # –ó–∞–º–µ–Ω—è–µ–º LLM –Ω–∞ –æ–±—â–∏–π —ç–∫–∑–µ–º–ø–ª—è—Ä
        self._diagnostic_agent.llm = self.shared_llm
        
        self._agents_initialized = True
        
        end_time = datetime.now()
        agents_duration = (end_time - start_time).total_seconds()
        print(f"‚úÖ –ê–≥–µ–Ω—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –∑–∞ {agents_duration:.2f} —Å–µ–∫—É–Ω–¥")
    
    async def _initialize_agents_async(self):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–æ–≤ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç–∏"""
        if self._agents_initialized:
            return
        
        print("‚ö° –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–æ–≤...")
        start_time = datetime.now()
        
        # –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –∞–≥–µ–Ω—Ç–æ–≤
        def create_theme_agent():
            if self.use_theme_structure:
                agent = create_theme_agent_langgraph(
                    subject=self.subject,
                    topic_context=self.topic_context
                )
                # –ó–∞–º–µ–Ω—è–µ–º LLM –Ω–∞ –æ–±—â–∏–π —ç–∫–∑–µ–º–ø–ª—è—Ä
                agent.llm = self.shared_llm
                return agent
            return None
        
        def create_question_agent():
            agent = create_question_agent_langgraph(
                subject=self.subject,
                difficulty=self.difficulty,
                topic_context=self.topic_context,
                theme_structure=None
            )
            # –ó–∞–º–µ–Ω—è–µ–º LLM –Ω–∞ –æ–±—â–∏–π —ç–∫–∑–µ–º–ø–ª—è—Ä
            agent.llm = self.shared_llm
            return agent
        
        def create_evaluation_agent():
            agent = create_evaluation_agent_langgraph(
                subject=self.subject,
                topic_context=self.topic_context
            )
            # –ó–∞–º–µ–Ω—è–µ–º LLM –Ω–∞ –æ–±—â–∏–π —ç–∫–∑–µ–º–ø–ª—è—Ä
            agent.llm = self.shared_llm
            return agent
        
        def create_diagnostic_agent():
            agent = create_diagnostic_agent_langgraph(
                subject=self.subject,
                topic_context=self.topic_context
            )
            # –ó–∞–º–µ–Ω—è–µ–º LLM –Ω–∞ –æ–±—â–∏–π —ç–∫–∑–µ–º–ø–ª—è—Ä
            agent.llm = self.shared_llm
            return agent
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        with ThreadPoolExecutor(max_workers=4) as executor:
            future_theme = executor.submit(create_theme_agent)
            future_question = executor.submit(create_question_agent)
            future_evaluation = executor.submit(create_evaluation_agent)
            future_diagnostic = executor.submit(create_diagnostic_agent)
            
            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–¥–∞—á
            self._theme_agent = future_theme.result()
            self._question_agent = future_question.result()
            self._evaluation_agent = future_evaluation.result()
            self._diagnostic_agent = future_diagnostic.result()
        
        self._agents_initialized = True
        
        end_time = datetime.now()
        agents_duration = (end_time - start_time).total_seconds()
        print(f"‚úÖ –ê–≥–µ–Ω—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –∑–∞ {agents_duration:.2f} —Å–µ–∫—É–Ω–¥")
    
    # –°–≤–æ–π—Å—Ç–≤–∞ —Å –ª–µ–Ω–∏–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–æ–π
    @property
    def theme_agent(self):
        if not self._agents_initialized:
            self._initialize_agents_lazy()
        return self._theme_agent
    
    @property  
    def question_agent(self):
        if not self._agents_initialized:
            self._initialize_agents_lazy()
        return self._question_agent
    
    @property
    def evaluation_agent(self):
        if not self._agents_initialized:
            self._initialize_agents_lazy()
        return self._evaluation_agent
    
    @property
    def diagnostic_agent(self):
        if not self._agents_initialized:
            self._initialize_agents_lazy()
        return self._diagnostic_agent
    
    def force_initialize_agents(self):
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–æ–≤"""
        self._initialize_agents_lazy()
    
    async def async_initialize_agents(self):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–æ–≤"""
        await self._initialize_agents_async()
    
    def _create_exam_workflow_graph(self) -> StateGraph:
        """–°–æ–∑–¥–∞–µ—Ç –≥—Ä–∞—Ñ workflow —ç–∫–∑–∞–º–µ–Ω–∞ (–ª–µ–≥–∫–æ–≤–µ—Å–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è)"""
        graph = StateGraph(ExamState)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —É–∑–ª—ã workflow
        graph.add_node("initialize_exam", self._initialize_exam_node)
        graph.add_node("create_theme_structure", self._create_theme_structure_node)
        graph.add_node("start_exam", self._start_exam_node)
        graph.add_node("generate_question", self._generate_question_node)
        graph.add_node("wait_for_answer", self._wait_for_answer_node)
        graph.add_node("evaluate_answer", self._evaluate_answer_node)
        graph.add_node("update_progress", self._update_progress_node)
        graph.add_node("check_continuation", self._check_continuation_node)
        graph.add_node("complete_exam", self._complete_exam_node)
        graph.add_node("run_diagnostics", self._run_diagnostics_node)
        graph.add_node("finalize_results", self._finalize_results_node)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–æ—á–∫—É –≤—Ö–æ–¥–∞
        graph.set_entry_point("initialize_exam")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä–µ—Ö–æ–¥—ã
        graph.add_conditional_edges(
            "initialize_exam",
            self._should_create_theme_structure,
            {
                "create_theme": "create_theme_structure",
                "start_exam": "start_exam"
            }
        )
        
        graph.add_edge("create_theme_structure", "start_exam")
        graph.add_edge("start_exam", "generate_question")
        graph.add_edge("generate_question", "wait_for_answer")
        graph.add_edge("wait_for_answer", "evaluate_answer")
        graph.add_edge("evaluate_answer", "update_progress")
        
        graph.add_conditional_edges(
            "check_continuation",
            self._should_continue,
            {
                "continue": "generate_question",
                "complete": "complete_exam"
            }
        )
        
        graph.add_edge("update_progress", "check_continuation")
        graph.add_edge("complete_exam", "run_diagnostics")
        graph.add_edge("run_diagnostics", "finalize_results")
        graph.add_edge("finalize_results", END)
        
        return graph
    
    # –û—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –æ—Å—Ç–∞—é—Ç—Å—è —Ç–∞–∫–∏–º–∏ –∂–µ, –∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º workflow
    def _initialize_exam_node(self, state: ExamState) -> ExamState:
        """–£–∑–µ–ª –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —ç–∫–∑–∞–º–µ–Ω–∞"""
        state["status"] = "initialized"
        state["start_time"] = datetime.now()
        state["messages"].append("–≠–∫–∑–∞–º–µ–Ω –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        return state
    
    def _should_create_theme_structure(self, state: ExamState) -> str:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ —Å–æ–∑–¥–∞–≤–∞—Ç—å —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É"""
        return "create_theme" if state["use_theme_structure"] else "start_exam"
    
    def _create_theme_structure_node(self, state: ExamState) -> ExamState:
        """–£–∑–µ–ª —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã"""
        if self.theme_agent:
            try:
                theme_structure = self.theme_agent.generate_theme_structure(
                    total_questions=state["max_questions"],
                    difficulty=state["difficulty"]
                )
                if not theme_structure.get("error"):
                    state["theme_structure"] = theme_structure
                    state["messages"].append("–¢–µ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞")
                else:
                    state["errors"].append(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ–º—ã: {theme_structure['error']}")
            except Exception as e:
                state["errors"].append(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã: {str(e)}")
        
        return state
    
    def _start_exam_node(self, state: ExamState) -> ExamState:
        """–£–∑–µ–ª –∑–∞–ø—É—Å–∫–∞ —ç–∫–∑–∞–º–µ–Ω–∞"""
        state["status"] = "in_progress"
        state["messages"].append("–≠–∫–∑–∞–º–µ–Ω –Ω–∞—á–∞—Ç")
        return state
    
    def _generate_question_node(self, state: ExamState) -> ExamState:
        """–£–∑–µ–ª –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–∞"""
        # –ê–≥–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ —Å–≤–æ–π—Å—Ç–≤—É
        current_question_number = len(state["questions"]) + 1
        
        try:
            question_data = self.question_agent.generate_question(
                current_question_number,
                state["evaluation_summaries"]
            )
            
            if not question_data.get("error"):
                question_data["question_number"] = current_question_number
                question_data["timestamp"] = datetime.now()
                state["questions"].append(question_data)
                state["current_question_number"] = current_question_number
                state["messages"].append(f"–í–æ–ø—Ä–æ—Å {current_question_number} —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω")
            else:
                state["errors"].append(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–∞: {question_data['error']}")
                
        except Exception as e:
            state["errors"].append(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–∞: {str(e)}")
        
        return state
    
    def _wait_for_answer_node(self, state: ExamState) -> ExamState:
        """–£–∑–µ–ª –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ (–∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞)"""
        state["messages"].append("–û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ —Å—Ç—É–¥–µ–Ω—Ç–∞")
        return state
    
    def _evaluate_answer_node(self, state: ExamState) -> ExamState:
        """–£–∑–µ–ª –æ—Ü–µ–Ω–∫–∏ –æ—Ç–≤–µ—Ç–∞"""
        # –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –±—É–¥–µ—Ç –≤—ã–∑–≤–∞–Ω –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å—Ç—É–¥–µ–Ω—Ç–∞
        return state
    
    def _update_progress_node(self, state: ExamState) -> ExamState:
        """–£–∑–µ–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
        state = update_exam_progress(state)
        return state
    
    def _check_continuation_node(self, state: ExamState) -> ExamState:
        """–£–∑–µ–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —ç–∫–∑–∞–º–µ–Ω–∞"""
        return state
    
    def _should_continue(self, state: ExamState) -> str:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —Å–ª–µ–¥—É–µ—Ç –ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —ç–∫–∑–∞–º–µ–Ω"""
        return "continue" if should_continue_exam(state) else "complete"
    
    def _complete_exam_node(self, state: ExamState) -> ExamState:
        """–£–∑–µ–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —ç–∫–∑–∞–º–µ–Ω–∞"""
        state["status"] = "completed"
        state["end_time"] = datetime.now()
        state["messages"].append("–≠–∫–∑–∞–º–µ–Ω –∑–∞–≤–µ—Ä—à–µ–Ω")
        return state
    
    def _run_diagnostics_node(self, state: ExamState) -> ExamState:
        """–£–∑–µ–ª –∑–∞–ø—É—Å–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
        try:
            diagnostic_result = self.diagnostic_agent.run_diagnostics(
                state["questions"],
                state["evaluations"]
            )
            
            if not diagnostic_result.get("error"):
                state["diagnostic_result"] = diagnostic_result
                state["messages"].append("–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
            else:
                state["errors"].append(f"–û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: {diagnostic_result['error']}")
                
        except Exception as e:
            state["errors"].append(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: {str(e)}")
        
        return state
    
    def _finalize_results_node(self, state: ExamState) -> ExamState:
        """–£–∑–µ–ª —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        state["metadata"]["final_statistics"] = calculate_exam_statistics(state)
        state["messages"].append("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ñ–∏–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
        return state
    
    def get_performance_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        return {
            "agents_initialized": self._agents_initialized,
            "shared_llm_stats": {
                "request_count": self.shared_llm.request_count if self.shared_llm else 0,
                "total_tokens": self.shared_llm.total_tokens if self.shared_llm else 0,
                "last_request": self.shared_llm.last_request_time if self.shared_llm else None
            },
            "workflow_history_length": len(self.workflow_history)
        }


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ workflow
def create_optimized_exam_workflow(
    topic_info: Dict[str, Any] = None,
    max_questions: int = 5,
    use_theme_structure: bool = False
) -> OptimizedExamWorkflowLangGraph:
    """–°–æ–∑–¥–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ ExamWorkflow –Ω–∞ LangGraph"""
    return OptimizedExamWorkflowLangGraph(
        topic_info=topic_info,
        max_questions=max_questions,
        use_theme_structure=use_theme_structure
    )
