"""
–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è ExamOrchestrator - –µ–¥–∏–Ω–æ–π —Ç–æ—á–∫–∏ –≤—Ö–æ–¥–∞ –¥–ª—è —ç–∫–∑–∞–º–µ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
"""
from topic_manager import TopicManager
from question_agent import QuestionAgent
from evaluation_agent import EvaluationAgent
from diagnostic_agent import DiagnosticAgent
from exam_orchestrator import ExamOrchestrator
import time


def main_example():
    """–û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤"""
    print("=== –°–ò–°–¢–ï–ú–ê –≠–ö–ó–ê–ú–ò–ù–ò–†–û–í–ê–ù–ò–Ø –° 3 –°–ü–ï–¶–ò–ê–õ–ò–ó–ò–†–û–í–ê–ù–ù–´–ú–ò –ê–ì–ï–ù–¢–ê–ú–ò ===\n")
    
    # –í—ã–±–æ—Ä —Ç–µ–º—ã —ç–∫–∑–∞–º–µ–Ω–∞
    topic_manager = TopicManager()
    topic_info = topic_manager.get_topic_selection()
    
    print(f"\nüìö –í—ã–±—Ä–∞–Ω–Ω–∞—è —Ç–µ–º–∞: {topic_info['name']}")
    print(f"üéì –ü—Ä–µ–¥–º–µ—Ç: {topic_info['subject']}")
    print(f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {topic_info['description']}")
    print(f"‚öôÔ∏è  –°–ª–æ–∂–Ω–æ—Å—Ç—å: {topic_info['difficulty']}")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è –∞–≥–µ–Ω—Ç–æ–≤
    topic_context = topic_manager.get_topic_context_for_prompts(topic_info)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–æ–≤ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º —Ç–µ–º—ã
    question_agent = QuestionAgent(
        subject=topic_info['subject'], 
        difficulty=topic_info['difficulty'],
        topic_context=topic_context
    )
    evaluation_agent = EvaluationAgent(
        subject=topic_info['subject'],
        topic_context=topic_context
    )
    diagnostic_agent = DiagnosticAgent(
        subject=topic_info['subject'],
        topic_context=topic_context
    )
    
    print("\nü§ñ –ê–≥–µ–Ω—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã:")
    print("1. QuestionAgent - –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É–º–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ —Ç–µ–º–µ")
    print("2. EvaluationAgent - –¥–ª—è –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –æ—Ü–µ–Ω–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤")
    print("3. DiagnosticAgent - –¥–ª—è –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏\n")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ ExamOrchestrator –≤–º–µ—Å—Ç–æ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤
    orchestrator = ExamOrchestrator(
        topic_info=topic_info,
        max_questions=5,
        use_theme_structure=False  # –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º
    )
    
    print("\nüéº ExamOrchestrator —Å–æ–∑–¥–∞–Ω –∏ –∫–æ–æ—Ä–¥–∏–Ω–∏—Ä—É–µ—Ç:")
    print("ü§ñ QuestionAgent - –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤")
    print("üîç EvaluationAgent - –æ—Ü–µ–Ω–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤")
    print("üß† DiagnosticAgent - —Ñ–∏–Ω–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞\n")
    
    # –°–∏–º—É–ª—è—Ü–∏—è —ç–∫–∑–∞–º–µ–Ω–∞ —á–µ—Ä–µ–∑ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä
    simulate_orchestrated_exam(orchestrator, topic_info)


def simulate_orchestrated_exam(orchestrator: ExamOrchestrator, topic_info: dict):
    """–°–∏–º—É–ª—è—Ü–∏—è —ç–∫–∑–∞–º–µ–Ω–∞ —á–µ—Ä–µ–∑ ExamOrchestrator"""
    
    # –ü—Ä–∏–º–µ—Ä—ã –æ—Ç–≤–µ—Ç–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–º—ã
    if "python" in topic_info['name'].lower() or "—Ü–∏–∫–ª" in topic_info['name'].lower():
        sample_answers = [
            "–¶–∏–∫–ª for –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø–µ—Ä–µ–±–æ—Ä–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏, –∞ while –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–æ–∫–∞ —É—Å–ª–æ–≤–∏–µ –∏—Å—Ç–∏–Ω–Ω–æ. For —É–¥–æ–±–Ω–µ–µ –¥–ª—è –∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏—Ç–µ—Ä–∞—Ü–∏–π.",
            "Break –ø—Ä–µ—Ä—ã–≤–∞–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ü–∏–∫–ª–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é, –∞ continue –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç —Ç–µ–∫—É—â—É—é –∏—Ç–µ—Ä–∞—Ü–∏—é –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ —Å–ª–µ–¥—É—é—â–µ–π.",
            "numbers = [1, 2, 3, 4, 5]\nfor i in range(len(numbers)):\n    print(f'–≠–ª–µ–º–µ–Ω—Ç {i}: {numbers[i]}')",
            "List comprehension - —ç—Ç–æ —Å–ø–æ—Å–æ–± —Å–æ–∑–¥–∞–Ω–∏—è —Å–ø–∏—Å–∫–æ–≤ –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É. –ù–∞–ø—Ä–∏–º–µ—Ä: [x*2 for x in range(5)] —Å–æ–∑–¥–∞—Å—Ç [0, 2, 4, 6, 8]",
            "–í–ª–æ–∂–µ–Ω–Ω—ã–µ —Ü–∏–∫–ª—ã - —ç—Ç–æ —Ü–∏–∫–ª—ã –≤–Ω—É—Ç—Ä–∏ –¥—Ä—É–≥–∏—Ö —Ü–∏–∫–ª–æ–≤. –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–Ω–æ–≥–æ–º–µ—Ä–Ω—ã–º–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö, –Ω–∞–ø—Ä–∏–º–µ—Ä –º–∞—Ç—Ä–∏—Ü–∞–º–∏."
        ]
    elif "—Ñ–æ—Ç–æ—ç—Ñ—Ñ–µ–∫—Ç" in topic_info['name'].lower() or "—Ñ–∏–∑–∏–∫" in topic_info['subject'].lower():
        sample_answers = [
            "–§–æ—Ç–æ—ç—Ñ—Ñ–µ–∫—Ç - —ç—Ç–æ —è–≤–ª–µ–Ω–∏–µ –∏—Å–ø—É—Å–∫–∞–Ω–∏—è —ç–ª–µ–∫—Ç—Ä–æ–Ω–æ–≤ –≤–µ—â–µ—Å—Ç–≤–æ–º –ø–æ–¥ –¥–µ–π—Å—Ç–≤–∏–µ–º —Å–≤–µ—Ç–∞. –û—Ç–∫—Ä—ã—Ç –ì–µ—Ä—Ü–µ–º, –æ–±—ä—è—Å–Ω–µ–Ω –≠–π–Ω—à—Ç–µ–π–Ω–æ–º —á–µ—Ä–µ–∑ –∫–≤–∞–Ω—Ç–æ–≤—É—é –ø—Ä–∏—Ä–æ–¥—É —Å–≤–µ—Ç–∞.",
            "–£—Ä–∞–≤–Ω–µ–Ω–∏–µ –≠–π–Ω—à—Ç–µ–π–Ω–∞: E = hŒΩ = A + Ek, –≥–¥–µ hŒΩ - —ç–Ω–µ—Ä–≥–∏—è —Ñ–æ—Ç–æ–Ω–∞, A - —Ä–∞–±–æ—Ç–∞ –≤—ã—Ö–æ–¥–∞, Ek - –∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–∞—è —ç–Ω–µ—Ä–≥–∏—è —ç–ª–µ–∫—Ç—Ä–æ–Ω–∞.",
            "–ö—Ä–∞—Å–Ω–∞—è –≥—Ä–∞–Ω–∏—Ü–∞ - —ç—Ç–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —á–∞—Å—Ç–æ—Ç–∞ —Å–≤–µ—Ç–∞, –ø—Ä–∏ –∫–æ—Ç–æ—Ä–æ–π –µ—â–µ –≤–æ–∑–º–æ–∂–µ–Ω —Ñ–æ—Ç–æ—ç—Ñ—Ñ–µ–∫—Ç. –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è —Ä–∞–±–æ—Ç–æ–π –≤—ã—Ö–æ–¥–∞: ŒΩ‚ÇÄ = A/h",
            "–ó–∞–∫–æ–Ω—ã —Ñ–æ—Ç–æ—ç—Ñ—Ñ–µ–∫—Ç–∞: 1) –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–∫—Ç—Ä–æ–Ω–æ–≤ –ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç–∏ —Å–≤–µ—Ç–∞ 2) –ö–∏–Ω–µ—Ç–∏—á–µ—Å–∫–∞—è —ç–Ω–µ—Ä–≥–∏—è –Ω–µ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç–∏ 3) –ï—Å—Ç—å –∫—Ä–∞—Å–Ω–∞—è –≥—Ä–∞–Ω–∏—Ü–∞",
            "–ö–≤–∞–Ω—Ç–æ–≤–∞—è –ø—Ä–∏—Ä–æ–¥–∞ –ø—Ä–æ—è–≤–ª—è–µ—Ç—Å—è –≤ —Ç–æ–º, —á—Ç–æ —ç–ª–µ–∫—Ç—Ä–æ–Ω –ø–æ–≥–ª–æ—â–∞–µ—Ç —ç–Ω–µ—Ä–≥–∏—é —Ñ–æ—Ç–æ–Ω–∞ —Ü–µ–ª–∏–∫–æ–º, –∞ –Ω–µ –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ. –≠—Ç–æ –æ–±—ä—è—Å–Ω—è–µ—Ç –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å —ç–Ω–µ—Ä–≥–∏–∏ –æ—Ç –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç–∏."
        ]
    else:
        sample_answers = [
            "–≠—Ç–æ –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–∏–Ω—Ü–∏–ø –∏–ª–∏ –∫–æ–Ω—Ü–µ–ø—Ü–∏—è –≤ –¥–∞–Ω–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏, –∫–æ—Ç–æ—Ä—ã–π —Ç—Ä–µ–±—É–µ—Ç –ø–æ–Ω–∏–º–∞–Ω–∏—è —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω—ã—Ö –æ—Å–Ω–æ–≤.",
            "–ó–¥–µ—Å—å –≤–∞–∂–Ω–æ —É—á–∏—Ç—ã–≤–∞—Ç—å –≤–∑–∞–∏–º–æ—Å–≤—è–∑—å —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏ –∏—Ö –≤–ª–∏—è–Ω–∏–µ –Ω–∞ –æ–±—â—É—é —Å–∏—Å—Ç–µ–º—É.",
            "–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —ç—Ç–æ–≥–æ –ø—Ä–∏–Ω—Ü–∏–ø–∞ –º–æ–∂–Ω–æ —É–≤–∏–¥–µ—Ç—å –≤ —Ä–µ–∞–ª—å–Ω—ã—Ö –ø—Ä–∏–º–µ—Ä–∞—Ö –∏ –∑–∞–¥–∞—á–∞—Ö.",
            "–î–∞–Ω–Ω–∞—è –∫–æ–Ω—Ü–µ–ø—Ü–∏—è –∏–º–µ–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –∞—Å–ø–µ–∫—Ç–æ–≤, –∫–∞–∂–¥—ã–π –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö –≤–∞–∂–µ–Ω –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –ø–æ–Ω–∏–º–∞–Ω–∏—è.",
            "–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–æ–¥—Ö–æ–¥—ã –∫ —ç—Ç–æ–π –ø—Ä–æ–±–ª–µ–º–µ —É—á–∏—Ç—ã–≤–∞—é—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –≤ –¥–∞–Ω–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏."
        ]
    
    # –ó–∞–ø—É—Å–∫ —ç–∫–∑–∞–º–µ–Ω–∞
    print("üöÄ –ó–∞–ø—É—Å–∫–∞—é —ç–∫–∑–∞–º–µ–Ω —á–µ—Ä–µ–∑ ExamOrchestrator...")
    session_info = orchestrator.start_exam("–î–µ–º–æ-—Å—Ç—É–¥–µ–Ω—Ç")
    print(f"   –°–µ—Å—Å–∏—è: {session_info['session_id']}")
    
    # –ü—Ä–æ–≤–µ–¥–µ–Ω–∏–µ —ç–∫–∑–∞–º–µ–Ω–∞
    for i in range(orchestrator.max_questions):
        print(f"\n{'='*60}")
        print(f"–í–û–ü–†–û–° {i + 1} –ò–ó {orchestrator.max_questions}")
        print('='*60)
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞ –æ—Ç –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        question = orchestrator.get_next_question()
        
        if 'question' in question:
            print(f"\nüìù –í–û–ü–†–û–°: {question['question']}")
            print(f"üéØ –£—Ä–æ–≤–µ–Ω—å: {question.get('topic_level', '–±–∞–∑–æ–≤—ã–π')}")
            print(f"üîë –ö–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã: {question.get('key_points', '–ù–µ —É–∫–∞–∑–∞–Ω—ã')}")
            
            # –°–∏–º—É–ª—è—Ü–∏—è –æ—Ç–≤–µ—Ç–∞
            if i < len(sample_answers):
                answer = sample_answers[i]
            else:
                answer = "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –∑–Ω–∞—é –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å."
            
            print(f"\nüë§ –û–¢–í–ï–¢ –°–¢–£–î–ï–ù–¢–ê: {answer}")
            
            # –û—Ü–µ–Ω–∫–∞ —á–µ—Ä–µ–∑ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä
            print("\nüîç –û—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä –æ—Ü–µ–Ω–∏–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç...")
            evaluation = orchestrator.submit_answer(answer)
            
            print(f"üìä –û–¶–ï–ù–ö–ê: {evaluation.get('total_score', 0)}/10")
            
            if evaluation.get('strengths'):
                print(f"‚úÖ –°–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã: {evaluation['strengths']}")
            if evaluation.get('weaknesses'):
                print(f"‚ùå –°–ª–∞–±—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã: {evaluation['weaknesses']}")
            
            # –ü—Ä–æ–≥—Ä–µ—Å—Å
            progress = orchestrator.get_progress()
            print(f"\nüìä –ü–†–û–ì–†–ï–°–°: {progress['questions_answered']}/{progress['max_questions']} | {progress['current_score']}/{progress['max_possible_score']} –±–∞–ª–ª–æ–≤")
            
        else:
            print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞: {question.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
            break
        
        time.sleep(1)
    
    # –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç —á–µ—Ä–µ–∑ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä
    print(f"\n{'='*70}")
    print("üß† –û—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç...")
    print('='*70)
    
    final_report = orchestrator.get_final_report()
    if 'report' in final_report:
        print(final_report['report'])
    else:
        print("–û—Ç—á–µ—Ç –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
    
    return final_report


def simulate_specialized_exam(question_agent: QuestionAgent, evaluation_agent: EvaluationAgent, diagnostic_agent: DiagnosticAgent, topic_info: dict):
    """–°–∏–º—É–ª–∏—Ä—É–µ—Ç –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–µ —ç–∫–∑–∞–º–µ–Ω–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤"""
    
    # –ü—Ä–∏–º–µ—Ä—ã –æ—Ç–≤–µ—Ç–æ–≤ —Å—Ç—É–¥–µ–Ω—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–º—ã
    if "python" in topic_info['name'].lower() or "—Ü–∏–∫–ª" in topic_info['name'].lower():
        sample_answers = [
            "–¶–∏–∫–ª for –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø–µ—Ä–µ–±–æ—Ä–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏, –∞ while –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–æ–∫–∞ —É—Å–ª–æ–≤–∏–µ –∏—Å—Ç–∏–Ω–Ω–æ. For —É–¥–æ–±–Ω–µ–µ –¥–ª—è –∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏—Ç–µ—Ä–∞—Ü–∏–π.",
            
            "Break –ø—Ä–µ—Ä—ã–≤–∞–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ü–∏–∫–ª–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é, –∞ continue –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç —Ç–µ–∫—É—â—É—é –∏—Ç–µ—Ä–∞—Ü–∏—é –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ —Å–ª–µ–¥—É—é—â–µ–π.",
            
            "numbers = [1, 2, 3, 4, 5]\nfor i in range(len(numbers)):\n    print(f'–≠–ª–µ–º–µ–Ω—Ç {i}: {numbers[i]}')",
            
            "List comprehension - —ç—Ç–æ —Å–ø–æ—Å–æ–± —Å–æ–∑–¥–∞–Ω–∏—è —Å–ø–∏—Å–∫–æ–≤ –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É. –ù–∞–ø—Ä–∏–º–µ—Ä: [x*2 for x in range(5)] —Å–æ–∑–¥–∞—Å—Ç [0, 2, 4, 6, 8]",
            
            "–í–ª–æ–∂–µ–Ω–Ω—ã–µ —Ü–∏–∫–ª—ã - —ç—Ç–æ —Ü–∏–∫–ª—ã –≤–Ω—É—Ç—Ä–∏ –¥—Ä—É–≥–∏—Ö —Ü–∏–∫–ª–æ–≤. –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–Ω–æ–≥–æ–º–µ—Ä–Ω—ã–º–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö, –Ω–∞–ø—Ä–∏–º–µ—Ä –º–∞—Ç—Ä–∏—Ü–∞–º–∏."
        ]
    elif "—Ñ–æ—Ç–æ—ç—Ñ—Ñ–µ–∫—Ç" in topic_info['name'].lower() or "—Ñ–∏–∑–∏–∫" in topic_info['subject'].lower():
        sample_answers = [
            "–§–æ—Ç–æ—ç—Ñ—Ñ–µ–∫—Ç - —ç—Ç–æ —è–≤–ª–µ–Ω–∏–µ –∏—Å–ø—É—Å–∫–∞–Ω–∏—è —ç–ª–µ–∫—Ç—Ä–æ–Ω–æ–≤ –≤–µ—â–µ—Å—Ç–≤–æ–º –ø–æ–¥ –¥–µ–π—Å—Ç–≤–∏–µ–º —Å–≤–µ—Ç–∞. –û—Ç–∫—Ä—ã—Ç –ì–µ—Ä—Ü–µ–º, –æ–±—ä—è—Å–Ω–µ–Ω –≠–π–Ω—à—Ç–µ–π–Ω–æ–º —á–µ—Ä–µ–∑ –∫–≤–∞–Ω—Ç–æ–≤—É—é –ø—Ä–∏—Ä–æ–¥—É —Å–≤–µ—Ç–∞.",
            
            "–£—Ä–∞–≤–Ω–µ–Ω–∏–µ –≠–π–Ω—à—Ç–µ–π–Ω–∞: E = hŒΩ = A + Ek, –≥–¥–µ hŒΩ - —ç–Ω–µ—Ä–≥–∏—è —Ñ–æ—Ç–æ–Ω–∞, A - —Ä–∞–±–æ—Ç–∞ –≤—ã—Ö–æ–¥–∞, Ek - –∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–∞—è —ç–Ω–µ—Ä–≥–∏—è —ç–ª–µ–∫—Ç—Ä–æ–Ω–∞.",
            
            "–ö—Ä–∞—Å–Ω–∞—è –≥—Ä–∞–Ω–∏—Ü–∞ - —ç—Ç–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —á–∞—Å—Ç–æ—Ç–∞ —Å–≤–µ—Ç–∞, –ø—Ä–∏ –∫–æ—Ç–æ—Ä–æ–π –µ—â–µ –≤–æ–∑–º–æ–∂–µ–Ω —Ñ–æ—Ç–æ—ç—Ñ—Ñ–µ–∫—Ç. –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è —Ä–∞–±–æ—Ç–æ–π –≤—ã—Ö–æ–¥–∞: ŒΩ‚ÇÄ = A/h",
            
            "–ó–∞–∫–æ–Ω—ã —Ñ–æ—Ç–æ—ç—Ñ—Ñ–µ–∫—Ç–∞: 1) –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–∫—Ç—Ä–æ–Ω–æ–≤ –ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç–∏ —Å–≤–µ—Ç–∞ 2) –ö–∏–Ω–µ—Ç–∏—á–µ—Å–∫–∞—è —ç–Ω–µ—Ä–≥–∏—è –Ω–µ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç–∏ 3) –ï—Å—Ç—å –∫—Ä–∞—Å–Ω–∞—è –≥—Ä–∞–Ω–∏—Ü–∞",
            
            "–ö–≤–∞–Ω—Ç–æ–≤–∞—è –ø—Ä–∏—Ä–æ–¥–∞ –ø—Ä–æ—è–≤–ª—è–µ—Ç—Å—è –≤ —Ç–æ–º, —á—Ç–æ —ç–ª–µ–∫—Ç—Ä–æ–Ω –ø–æ–≥–ª–æ—â–∞–µ—Ç —ç–Ω–µ—Ä–≥–∏—é —Ñ–æ—Ç–æ–Ω–∞ —Ü–µ–ª–∏–∫–æ–º, –∞ –Ω–µ –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ. –≠—Ç–æ –æ–±—ä—è—Å–Ω—è–µ—Ç –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å —ç–Ω–µ—Ä–≥–∏–∏ –æ—Ç –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç–∏."
        ]
    else:
        sample_answers = [
            "–≠—Ç–æ –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–∏–Ω—Ü–∏–ø –∏–ª–∏ –∫–æ–Ω—Ü–µ–ø—Ü–∏—è –≤ –¥–∞–Ω–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏, –∫–æ—Ç–æ—Ä—ã–π —Ç—Ä–µ–±—É–µ—Ç –ø–æ–Ω–∏–º–∞–Ω–∏—è —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω—ã—Ö –æ—Å–Ω–æ–≤.",
        
            "–ó–¥–µ—Å—å –≤–∞–∂–Ω–æ —É—á–∏—Ç—ã–≤–∞—Ç—å –≤–∑–∞–∏–º–æ—Å–≤—è–∑—å —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏ –∏—Ö –≤–ª–∏—è–Ω–∏–µ –Ω–∞ –æ–±—â—É—é —Å–∏—Å—Ç–µ–º—É.",
        
            "–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —ç—Ç–æ–≥–æ –ø—Ä–∏–Ω—Ü–∏–ø–∞ –º–æ–∂–Ω–æ —É–≤–∏–¥–µ—Ç—å –≤ —Ä–µ–∞–ª—å–Ω—ã—Ö –ø—Ä–∏–º–µ—Ä–∞—Ö –∏ –∑–∞–¥–∞—á–∞—Ö.",
        
            "–î–∞–Ω–Ω–∞—è –∫–æ–Ω—Ü–µ–ø—Ü–∏—è –∏–º–µ–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –∞—Å–ø–µ–∫—Ç–æ–≤, –∫–∞–∂–¥—ã–π –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö –≤–∞–∂–µ–Ω –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –ø–æ–Ω–∏–º–∞–Ω–∏—è.",
        
            "–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–æ–¥—Ö–æ–¥—ã –∫ —ç—Ç–æ–π –ø—Ä–æ–±–ª–µ–º–µ —É—á–∏—Ç—ã–≤–∞—é—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –≤ –¥–∞–Ω–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏."
        ]
    
    questions = []
    evaluations = []
    max_questions = 5
    
    for question_count in range(max_questions):
        print(f"\n{'='*60}")
        print(f"–í–û–ü–†–û–° {question_count + 1}")
        print('='*60)
        
        # 1. QuestionAgent –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≤–æ–ø—Ä–æ—Å —Å —É—á–µ—Ç–æ–º –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤
        print("ü§ñ QuestionAgent –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–º–Ω—ã–π –≤–æ–ø—Ä–æ—Å...")
        previous_answers = [{'answer': eval_data.get('answer', ''), 'score': eval_data.get('total_score', 0), 'feedback': eval_data.get('detailed_feedback', '')} for eval_data in evaluations]
        
        question_data = question_agent.generate_question(question_count + 1, previous_answers)
        questions.append(question_data)
        
        print(f"\nüìù –í–û–ü–†–û–°: {question_data['question']}")
        print(f"üéØ –£—Ä–æ–≤–µ–Ω—å —Ç–µ–º—ã: {question_data['topic_level']}")
        print(f"üîë –ö–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã: {question_data['key_points']}")
        
        if question_data.get('reasoning'):
            print(f"üí≠ –û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ –≤—ã–±–æ—Ä–∞: {question_data['reasoning']}")
        
        # –°–∏–º—É–ª—è—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ —Å—Ç—É–¥–µ–Ω—Ç–∞
        if question_count < len(sample_answers):
            student_answer = sample_answers[question_count]
        else:
            student_answer = "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –∑–Ω–∞—é –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å."
        
        print(f"\nüë§ –û–¢–í–ï–¢ –°–¢–£–î–ï–ù–¢–ê: {student_answer}")
        
        # 2. EvaluationAgent –æ—Ü–µ–Ω–∏–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ
        print("\nüîç EvaluationAgent –ø—Ä–æ–≤–æ–¥–∏—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –æ—Ü–µ–Ω–∫—É...")
        evaluation_result = evaluation_agent.evaluate_answer(
            question=question_data['question'],
            student_answer=student_answer,
            key_points=question_data['key_points'],
            topic_level=question_data['topic_level'],
            detailed=True
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏
        evaluation_result['answer'] = student_answer
        evaluations.append(evaluation_result)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ü–µ–Ω–∫–∏
        print(f"\nüìä –û–¶–ï–ù–ö–ê: {evaluation_result['total_score']}/10")
        
        if evaluation_result['type'] == 'detailed':
            print(f"üìà –û—Ü–µ–Ω–∫–∏ –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º:")
            for criterion, score in evaluation_result['criteria_scores'].items():
                print(f"   ‚Ä¢ {criterion}: {score}/10")
            
            print(f"\n‚úÖ –°–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã: {evaluation_result['strengths']}")
            print(f"‚ùå –°–ª–∞–±—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã: {evaluation_result['weaknesses']}")
        else:
            print(f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {evaluation_result.get('comment', '')}")
        
        # –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å
        total_score = sum(eval_data['total_score'] for eval_data in evaluations)
        max_score = len(evaluations) * 10
        print(f"\nüìä –ü–†–û–ì–†–ï–°–°: {len(evaluations)}/{max_questions} –≤–æ–ø—Ä–æ—Å–æ–≤ | {total_score}/{max_score} –±–∞–ª–ª–æ–≤")
        
        # –ü–∞—É–∑–∞ –¥–ª—è –Ω–∞–≥–ª—è–¥–Ω–æ—Å—Ç–∏
        time.sleep(1)
    
    # 3. DiagnosticAgent –ø—Ä–æ–≤–æ–¥–∏—Ç —Ñ–∏–Ω–∞–ª—å–Ω—É—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É
    print(f"\n{'='*70}")
    print("üß† DiagnosticAgent –ü–†–û–í–û–î–ò–¢ –ö–û–ú–ü–õ–ï–ö–°–ù–£–Æ –î–ò–ê–ì–ù–û–°–¢–ò–ö–£")
    print('='*70)
    
    diagnostic_result = diagnostic_agent.diagnose_exam_results(questions, evaluations)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
    print(f"\nüìã –ò–¢–û–ì–û–í–ê–Ø –û–¶–ï–ù–ö–ê: {diagnostic_result['grade_info']['grade'].upper()}")
    print(f"üìä –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç–∏: {diagnostic_result['grade_info']['percentage']}%")
    print(f"üéØ –ë–∞–ª–ª—ã: {diagnostic_result['grade_info']['points']}")
    print(f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {diagnostic_result['grade_info']['description']}")
    
    print(f"\nüîç –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –û–ë–õ–ê–°–¢–ò:")
    for area in diagnostic_result['critical_areas']:
        print(f"   ‚ö†Ô∏è  {area}")
    
    print(f"\nüí° –û–°–ù–û–í–ù–´–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
    for i, recommendation in enumerate(diagnostic_result['recommendations'][:5], 1):
        print(f"   {i}. {recommendation}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç
    print(f"\n{'='*70}")
    print("üìÑ –ü–û–õ–ù–´–ô –î–ò–ê–ì–ù–û–°–¢–ò–ß–ï–°–ö–ò–ô –û–¢–ß–ï–¢")
    print('='*70)
    print(diagnostic_result['final_report'])
    
    # –î–æ—Ä–æ–∂–Ω–∞—è –∫–∞—Ä—Ç–∞ –æ–±—É—á–µ–Ω–∏—è
    roadmap = diagnostic_agent.generate_learning_roadmap(diagnostic_result)
    print(f"\n{'='*70}")
    print("üó∫Ô∏è  –î–û–†–û–ñ–ù–ê–Ø –ö–ê–†–¢–ê –û–ë–£–ß–ï–ù–ò–Ø")
    print('='*70)
    
    print("üö® –ù–ï–ú–ï–î–õ–ï–ù–ù–´–ï –î–ï–ô–°–¢–í–ò–Ø:")
    for action in roadmap['immediate_actions']:
        print(f"   ‚Ä¢ {action}")
    
    print("\nüìÖ –ö–†–ê–¢–ö–û–°–†–û–ß–ù–´–ï –¶–ï–õ–ò:")
    for goal in roadmap['short_term_goals']:
        print(f"   ‚Ä¢ {goal}")
    
    if roadmap['medium_term_goals']:
        print("\nüìÜ –°–†–ï–î–ù–ï–°–†–û–ß–ù–´–ï –¶–ï–õ–ò:")
        for goal in roadmap['medium_term_goals']:
            print(f"   ‚Ä¢ {goal}")
    
    if roadmap['long_term_goals']:
        print("\nüéØ –î–û–õ–ì–û–°–†–û–ß–ù–´–ï –¶–ï–õ–ò:")
        for goal in roadmap['long_term_goals']:
            print(f"   ‚Ä¢ {goal}")
    
    return diagnostic_result


def interactive_exam():
    """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º —ç–∫–∑–∞–º–µ–Ω–∞ —á–µ—Ä–µ–∑ ExamOrchestrator"""
    print("=== –ò–ù–¢–ï–†–ê–ö–¢–ò–í–ù–´–ô –≠–ö–ó–ê–ú–ï–ù –ß–ï–†–ï–ó EXAMORCHESTRATOR ===\n")
    
    # –í—ã–±–æ—Ä —Ç–µ–º—ã —ç–∫–∑–∞–º–µ–Ω–∞
    topic_manager = TopicManager()
    topic_info = topic_manager.get_topic_selection()
    
    print(f"\nüìö –í—ã–±—Ä–∞–Ω–Ω–∞—è —Ç–µ–º–∞: {topic_info['name']}")
    print(f"üéì –ü—Ä–µ–¥–º–µ—Ç: {topic_info['subject']}")
    print(f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {topic_info['description']}")
    print(f"‚öôÔ∏è  –°–ª–æ–∂–Ω–æ—Å—Ç—å: {topic_info['difficulty']}")
    
    if topic_info.get('key_concepts'):
        print(f"üîë –ö–ª—é—á–µ–≤—ã–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏: {', '.join(topic_info['key_concepts'][:3])}...")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ ExamOrchestrator
    orchestrator = ExamOrchestrator(
        topic_info=topic_info,
        max_questions=5,
        use_theme_structure=False
    )
    
    print(f"\nüöÄ –ù–∞—á–∏–Ω–∞–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —ç–∫–∑–∞–º–µ–Ω –ø–æ —Ç–µ–º–µ '{topic_info['name']}'")
    print("üéº –û—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä –∫–æ–æ—Ä–¥–∏–Ω–∏—Ä—É–µ—Ç –≤—Å–µ –∞—Å–ø–µ–∫—Ç—ã —ç–∫–∑–∞–º–µ–Ω–∞!")
    print("‚ùå –î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —ç–∫–∑–∞–º–µ–Ω–∞ –≤–≤–µ–¥–∏—Ç–µ 'exit'\n")
    
    # –ó–∞–ø—É—Å–∫ —ç–∫–∑–∞–º–µ–Ω–∞
    session_info = orchestrator.start_exam("–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Å—Ç—É–¥–µ–Ω—Ç")
    print(f"üéØ –°–µ—Å—Å–∏—è —ç–∫–∑–∞–º–µ–Ω–∞: {session_info['session_id']}")
    
    question_count = 0
    
    while orchestrator.can_continue():
        question_count += 1
        print(f"\n{'='*50}")
        print(f"–í–û–ü–†–û–° {question_count} –∏–∑ {orchestrator.max_questions}")
        print('='*50)
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞ –æ—Ç –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        print("üéº –û—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å...")
        
        question = orchestrator.get_next_question()
        
        if 'question' not in question:
            print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞: {question.get('message', '–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å')}")
            break
        
        print(f"\nüìù –í–û–ü–†–û–°: {question['question']}")
        print(f"üéØ –£—Ä–æ–≤–µ–Ω—å: {question.get('topic_level', '–±–∞–∑–æ–≤—ã–π')}")
        
        if question.get('reasoning'):
            print(f"üí≠ –ü–æ—á–µ–º—É —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å: {question['reasoning']}")
        if question.get('key_points'):
            print(f"üîë –ö–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã: {question['key_points']}")
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        answer = input("\nüë§ –í–∞—à –æ—Ç–≤–µ—Ç: ").strip()
        
        if answer.lower() == 'exit':
            print("–≠–∫–∑–∞–º–µ–Ω –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
            break
        
        if not answer:
            answer = "–û—Ç–≤–µ—Ç –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω"
        
        # –û—Ü–µ–Ω–∫–∞ –æ—Ç–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä
        print("\nüéº –û—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä –æ—Ü–µ–Ω–∏–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç...")
        evaluation = orchestrator.submit_answer(answer)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        print(f"\nüìä –í–ê–®–ê –û–¶–ï–ù–ö–ê: {evaluation.get('total_score', 0)}/10")
        
        if evaluation.get('criteria_scores'):
            print(f"\nüìà –û—Ü–µ–Ω–∫–∏ –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º:")
            criteria_names = {
                'correctness': '–ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å',
                'completeness': '–ü–æ–ª–Ω–æ—Ç–∞',
                'understanding': '–ü–æ–Ω–∏–º–∞–Ω–∏–µ'
            }
            for criterion, score in evaluation['criteria_scores'].items():
                name = criteria_names.get(criterion, criterion)
                print(f"   ‚Ä¢ {name}: {score}/10")
            
        if evaluation.get('strengths'):
            print(f"\n‚úÖ –°–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã: {evaluation['strengths']}")
        if evaluation.get('weaknesses'):
            print(f"‚ùå –°–ª–∞–±—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã: {evaluation['weaknesses']}")
        
        # –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –æ—Ç –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        progress = orchestrator.get_progress()
        print(f"\nüìä –û–ë–©–ò–ô –ü–†–û–ì–†–ï–°–°: {progress['current_score']}/{progress['max_possible_score']} –±–∞–ª–ª–æ–≤ ({progress['percentage']:.1f}%)")
        
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å
        if orchestrator.can_continue():
            continue_choice = input(f"\n–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —ç–∫–∑–∞–º–µ–Ω? (–¥–∞/–Ω–µ—Ç, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é '–¥–∞'): ").strip().lower()
            if continue_choice in ['–Ω–µ—Ç', 'no', 'n', '–Ω']:
                orchestrator.force_complete()
                break
    
    # –§–∏–Ω–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —á–µ—Ä–µ–∑ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä
    progress = orchestrator.get_progress()
    if progress['questions_answered'] > 0:
        print(f"\n{'='*60}")
        print("üéº –û—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç...")
        print('='*60)
        
        final_report = orchestrator.get_final_report()
        
        if 'error' not in final_report:
            print(f"\nüéì –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢:")
            if 'report' in final_report:
                report_lines = final_report['report'].split('\n')[:10]  # –ü–µ—Ä–≤—ã–µ 10 —Å—Ç—Ä–æ–∫
                for line in report_lines:
                    if line.strip():
                        print(f"   {line}")
                if len(final_report['report'].split('\n')) > 10:
                    print("   ... (–ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∑–∞–ø—Ä–æ—Å—É)")
            
            # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç
            full_report_choice = input(f"\n–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç? (–¥–∞/–Ω–µ—Ç): ").strip().lower()
            if full_report_choice in ['–¥–∞', 'yes', 'y', '–¥'] and 'report' in final_report:
                print(f"\n{'='*70}")
                print("üìÑ –ü–û–õ–ù–´–ô –û–¢–ß–ï–¢ –û–¢ EXAMORCHESTRATOR")
                print('='*70)
                print(final_report['report'])
        else:
            print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {final_report.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
    
    else:
        print("\n–≠–∫–∑–∞–º–µ–Ω –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω. –î–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç—á–µ—Ç–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ.")


def demo_individual_agents():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã –∫–∞–∂–¥–æ–≥–æ –∞–≥–µ–Ω—Ç–∞ –ø–æ –æ—Ç–¥–µ–ª—å–Ω–æ—Å—Ç–∏"""
    print("=== –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –†–ê–ë–û–¢–´ –û–¢–î–ï–õ–¨–ù–´–• –ê–ì–ï–ù–¢–û–í ===\n")
    
    # –í—ã–±–æ—Ä —Ç–µ–º—ã –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    topic_manager = TopicManager()
    print("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∞–≥–µ–Ω—Ç–æ–≤:")
    topic_info = topic_manager.get_topic_selection()
    
    topic_context = topic_manager.get_topic_context_for_prompts(topic_info)
    
    print(f"\nüìö –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ–¥–µ–Ω–∞ –ø–æ —Ç–µ–º–µ: {topic_info['name']}\n")
    
    # 1. QuestionAgent
    print("ü§ñ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø QuestionAgent")
    print("-" * 40)
    question_agent = QuestionAgent(
        subject=topic_info['subject'], 
        difficulty=topic_info['difficulty'],
        topic_context=topic_context
    )
    
    # –ü–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å
    print("–ì–µ–Ω–µ—Ä–∏—Ä—É—é –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å –ø–æ —Ç–µ–º–µ...")
    q1 = question_agent.generate_question(1)
    print(f"–í–æ–ø—Ä–æ—Å 1: {q1['question']}")
    print(f"–£—Ä–æ–≤–µ–Ω—å: {q1['topic_level']}")
    print(f"–ö–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã: {q1['key_points']}")
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º —Å–ª–∞–±—ã–π –æ—Ç–≤–µ—Ç
    weak_answers = [{'answer': '–ù–µ –∑–Ω–∞—é', 'score': 3, 'feedback': '–°–ª–∞–±–æ–µ –ø–æ–Ω–∏–º–∞–Ω–∏–µ —Ç–µ–º—ã'}]
    print(f"\n–ì–µ–Ω–µ—Ä–∏—Ä—É—é –≤—Ç–æ—Ä–æ–π –≤–æ–ø—Ä–æ—Å —Å —É—á–µ—Ç–æ–º —Å–ª–∞–±–æ–≥–æ –ø–µ—Ä–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞...")
    q2 = question_agent.generate_question(2, weak_answers)
    print(f"–í–æ–ø—Ä–æ—Å 2: {q2['question']}")
    print(f"–û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ: {q2.get('reasoning', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}")
    
    # 2. EvaluationAgent
    print(f"\nüîç –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø EvaluationAgent")
    print("-" * 40)
    evaluation_agent = EvaluationAgent(
        subject=topic_info['subject'],
        topic_context=topic_context
    )
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–æ–ø—Ä–æ—Å –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ç–µ–º–µ
    if "python" in topic_info['name'].lower():
        sample_question = "–û–±—ä—è—Å–Ω–∏—Ç–µ —Ä–∞–∑–Ω–∏—Ü—É –º–µ–∂–¥—É —Ü–∏–∫–ª–∞–º–∏ for –∏ while –≤ Python"
        sample_answer = "–¶–∏–∫–ª for –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –∏—Ç–µ—Ä–∞—Ü–∏–∏ –ø–æ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤, –∞ while –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–æ–∫–∞ —É—Å–ª–æ–≤–∏–µ –∏—Å—Ç–∏–Ω–Ω–æ. For —É–¥–æ–±–Ω–µ–µ –∫–æ–≥–¥–∞ –∑–Ω–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Ç–µ—Ä–∞—Ü–∏–π."
        key_points = "–∏—Ç–µ—Ä–∞—Ü–∏—è –ø–æ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏, —É—Å–ª–æ–≤–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ range, –∫–æ–Ω—Ç—Ä–æ–ª—å –∏—Ç–µ—Ä–∞—Ü–∏–π"
    elif "—Ñ–æ—Ç–æ—ç—Ñ—Ñ–µ–∫—Ç" in topic_info['name'].lower():
        sample_question = "–°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π—Ç–µ —É—Ä–∞–≤–Ω–µ–Ω–∏–µ –≠–π–Ω—à—Ç–µ–π–Ω–∞ –¥–ª—è —Ñ–æ—Ç–æ—ç—Ñ—Ñ–µ–∫—Ç–∞"
        sample_answer = "–£—Ä–∞–≤–Ω–µ–Ω–∏–µ –≠–π–Ω—à—Ç–µ–π–Ω–∞: E = hŒΩ = A + Ek, –≥–¥–µ E - —ç–Ω–µ—Ä–≥–∏—è —Ñ–æ—Ç–æ–Ω–∞, A - —Ä–∞–±–æ—Ç–∞ –≤—ã—Ö–æ–¥–∞, Ek - –∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–∞—è —ç–Ω–µ—Ä–≥–∏—è —Ñ–æ—Ç–æ—ç–ª–µ–∫—Ç—Ä–æ–Ω–∞."
        key_points = "—ç–Ω–µ—Ä–≥–∏—è —Ñ–æ—Ç–æ–Ω–∞, —Ä–∞–±–æ—Ç–∞ –≤—ã—Ö–æ–¥–∞, –∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–∞—è —ç–Ω–µ—Ä–≥–∏—è, –∫–≤–∞–Ω—Ç–æ–≤–∞—è –ø—Ä–∏—Ä–æ–¥–∞ —Å–≤–µ—Ç–∞"
    else:
        sample_question = q1['question']
        sample_answer = "–≠—Ç–æ —Å–ª–æ–∂–Ω–∞—è —Ç–µ–º–∞, —Ç—Ä–µ–±—É—é—â–∞—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∏–∑—É—á–µ–Ω–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø—Ä–∏–Ω—Ü–∏–ø–æ–≤ –∏ –∏—Ö –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è."
        key_points = q1['key_points']
    
    print(f"–û—Ü–µ–Ω–∏–≤–∞—é –æ—Ç–≤–µ—Ç: '{sample_answer[:50]}...'")
    evaluation = evaluation_agent.evaluate_answer(sample_question, sample_answer, key_points, "–±–∞–∑–æ–≤—ã–π")
    
    print(f"–ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞: {evaluation['total_score']}/10")
    if evaluation['type'] == 'detailed':
        print("–û—Ü–µ–Ω–∫–∏ –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º:")
        for criterion, score in evaluation['criteria_scores'].items():
            print(f"  ‚Ä¢ {criterion}: {score}/10")
    
    # 3. DiagnosticAgent
    print(f"\nüß† –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø DiagnosticAgent")
    print("-" * 40)
    diagnostic_agent = DiagnosticAgent(
        subject=topic_info['subject'],
        topic_context=topic_context
    )
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —ç–∫–∑–∞–º–µ–Ω–∞ –ø–æ —Ç–µ–º–µ
    mock_questions = [q1, q2]
    mock_evaluations = [
        {'total_score': 8, 'type': 'detailed', 'criteria_scores': {'correctness': 8, 'completeness': 7}, 'answer': '–•–æ—Ä–æ—à–∏–π –æ—Ç–≤–µ—Ç'},
        {'total_score': 6, 'type': 'detailed', 'criteria_scores': {'correctness': 6, 'completeness': 5}, 'answer': '–ß–∞—Å—Ç–∏—á–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç'}
    ]
    
    print("–ü—Ä–æ–≤–æ–∂—É –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ —Ç–µ–º–µ...")
    diagnosis = diagnostic_agent.diagnose_exam_results(mock_questions, mock_evaluations)
    
    print(f"–ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞: {diagnosis['grade_info']['grade']}")
    print(f"–ü—Ä–æ—Ü–µ–Ω—Ç: {diagnosis['grade_info']['percentage']}%")
    print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ–±–ª–∞—Å—Ç–∏: {', '.join(diagnosis['critical_areas'][:2])}")
    
    print("\n‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print(f"–í—Å–µ –∞–≥–µ–Ω—Ç—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–µ–º–æ–π: {topic_info['name']}")


def demo_individual_agents():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã ExamOrchestrator –≤ —Ä–∞–∑–Ω—ã—Ö —Ä–µ–∂–∏–º–∞—Ö"""
    print("=== –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø EXAMORCHESTRATOR –í –†–ê–ó–ù–´–• –†–ï–ñ–ò–ú–ê–• ===\n")
    
    # –í—ã–±–æ—Ä —Ç–µ–º—ã –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    topic_manager = TopicManager()
    print("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏:")
    topic_info = topic_manager.get_topic_selection()
    
    print(f"\nüìö –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ–¥–µ–Ω–∞ –ø–æ —Ç–µ–º–µ: {topic_info['name']}\n")
    
    # 1. –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º ExamOrchestrator
    print("üéº –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø 1: –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º ExamOrchestrator")
    print("-" * 60)
    
    orchestrator1 = ExamOrchestrator(
        topic_info=topic_info,
        max_questions=3,
        use_theme_structure=False
    )
    
    session1 = orchestrator1.start_exam("–î–µ–º–æ-—Å—Ç—É–¥–µ–Ω—Ç 1")
    print(f"–°–µ—Å—Å–∏—è: {session1['session_id']}")
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏ –æ—Ü–µ–Ω–∏–≤–∞–µ–º –æ–¥–∏–Ω –≤–æ–ø—Ä–æ—Å
    q1 = orchestrator1.get_next_question()
    if 'question' in q1:
        print(f"–í–æ–ø—Ä–æ—Å: {q1['question']}")
        print(f"–£—Ä–æ–≤–µ–Ω—å: {q1.get('topic_level', '–±–∞–∑–æ–≤—ã–π')}")
        
        # –°–∏–º—É–ª—è—Ü–∏—è –æ—Ç–≤–µ—Ç–∞
        demo_answer = "–≠—Ç–æ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ü–µ–ø—Ç –≤ –¥–∞–Ω–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏, –∫–æ—Ç–æ—Ä—ã–π —Ç—Ä–µ–±—É–µ—Ç –ø–æ–Ω–∏–º–∞–Ω–∏—è."
        print(f"–û—Ç–≤–µ—Ç: {demo_answer}")
        
        evaluation = orchestrator1.submit_answer(demo_answer)
        print(f"–û—Ü–µ–Ω–∫–∞: {evaluation.get('total_score', 0)}/10")
    
    # 2. –¢–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º
    print(f"\nüß† –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø 2: –¢–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º (–ë–ª—É–º)")
    print("-" * 60)
    
    orchestrator2 = ExamOrchestrator(
        topic_info=topic_info,
        max_questions=3,
        use_theme_structure=True
    )
    
    theme_info = orchestrator2.get_theme_structure_info()
    print(f"–¢–µ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞: {theme_info.get('total_questions', 0)} –≤–æ–ø—Ä–æ—Å–æ–≤")
    
    if theme_info.get('questions_distribution'):
        bloom_names = {
            'remember': '–ó–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ', 'understand': '–ü–æ–Ω–∏–º–∞–Ω–∏–µ', 
            'apply': '–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ', 'analyze': '–ê–Ω–∞–ª–∏–∑'
        }
        print("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —É—Ä–æ–≤–Ω—è–º –ë–ª—É–º–∞:")
        for level, count in theme_info['questions_distribution'].items():
            name = bloom_names.get(level, level)
            print(f"  ‚Ä¢ {name}: {count} –≤–æ–ø—Ä–æ—Å–æ–≤")
    
    # 3. –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–µ–∂–∏–º–æ–≤
    print(f"\nüîÑ –°–†–ê–í–ù–ï–ù–ò–ï –†–ï–ñ–ò–ú–û–í:")
    print("üéº –û–±—ã—á–Ω—ã–π ExamOrchestrator: –≥–∏–±–∫–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤")
    print("üß† –¢–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π: —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –ø–æ –ë–ª—É–º—É")
    print("‚úÖ –û–±–∞ —Ä–µ–∂–∏–º–∞ –∏—Å–ø–æ–ª—å–∑—É—é—Ç –µ–¥–∏–Ω—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É ExamOrchestrator")
    
    print(f"\n‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print(f"ExamOrchestrator –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—é –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–æ–≤ –≤ –æ–±–æ–∏—Ö —Ä–µ–∂–∏–º–∞—Ö!")


def quick_topic_demo():
    """–ë—ã—Å—Ç—Ä–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≥–æ—Ç–æ–≤—ã—Ö —Ç–µ–º"""
    print("=== –ë–´–°–¢–†–ê–Ø –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ì–û–¢–û–í–´–• –¢–ï–ú ===\n")
    
    topic_manager = TopicManager()
    topics = topic_manager.get_predefined_topics()
    
    print("üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ –≥–æ—Ç–æ–≤—ã–µ —Ç–µ–º—ã:")
    for i, (key, topic) in enumerate(topics.items(), 1):
        print(f"{i}. {topic['name']} ({topic['subject']})")
        print(f"   üìù {topic['description']}")
        print(f"   üîë –ö–ª—é—á–µ–≤—ã–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏: {', '.join(topic['key_concepts'][:3])}...")
        print()
    
    print("üí° –ö–∞–∂–¥–∞—è —Ç–µ–º–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç:")
    print("   ‚Ä¢ –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ —Ç–µ–º–µ")
    print("   ‚Ä¢ –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—É—é –æ—Ü–µ–Ω–∫—É –æ—Ç–≤–µ—Ç–æ–≤")
    print("   ‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
    print()
    
    choice = input("–•–æ—Ç–∏—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —ç–∫–∑–∞–º–µ–Ω –ø–æ –æ–¥–Ω–æ–π –∏–∑ —Ç–µ–º? (–¥–∞/–Ω–µ—Ç): ").strip().lower()
    if choice in ['–¥–∞', 'yes', 'y', '–¥']:
        interactive_exam()


def theme_structure_demo():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —ç–∫–∑–∞–º–µ–Ω–∞ —Å —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π"""
    print("=== –≠–ö–ó–ê–ú–ï–ù –° –¢–ï–ú–ê–¢–ò–ß–ï–°–ö–û–ô –°–¢–†–£–ö–¢–£–†–û–ô ===\n")
    
    # –í—ã–±–æ—Ä —Ç–µ–º—ã
    topic_manager = TopicManager()
    topic_info = topic_manager.get_topic_selection()
    
    print(f"\nüìö –°–æ–∑–¥–∞—é —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è —Ç–µ–º—ã: {topic_info['name']}")
    print("üîÑ ThemeAgent —Å–æ–∑–¥–∞–µ—Ç —Ä—É–∫–æ–≤–æ–¥—è—â–∏–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã, QuestionAgent –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≤–æ–ø—Ä–æ—Å—ã")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
    orchestrator = ExamOrchestrator(
        topic_info=topic_info,
        max_questions=8,
        use_theme_structure=True
    )
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ
    theme_info = orchestrator.get_theme_structure_info()
    print(f"\nüìä –¢–ï–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –°–¢–†–£–ö–¢–£–†–ê:")
    print(f"   üìù –í—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {theme_info['total_questions']}")
    print(f"   ‚è±Ô∏è  –í—Ä–µ–º—è —ç–∫–∑–∞–º–µ–Ω–∞: {theme_info['estimated_duration']} –º–∏–Ω—É—Ç")
    print(f"   üß† ID —Å—Ç—Ä—É–∫—Ç—É—Ä—ã: {theme_info['curriculum_id']}")
    
    print(f"\nüìã –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —É—Ä–æ–≤–Ω—è–º –ë–ª—É–º–∞:")
    distribution = theme_info['questions_distribution']
    bloom_names = {
        'remember': '–ó–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ', 'understand': '–ü–æ–Ω–∏–º–∞–Ω–∏–µ', 'apply': '–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ',
        'analyze': '–ê–Ω–∞–ª–∏–∑', 'evaluate': '–û—Ü–µ–Ω–∏–≤–∞–Ω–∏–µ', 'create': '–°–æ–∑–¥–∞–Ω–∏–µ'
    }
    
    for level, count in distribution.items():
        name = bloom_names.get(level, level)
        print(f"   üîπ {name}: {count} –≤–æ–ø—Ä–æ—Å–æ–≤")
    
    print(f"\nüí° –†–£–ö–û–í–û–î–Ø–©–ò–ï –ü–†–ò–ù–¶–ò–ü–´:")
    guidelines = theme_info.get('question_guidelines', {})
    for level, guideline_info in guidelines.items():
        level_name = guideline_info.get('level_name', level)
        print(f"   üìñ {level_name}: –ø—Ä–∏–Ω—Ü–∏–ø—ã —Å–æ–∑–¥–∞–Ω—ã –¥–ª—è {guideline_info.get('question_count', 0)} –≤–æ–ø—Ä–æ—Å–æ–≤")
    
    # –ó–∞–ø—É—Å–∫ —ç–∫–∑–∞–º–µ–Ω–∞
    print(f"\nüöÄ –ó–∞–ø—É—Å–∫–∞—é —ç–∫–∑–∞–º–µ–Ω...")
    session_info = orchestrator.start_exam("–°—Ç—É–¥–µ–Ω—Ç –ø–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ")
    print(f"   –°–µ—Å—Å–∏—è: {session_info['session_id']}")
    
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
    for i in range(min(4, theme_info['total_questions'])):
        print(f"\n{'='*50}")
        print(f"–í–û–ü–†–û–° {i+1} (–°–ì–ï–ù–ï–†–ò–†–û–í–ê–ù QuestionAgent –ü–û –ü–†–ò–ù–¶–ò–ü–ê–ú ThemeAgent)")
        print('='*50)
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞
        question = orchestrator.get_next_question()
        
        if 'question' in question:
            bloom_level = question.get('bloom_level', 'unknown')
            bloom_name = bloom_names.get(bloom_level, bloom_level)
            
            print(f"üß† –£—Ä–æ–≤–µ–Ω—å –ë–ª—É–º–∞: {bloom_name} ({bloom_level})")
            print(f"üìä –£—Ä–æ–≤–µ–Ω—å —Ç–µ–º—ã: {question.get('topic_level', '–±–∞–∑–æ–≤—ã–π')}")
            print(f"‚ùì –í–æ–ø—Ä–æ—Å: {question['question']}")
            
            # –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
            if 'thematic_direction' in question:
                print(f"üéØ –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {question['thematic_direction'][:100]}...")
            
            # –ü–æ–∫–∞–∑–∞—Ç—å –∞–¥–∞–ø—Ç–∞—Ü–∏—é
            if 'adaptation_notes' in question:
                print(f"üîß –ê–¥–∞–ø—Ç–∞—Ü–∏—è: {question['adaptation_notes'][:100]}...")
            
            # –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞—â–∏—Ç—É –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏
            if question.get('privacy_protected'):
                print(f"üõ°Ô∏è –ü—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å: –∑–∞—â–∏—â–µ–Ω–∞ (QuestionAgent –Ω–µ –≤–∏–¥–µ–ª —Ç–µ–∫—Å—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤)")
                print(f"üìä –î–∞–Ω–Ω—ã–µ: {question.get('evaluation_summaries_count', 0)} —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –æ—Ü–µ–Ω–æ–∫")
            
            # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
            demo_answers = {
                'remember': "–≠—Ç–æ –±–∞–∑–æ–≤–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏–ª–∏ —Ñ–∞–∫—Ç –ø–æ —Ç–µ–º–µ",
                'understand': "–≠—Ç–æ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏ —Å –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ–Ω–∏–º–∞–Ω–∏—è", 
                'apply': "–≠—Ç–æ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∑–Ω–∞–Ω–∏–π –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏",
                'analyze': "–≠—Ç–æ –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –∏ —Å–≤—è–∑–µ–π",
                'evaluate': "–≠—Ç–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—Ü–µ–Ω–∫–∞ —Å –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ–º –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤",
                'create': "–≠—Ç–æ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è –∏–ª–∏ —Å–∏–Ω—Ç–µ–∑ –∏–¥–µ–π"
            }
            
            demo_answer = demo_answers.get(bloom_level, "–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç —Å—Ç—É–¥–µ–Ω—Ç–∞")
            print(f"\nüë§ –î–ï–ú–û-–û–¢–í–ï–¢: {demo_answer}")
            
            # –û—Ü–µ–Ω–∫–∞
            evaluation = orchestrator.submit_answer(demo_answer)
            print(f"üìä –û–¶–ï–ù–ö–ê: {evaluation.get('total_score', 0)}/10")
            
            # –ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ
            progress = orchestrator.get_theme_progress_detailed()
            print(f"\nüìà –ü—Ä–æ–≥—Ä–µ—Å—Å: {progress['progress_percentage']:.1f}%")
            print(f"üéØ –¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å: {bloom_names.get(progress['current_bloom_level'], '–∑–∞–≤–µ—Ä—à–µ–Ω–æ')}")
            
        else:
            print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞: {question.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print(f"\n{'='*60}")
    print("üìÑ –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –ü–û –¢–ï–ú–ê–¢–ò–ß–ï–°–ö–û–ô –°–¢–†–£–ö–¢–£–†–ï")
    print('='*60)
    
    theme_report = orchestrator.get_theme_summary_report()
    print(theme_report)
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
    validation = orchestrator.validate_theme_structure()
    if not validation.get('error'):
        print(f"\n‚úÖ –í–ê–õ–ò–î–ê–¶–ò–Ø –°–¢–†–£–ö–¢–£–†–´:")
        print(f"   –í–∞–ª–∏–¥–Ω–∞: {'–î–∞' if validation['is_valid'] else '–ù–µ—Ç'}")
        if validation['warnings']:
            print(f"   ‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: {len(validation['warnings'])}")
        if validation['recommendations']:
            print(f"   üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: {len(validation['recommendations'])}")
    
    print(f"\nüîÑ –ê–†–•–ò–¢–ï–ö–¢–£–†–ê:")
    print("   1. ThemeAgent —Å–æ–∑–¥–∞–ª —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∏ –ø—Ä–∏–Ω—Ü–∏–ø—ã")
    print("   2. QuestionAgent —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª –≤–æ–ø—Ä–æ—Å—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–∏–Ω—Ü–∏–ø–æ–≤")
    print("   3. –ö–∞–∂–¥—ã–π –≤–æ–ø—Ä–æ—Å —É–Ω–∏–∫–∞–ª–µ–Ω –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º —Å—Ç—Ä—É–∫—Ç—É—Ä—ã")
    
    print(f"\nüõ°Ô∏è –ü–†–ò–í–ê–¢–ù–û–°–¢–¨:")
    print("   ‚úÖ QuestionAgent –ù–ï –≤–∏–¥–∏—Ç —Ç–µ–∫—Å—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ —Å—Ç—É–¥–µ–Ω—Ç–∞")
    print("   ‚úÖ –ü–µ—Ä–µ–¥–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –æ—Ü–µ–Ω–æ–∫ –æ—Ç EvaluationAgent")
    print("   ‚úÖ –ê–¥–∞–ø—Ç–∞—Ü–∏—è –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–µ—Ç—Ä–∏–∫, –∞ –Ω–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è")
    print("   ‚úÖ –ü–æ–ª–Ω–∞—è –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–æ–≤ —Å—Ç—É–¥–µ–Ω—Ç–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è")


if __name__ == "__main__":
    print("üéì –°–ò–°–¢–ï–ú–ê –≠–ö–ó–ê–ú–ï–ù–ò–†–û–í–ê–ù–ò–Ø –° –¢–ï–ú–ê–¢–ò–ß–ï–°–ö–û–ô –°–¢–†–£–ö–¢–£–†–û–ô")
    print("=" * 55)
    print("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º:")
    print("1. –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —ç–∫–∑–∞–º–µ–Ω (—Å –≤—ã–±–æ—Ä–æ–º —Ç–µ–º—ã)")
    print("2. –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —ç–∫–∑–∞–º–µ–Ω")
    print("3. –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤")
    print("4. –û–±–∑–æ—Ä –≥–æ—Ç–æ–≤—ã—Ö —Ç–µ–º")
    print("5. üß† –≠–ö–ó–ê–ú–ï–ù –° –¢–ï–ú–ê–¢–ò–ß–ï–°–ö–û–ô –°–¢–†–£–ö–¢–£–†–û–ô (ThemeAgent + QuestionAgent)")
    
    choice = input("\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä (1-5): ").strip()
    
    if choice == "2":
        interactive_exam()
    elif choice == "3":
        demo_individual_agents()
    elif choice == "4":
        quick_topic_demo()
    elif choice == "5":
        theme_structure_demo()
    else:
        main_example()
