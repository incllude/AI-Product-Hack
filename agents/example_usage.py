"""
–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã —ç–∫–∑–∞–º–µ–Ω–∞—Ü–∏–æ–Ω–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤ –Ω–∞ LangGraph
–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
"""
import sys
import os
import time
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from exam_orchestrator import create_exam_orchestrator_langgraph as create_exam_orchestrator
from exam_workflow import create_exam_workflow as create_exam_workflow
from question_agent import create_question_agent as create_question_agent
from evaluation_agent import create_evaluation_agent as create_evaluation_agent
from diagnostic_agent import create_diagnostic_agent as create_diagnostic_agent
from theme_agent import create_theme_agent as create_theme_agent
from yagpt_llm import validate_yandex_config
from base import create_initial_exam_state, ExamSession
from topic_manager import TopicManager


def main_example():
    """–û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è LangGraph —Å–∏—Å—Ç–µ–º—ã"""
    print("=== –°–ò–°–¢–ï–ú–ê –≠–ö–ó–ê–ú–ï–ù–ò–†–û–í–ê–ù–ò–Ø –ù–ê LANGGRAPH ===\n")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é YandexGPT
    config = validate_yandex_config()
    if not config['is_valid']:
        print("‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: YandexGPT –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!")
        print(f"   –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: {config.get('missing_vars', [])}")
        print("   –°–∏—Å—Ç–µ–º–∞ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –≤ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ.\n")
    else:
        print("‚úÖ YandexGPT –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ\n")
    
    # –í—ã–±–æ—Ä —Ç–µ–º—ã —ç–∫–∑–∞–º–µ–Ω–∞
    topic_manager = TopicManager()
    topic_info = topic_manager.get_topic_selection()
    
    print(f"\nüìö –í—ã–±—Ä–∞–Ω–Ω–∞—è —Ç–µ–º–∞: {topic_info['name']}")
    print(f"üéì –ü—Ä–µ–¥–º–µ—Ç: {topic_info['subject']}")
    print(f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {topic_info['description']}")
    print(f"‚öôÔ∏è  –°–ª–æ–∂–Ω–æ—Å—Ç—å: {topic_info['difficulty']}")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ LangGraph –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    print("\nüöÄ –°–æ–∑–¥–∞–Ω–∏–µ LangGraph –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞...")
    orchestrator = create_exam_orchestrator(
        topic_info=topic_info,
        max_questions=5,
        use_theme_structure=True  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    )
    
    print("\nüéØ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—é —ç–∫–∑–∞–º–µ–Ω–∞\n")
    
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —ç–∫–∑–∞–º–µ–Ω–∞
    simulate_langgraph_exam(orchestrator, topic_info, config['is_valid'])


def simulate_langgraph_exam(orchestrator, topic_info: dict, use_real_llm: bool = True):
    """–°–∏–º—É–ª—è—Ü–∏—è —ç–∫–∑–∞–º–µ–Ω–∞ —á–µ—Ä–µ–∑ LangGraph –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä"""
    
    # –ü—Ä–∏–º–µ—Ä—ã –æ—Ç–≤–µ—Ç–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–º—ã
    if "python" in topic_info['name'].lower() or "—Ü–∏–∫–ª" in topic_info['name'].lower():
        sample_answers = [
            "–¶–∏–∫–ª for –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø–µ—Ä–µ–±–æ—Ä–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏, –∞ while –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–æ–∫–∞ —É—Å–ª–æ–≤–∏–µ –∏—Å—Ç–∏–Ω–Ω–æ. For —É–¥–æ–±–Ω–µ–µ –¥–ª—è –∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏—Ç–µ—Ä–∞—Ü–∏–π.",
            "Break –ø—Ä–µ—Ä—ã–≤–∞–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ü–∏–∫–ª–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é, –∞ continue –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç —Ç–µ–∫—É—â—É—é –∏—Ç–µ—Ä–∞—Ü–∏—é –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ —Å–ª–µ–¥—É—é—â–µ–π.",
            "numbers = [1, 2, 3, 4, 5]\nfor i in range(len(numbers)):\n    print(f'–≠–ª–µ–º–µ–Ω—Ç {i}: {numbers[i]}')",
            "List comprehension - —ç—Ç–æ —Å–ø–æ—Å–æ–± —Å–æ–∑–¥–∞–Ω–∏—è —Å–ø–∏—Å–∫–æ–≤ –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É. –ù–∞–ø—Ä–∏–º–µ—Ä: [x*2 for x in range(5)] —Å–æ–∑–¥–∞—Å—Ç [0, 2, 4, 6, 8]",
            "–í–ª–æ–∂–µ–Ω–Ω—ã–µ —Ü–∏–∫–ª—ã - —ç—Ç–æ —Ü–∏–∫–ª—ã –≤–Ω—É—Ç—Ä–∏ –¥—Ä—É–≥–∏—Ö —Ü–∏–∫–ª–æ–≤. –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–Ω–æ–≥–æ–º–µ—Ä–Ω—ã–º–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö, –Ω–∞–ø—Ä–∏–º–µ—Ä –º–∞—Ç—Ä–∏—Ü–∞–º–∏."
        ]
    elif "—Ñ–æ—Ç–æ—ç—Ñ—Ñ–µ–∫—Ç" in topic_info['name'].lower() or "—Ñ–∏–∑–∏–∫" in topic_info['subject'].lower():
        sample_answers = [
            "–§–æ—Ç–æ—ç—Ñ—Ñ–µ–∫—Ç - —ç—Ç–æ —è–≤–ª–µ–Ω–∏–µ –∏—Å–ø—É—Å–∫–∞–Ω–∏—è —ç–ª–µ–∫—Ç—Ä–æ–Ω–æ–≤ –≤–µ—â–µ—Å—Ç–≤–æ–º –ø–æ–¥ –¥–µ–π—Å—Ç–≤–∏–µ–º —Å–≤–µ—Ç–∞. –û—Ç–∫—Ä—ã—Ç –ì–µ—Ä—Ü–µ–º, –æ–±—ä—è—Å–Ω–µ–Ω –≠–π–Ω—à—Ç–µ–π–Ω–æ–º —á–µ—Ä–µ–∑ –∫–≤–∞–Ω—Ç–æ–≤—É—é –ø—Ä–∏—Ä–æ–¥—É —Å–≤–µ—Ç–∞.",
            "–£—Ä–∞–≤–Ω–µ–Ω–∏–µ –≠–π–Ω—à—Ç–µ–π–Ω–∞: E = hŒΩ = A + Ek, –≥–¥–µ hŒΩ - —ç–Ω–µ—Ä–≥–∏—è —Ñ–æ—Ç–æ–Ω–∞, A - —Ä–∞–±–æ—Ç–∞ –≤—ã—Ö–æ–¥–∞, Ek - –∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–∞—è —ç–Ω–µ—Ä–≥–∏—è —ç–ª–µ–∫—Ç—Ä–æ–Ω–∞.",
            "–ö—Ä–∞—Å–Ω–∞—è –≥—Ä–∞–Ω–∏—Ü–∞ - —ç—Ç–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —á–∞—Å—Ç–æ—Ç–∞ —Å–≤–µ—Ç–∞, –ø—Ä–∏ –∫–æ—Ç–æ—Ä–æ–π –µ—â–µ –≤–æ–∑–º–æ–∂–µ–Ω —Ñ–æ—Ç–æ—ç—Ñ—Ñ–µ–∫—Ç. –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è —Ä–∞–±–æ—Ç–æ–π –≤—ã—Ö–æ–¥–∞: ŒΩ‚ÇÄ = A/h",
            "–ó–∞–∫–æ–Ω—ã —Ñ–æ—Ç–æ—ç—Ñ—Ñ–µ–∫—Ç–∞: 1) –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–∫—Ç—Ä–æ–Ω–æ–≤ –ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç–∏ —Å–≤–µ—Ç–∞ 2) –ö–∏–Ω–µ—Ç–∏—á–µ—Å–∫–∞—è —ç–Ω–µ—Ä–≥–∏—è –Ω–µ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç–∏ 3) –ï—Å—Ç—å –∫—Ä–∞—Å–Ω–∞—è –≥—Ä–∞–Ω–∏—Ü–∞",
            "–ö–≤–∞–Ω—Ç–æ–≤–∞—è –ø—Ä–∏—Ä–æ–¥–∞ –ø—Ä–æ—è–≤–ª—è–µ—Ç—Å—è –≤ —Ç–æ–º, —á—Ç–æ —ç–ª–µ–∫—Ç—Ä–æ–Ω –ø–æ–≥–ª–æ—â–∞–µ—Ç —ç–Ω–µ—Ä–≥–∏—é —Ñ–æ—Ç–æ–Ω–∞ —Ü–µ–ª–∏–∫–æ–º, –∞ –Ω–µ –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ. –≠—Ç–æ –æ–±—ä—è—Å–Ω—è–µ—Ç –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å —ç–Ω–µ—Ä–≥–∏–∏ –æ—Ç –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç–∏."
        ]
    else:
        sample_answers = [
            "–≠—Ç–æ –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–∏–Ω—Ü–∏–ø –∏–ª–∏ –∫–æ–Ω—Ü–µ–ø—Ü–∏—è –≤ –¥–∞–Ω–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏, –∫–æ—Ç–æ—Ä—ã–π —Ç—Ä–µ–±—É–µ—Ç –ø–æ–Ω–∏–º–∞–Ω–∏—è —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω—ã—Ö –æ—Å–Ω–æ–≤.",
            "–ó–¥–µ—Å—å –≤–∞–∂–Ω–æ —É—á–∏—Ç—ã–≤–∞—Ç—å –≤–∑–∞–∏–º–æ—Å–≤—è–∑—å —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏ –∏—Ö –≤–ª–∏—è–Ω–∏–µ –Ω–∞ –æ–±—â—É—é —Å–∏—Å—Ç–µ–º—É.",
            "–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —ç—Ç–æ–≥–æ –ø—Ä–∏–Ω—Ü–∏–ø–∞ –º–æ–∂–Ω–æ —É–≤–∏–¥–µ—Ç—å –≤ —Ä–µ–∞–ª—å–Ω—ã—Ö –ø—Ä–∏–º–µ—Ä–∞—Ö –∏ –∑–∞–¥–∞—á–∞—Ö.",
            "–î–∞–Ω–Ω–∞—è –∫–æ–Ω—Ü–µ–ø—Ü–∏—è –∏–º–µ–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –∞—Å–ø–µ–∫—Ç–æ–≤, –∫–∞–∂–¥—ã–π –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö –≤–∞–∂–µ–Ω –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –ø–æ–Ω–∏–º–∞–Ω–∏—è.",
            "–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–æ–¥—Ö–æ–¥—ã –∫ —ç—Ç–æ–π –ø—Ä–æ–±–ª–µ–º–µ —É—á–∏—Ç—ã–≤–∞—é—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –≤ –¥–∞–Ω–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏."
        ]
    
    # –ó–∞–ø—É—Å–∫ —ç–∫–∑–∞–º–µ–Ω–∞
    print("üöÄ –ó–∞–ø—É—Å–∫–∞—é —ç–∫–∑–∞–º–µ–Ω —á–µ—Ä–µ–∑ LangGraph –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä...")
    session_info = orchestrator.start_exam("LangGraph –î–µ–º–æ-—Å—Ç—É–¥–µ–Ω—Ç")
    print(f"   –°–µ—Å—Å–∏—è: {session_info['session_id']}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ
    if session_info.get('use_theme_structure'):
        theme_info = orchestrator.get_theme_structure_info()
        if not theme_info.get('error'):
            print(f"\nüß† –¢–ï–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –°–¢–†–£–ö–¢–£–†–ê –°–û–ó–î–ê–ù–ê:")
            print(f"   üìä –í—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {theme_info['total_questions']}")
            print(f"   ‚è±Ô∏è  –í—Ä–µ–º—è —ç–∫–∑–∞–º–µ–Ω–∞: {theme_info['estimated_duration']} –º–∏–Ω—É—Ç")
            
            distribution = theme_info.get('questions_distribution', {})
            bloom_names = {
                'remember': '–ó–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ', 'understand': '–ü–æ–Ω–∏–º–∞–Ω–∏–µ', 'apply': '–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ',
                'analyze': '–ê–Ω–∞–ª–∏–∑', 'evaluate': '–û—Ü–µ–Ω–∏–≤–∞–Ω–∏–µ', 'create': '–°–æ–∑–¥–∞–Ω–∏–µ'
            }
            
            print(f"   üìã –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —É—Ä–æ–≤–Ω—è–º –ë–ª—É–º–∞:")
            for level, count in distribution.items():
                name = bloom_names.get(level, level)
                print(f"      üîπ {name}: {count} –≤–æ–ø—Ä–æ—Å–æ–≤")
    
    # –ü—Ä–æ–≤–µ–¥–µ–Ω–∏–µ —ç–∫–∑–∞–º–µ–Ω–∞
    for i in range(orchestrator.max_questions):
        print(f"\n{'='*70}")
        print(f"–í–û–ü–†–û–° {i + 1} –ò–ó {orchestrator.max_questions}")
        print('='*70)
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞
        print("üîÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–æ–ø—Ä–æ—Å–∞...")
        question = orchestrator.get_next_question()
        
        if question.get('error'):
            print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–∞: {question['error']}")
            break
        
        if 'question' in question:
            print(f"\nüìù –í–û–ü–†–û–°: {question['question']}")
            print(f"üéØ –£—Ä–æ–≤–µ–Ω—å —Ç–µ–º—ã: {question.get('topic_level', '–±–∞–∑–æ–≤—ã–π')}")
            print(f"üîë –ö–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã: {question.get('key_points', '–ù–µ —É–∫–∞–∑–∞–Ω—ã')}")
            
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ë–ª—É–º–µ (–µ—Å–ª–∏ –µ—Å—Ç—å)
            if question.get('bloom_level'):
                bloom_names = {
                    'remember': '–ó–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ', 'understand': '–ü–æ–Ω–∏–º–∞–Ω–∏–µ', 'apply': '–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ',
                    'analyze': '–ê–Ω–∞–ª–∏–∑', 'evaluate': '–û—Ü–µ–Ω–∏–≤–∞–Ω–∏–µ', 'create': '–°–æ–∑–¥–∞–Ω–∏–µ'
                }
                bloom_name = bloom_names.get(question['bloom_level'], question['bloom_level'])
                print(f"üß† –£—Ä–æ–≤–µ–Ω—å –ë–ª—É–º–∞: {bloom_name} ({question['bloom_level']})")
                
                if question.get('thematic_direction'):
                    print(f"üéØ –¢–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {question['thematic_direction'][:100]}...")
                
                if question.get('adaptation_notes'):
                    print(f"üîß –ê–¥–∞–ø—Ç–∞—Ü–∏—è –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞: {question['adaptation_notes'][:100]}...")
            
            # –°–∏–º—É–ª—è—Ü–∏—è –æ—Ç–≤–µ—Ç–∞
            if i < len(sample_answers):
                answer = sample_answers[i]
            else:
                answer = "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –∑–Ω–∞—é –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å."
            
            print(f"\nüë§ –û–¢–í–ï–¢ –°–¢–£–î–ï–ù–¢–ê: {answer}")
            
            # –û—Ü–µ–Ω–∫–∞ –æ—Ç–≤–µ—Ç–∞
            print("\nüîÑ –û—Ü–µ–Ω–∫–∞ –æ—Ç–≤–µ—Ç–∞...")
            if not use_real_llm:
                print("   (–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ä–µ–∂–∏–º)")
            
            evaluation = orchestrator.submit_answer(answer)
            
            if evaluation.get('error'):
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ü–µ–Ω–∫–∏: {evaluation['error']}")
                continue
            
            print(f"üìä –û–¶–ï–ù–ö–ê: {evaluation.get('total_score', 0)}/10")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –æ—Ü–µ–Ω–∫—É
            if evaluation.get('criteria_scores'):
                print(f"üìà –û—Ü–µ–Ω–∫–∏ –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º:")
                criteria_names = {
                    'correctness': '–ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å',
                    'completeness': '–ü–æ–ª–Ω–æ—Ç–∞',
                    'understanding': '–ü–æ–Ω–∏–º–∞–Ω–∏–µ'
                }
                for criterion, score in evaluation['criteria_scores'].items():
                    name = criteria_names.get(criterion, criterion)
                    print(f"   ‚Ä¢ {name}: {score}/10")
            
            if evaluation.get('strengths'):
                print(f"‚úÖ –°–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã: {evaluation['strengths']}")
            if evaluation.get('weaknesses'):
                print(f"‚ùå –°–ª–∞–±—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã: {evaluation['weaknesses']}")
            
            
            # –ü—Ä–æ–≥—Ä–µ—Å—Å —á–µ—Ä–µ–∑ LangGraph
            progress = orchestrator.get_progress()
            print(f"\nüìä –ü–†–û–ì–†–ï–°–°: {progress['questions_answered']}/{progress['max_questions']} | {progress['current_score']}/{progress['max_possible_score']} –±–∞–ª–ª–æ–≤")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ
            if progress.get('theme_progress'):
                theme_progress = progress['theme_progress']
                print(f"üß† –ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –ë–ª—É–º—É: {theme_progress.get('progress_percentage', 0):.1f}%")
                current_level = theme_progress.get('current_bloom_level', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                if current_level != 'completed':
                    bloom_names = {
                        'remember': '–ó–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ', 'understand': '–ü–æ–Ω–∏–º–∞–Ω–∏–µ', 'apply': '–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ',
                        'analyze': '–ê–Ω–∞–ª–∏–∑', 'evaluate': '–û—Ü–µ–Ω–∏–≤–∞–Ω–∏–µ', 'create': '–°–æ–∑–¥–∞–Ω–∏–µ'
                    }
                    level_name = bloom_names.get(current_level, current_level)
                    print(f"üéØ –¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å: {level_name}")
        else:
            print(f"‚ö†Ô∏è  –ü—Ä–æ–±–ª–µ–º–∞: {question.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
            break
        
        if use_real_llm:
            time.sleep(1)  # –ü–∞—É–∑–∞ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Ä–µ–∞–ª—å–Ω—ã—Ö –≤—ã–∑–æ–≤–∞—Ö
    
    # –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
    print(f"\n{'='*50}")
    print("üìã –†–ï–ó–£–õ–¨–¢–ê–¢–´ –≠–ö–ó–ê–ú–ï–ù–ê")
    print('='*50)
    
    diagnostic_result = orchestrator.complete_exam()
    
    if diagnostic_result.get('error'):
        print(f"‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: {diagnostic_result['error']}")
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã LangGraph –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
    print(f"\nüìã –ò–¢–û–ì–û–í–ê–Ø –û–¶–ï–ù–ö–ê: {diagnostic_result['grade_info']['grade'].upper()}")
    print(f"üìä –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç–∏: {diagnostic_result['grade_info']['percentage']}%")
    print(f"üéØ –ë–∞–ª–ª—ã: {diagnostic_result['grade_info']['points']}")
    print(f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {diagnostic_result['grade_info']['description']}")
    
    print(f"\nüîç –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –û–ë–õ–ê–°–¢–ò:")
    for area in diagnostic_result['critical_areas']:
        print(f"   ‚ö†Ô∏è  {area}")
    
    print(f"\nüí° –û–°–ù–û–í–ù–´–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
    for i, recommendation in enumerate(diagnostic_result['recommendations'][:5], 1):
        print(f"   {i}. {recommendation}")
    
    print(f"\n‚úÖ –≠–∫–∑–∞–º–µ–Ω —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!")
    
    return diagnostic_result


def interactive_langgraph_exam():
    """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º —ç–∫–∑–∞–º–µ–Ω–∞ —á–µ—Ä–µ–∑ LangGraph –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä"""
    print("=== –ò–ù–¢–ï–†–ê–ö–¢–ò–í–ù–´–ô –≠–ö–ó–ê–ú–ï–ù –ù–ê LANGGRAPH ===\n")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config = validate_yandex_config()
    if not config['is_valid']:
        print("‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: YandexGPT –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!")
        print("   –°–∏—Å—Ç–µ–º–∞ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –≤ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ.\n")
    
    # –í—ã–±–æ—Ä —Ç–µ–º—ã —ç–∫–∑–∞–º–µ–Ω–∞
    topic_manager = TopicManager()
    topic_info = topic_manager.get_topic_selection()
    
    print(f"\nüìö –í—ã–±—Ä–∞–Ω–Ω–∞—è —Ç–µ–º–∞: {topic_info['name']}")
    print(f"üéì –ü—Ä–µ–¥–º–µ—Ç: {topic_info['subject']}")
    print(f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {topic_info['description']}")
    print(f"‚öôÔ∏è  –°–ª–æ–∂–Ω–æ—Å—Ç—å: {topic_info['difficulty']}")
    
    # –í—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞ —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
    print(f"\nüß† –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É (–¢–∞–∫—Å–æ–Ω–æ–º–∏—è –ë–ª—É–º–∞)?")
    print("   –≠—Ç–æ —Å–æ–∑–¥–∞—Å—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–æ–ø—Ä–æ—Å–æ–≤")
    print("   —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∞–¥–∞–ø—Ç–∞—Ü–∏–µ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏")
    use_theme = input("–î–∞/–Ω–µ—Ç (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é '–¥–∞'): ").strip().lower()
    use_theme_structure = use_theme not in ['–Ω–µ—Ç', 'no', 'n', '–Ω']
    
    # –°–æ–∑–¥–∞–Ω–∏–µ LangGraph –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    print(f"\nüöÄ –°–æ–∑–¥–∞–Ω–∏–µ LangGraph –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞...")
    orchestrator = create_exam_orchestrator(
        topic_info=topic_info,
        max_questions=5,
        use_theme_structure=use_theme_structure
    )
    
    print(f"\nüéØ –≠–∫–∑–∞–º–µ–Ω –≥–æ—Ç–æ–≤:")
    print(f"   üß† –¢–µ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞: {'–≤–∫–ª—é—á–µ–Ω–∞' if use_theme_structure else '–≤—ã–∫–ª—é—á–µ–Ω–∞'}")
    print("‚ùå –î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —ç–∫–∑–∞–º–µ–Ω–∞ –≤–≤–µ–¥–∏—Ç–µ 'exit'\n")
    
    # –ó–∞–ø—É—Å–∫ —ç–∫–∑–∞–º–µ–Ω–∞
    session_info = orchestrator.start_exam("–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Å—Ç—É–¥–µ–Ω—Ç")
    print(f"üéØ –°–µ—Å—Å–∏—è —ç–∫–∑–∞–º–µ–Ω–∞: {session_info['session_id']}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ
    if use_theme_structure:
        theme_info = orchestrator.get_theme_structure_info()
        if not theme_info.get('error'):
            print(f"\nüß† –¢–ï–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –°–¢–†–£–ö–¢–£–†–ê:")
            distribution = theme_info.get('questions_distribution', {})
            bloom_names = {
                'remember': '–ó–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ', 'understand': '–ü–æ–Ω–∏–º–∞–Ω–∏–µ', 'apply': '–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ',
                'analyze': '–ê–Ω–∞–ª–∏–∑', 'evaluate': '–û—Ü–µ–Ω–∏–≤–∞–Ω–∏–µ', 'create': '–°–æ–∑–¥–∞–Ω–∏–µ'
            }
            
            for level, count in distribution.items():
                if count > 0:
                    name = bloom_names.get(level, level)
                    print(f"   üîπ {name}: {count} –≤–æ–ø—Ä–æ—Å–æ–≤")
    
    question_count = 0
    
    while orchestrator.can_continue():
        question_count += 1
        print(f"\n{'='*40}")
        print(f"–í–û–ü–†–û–° {question_count} –∏–∑ {orchestrator.max_questions}")
        print('='*40)
        
        question = orchestrator.get_next_question()
        
        if question.get('error'):
            print(f"‚ùå –û—à–∏–±–∫–∞ LangGraph: {question['error']}")
            break
        
        if 'question' not in question:
            print(f"‚ö†Ô∏è  –ü—Ä–æ–±–ª–µ–º–∞: {question.get('message', '–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å')}")
            break
        
        print(f"\nüìù –í–û–ü–†–û–°: {question['question']}")
        print(f"üéØ –£—Ä–æ–≤–µ–Ω—å: {question.get('topic_level', '–±–∞–∑–æ–≤—ã–π')}")
        
        
        if question.get('bloom_level'):
            bloom_names = {
                'remember': '–ó–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ', 'understand': '–ü–æ–Ω–∏–º–∞–Ω–∏–µ', 'apply': '–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ',
                'analyze': '–ê–Ω–∞–ª–∏–∑', 'evaluate': '–û—Ü–µ–Ω–∏–≤–∞–Ω–∏–µ', 'create': '–°–æ–∑–¥–∞–Ω–∏–µ'
            }
            bloom_name = bloom_names.get(question['bloom_level'], question['bloom_level'])
            print(f"üß† –£—Ä–æ–≤–µ–Ω—å –ë–ª—É–º–∞: {bloom_name}")
        
        if question.get('key_points'):
            print(f"üîë –ö–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã: {question['key_points']}")
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        answer = input("\nüë§ –í–∞—à –æ—Ç–≤–µ—Ç: ").strip()
        
        if answer.lower() == 'exit':
            print("–≠–∫–∑–∞–º–µ–Ω –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
            break
        
        if not answer:
            answer = "–û—Ç–≤–µ—Ç –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω"
        
        # –û—Ü–µ–Ω–∫–∞ –æ—Ç–≤–µ—Ç–∞
        print("\nüîÑ –û—Ü–µ–Ω–∫–∞ –æ—Ç–≤–µ—Ç–∞...")
        
        evaluation = orchestrator.submit_answer(answer)
        
        if evaluation.get('error'):
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ü–µ–Ω–∫–∏: {evaluation['error']}")
            continue
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        print(f"\nüìä –í–ê–®–ê –û–¶–ï–ù–ö–ê: {evaluation.get('total_score', 0)}/10")
        
        if evaluation.get('criteria_scores'):
            print(f"\nüìà –î–µ—Ç–∞–ª—å–Ω—ã–µ –æ—Ü–µ–Ω–∫–∏:")
            criteria_names = {
                'correctness': '–ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å',
                'completeness': '–ü–æ–ª–Ω–æ—Ç–∞',
                'understanding': '–ü–æ–Ω–∏–º–∞–Ω–∏–µ'
            }
            for criterion, score in evaluation['criteria_scores'].items():
                name = criteria_names.get(criterion, criterion)
                print(f"   ‚Ä¢ {name}: {score}/10")
        
        if evaluation.get('strengths'):
            print(f"\n‚úÖ –°–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã: {evaluation['strengths']}")
        if evaluation.get('weaknesses'):
            print(f"‚ùå –°–ª–∞–±—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã: {evaluation['weaknesses']}")
        
        # –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –æ—Ç LangGraph –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        progress = orchestrator.get_progress()
        print(f"\nüìä –û–ë–©–ò–ô –ü–†–û–ì–†–ï–°–°: {progress['current_score']}/{progress['max_possible_score']} –±–∞–ª–ª–æ–≤ ({progress['percentage']:.1f}%)")
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ
        if progress.get('theme_progress') and use_theme_structure:
            theme_progress = progress['theme_progress']
            print(f"üß† –ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –ë–ª—É–º—É: {theme_progress.get('progress_percentage', 0):.1f}%")
        
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å
        if orchestrator.can_continue():
            continue_choice = input(f"\n–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —ç–∫–∑–∞–º–µ–Ω? (–¥–∞/–Ω–µ—Ç, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é '–¥–∞'): ").strip().lower()
            if continue_choice in ['–Ω–µ—Ç', 'no', 'n', '–Ω']:
                break
    
    # –§–∏–Ω–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
    progress = orchestrator.get_progress()
    if progress['questions_answered'] > 0:
        print(f"\n{'='*50}")
        print("üìã –†–ï–ó–£–õ–¨–¢–ê–¢–´ –≠–ö–ó–ê–ú–ï–ù–ê")
        print('='*50)
        
        diagnostic_result = orchestrator.complete_exam()
        
        if not diagnostic_result.get('error'):
            print(f"\nüéì –ò–¢–û–ì–û–í–ê–Ø –û–¶–ï–ù–ö–ê: {diagnostic_result['grade_info']['grade']} ({diagnostic_result['grade_info']['percentage']}%)")
            print(f"üéØ –ë–∞–ª–ª—ã: {diagnostic_result['grade_info']['points']}")
            
            print(f"\nüí° –û—Å–Ω–æ–≤–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
            for i, rec in enumerate(diagnostic_result['recommendations'][:3], 1):
                print(f"   {i}. {rec}")
            
            # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç
            full_report_choice = input(f"\n–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç? (–¥–∞/–Ω–µ—Ç): ").strip().lower()
            if full_report_choice in ['–¥–∞', 'yes', 'y', '–¥']:
                print(f"\n{'='*50}")
                print("üìÑ –ü–û–õ–ù–´–ô –û–¢–ß–ï–¢")
                print('='*50)
                print(diagnostic_result.get('final_report', '–û—Ç—á–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'))
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: {diagnostic_result['error']}")
    else:
        print("\n–≠–∫–∑–∞–º–µ–Ω –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω. –î–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ.")


def demo_langgraph_agents():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã –∞–≥–µ–Ω—Ç–æ–≤ –ø–æ –æ—Ç–¥–µ–ª—å–Ω–æ—Å—Ç–∏"""
    print("=== –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ê–ì–ï–ù–¢–û–í ===\n")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config = validate_yandex_config()
    if not config['is_valid']:
        print("‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: YandexGPT –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!")
        print("   –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤ —Ä–µ–∂–∏–º–µ –±–µ–∑ LLM.\n")
    
    # –í—ã–±–æ—Ä —Ç–µ–º—ã –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    topic_manager = TopicManager()
    print("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∞–≥–µ–Ω—Ç–æ–≤:")
    topic_info = topic_manager.get_topic_selection()
    
    topic_context = topic_manager.get_topic_context_for_prompts(topic_info)
    
    print(f"\nüìö –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–æ–≤ –ø–æ —Ç–µ–º–µ: {topic_info['name']}\n")
    
    # 1. ThemeAgent
    print("üé® –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø ThemeAgent")
    print("-" * 30)
    
    try:
        theme_agent = create_theme_agent(
            subject=topic_info['subject'],
            topic_context=topic_context
        )
        
        print(f"‚úÖ ThemeAgent —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        print(f"üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–≥–µ–Ω—Ç–µ:")
        agent_info = theme_agent.get_agent_info()
        print(f"   üÜî ID –∞–≥–µ–Ω—Ç–∞: {agent_info['agent_id']}")
        print(f"   üìä –û–ø–µ—Ä–∞—Ü–∏–π –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {agent_info['operations_count']}")
        
        if config['is_valid']:
            print("üöÄ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã...")
            theme_structure = theme_agent.generate_theme_structure(total_questions=5, difficulty="—Å—Ä–µ–¥–Ω–∏–π")
            
            if not theme_structure.get('error'):
                print(f"‚úÖ –¢–µ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞")
                print(f"üìä –í—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {theme_structure['total_questions']}")
                distribution = theme_structure.get('questions_distribution', {})
                print(f"üìã –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –ë–ª—É–º—É: {len(distribution)} —É—Ä–æ–≤–Ω–µ–π")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã: {theme_structure['error']}")
        else:
            print("‚ö†Ô∏è  –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –±–µ–∑ LLM –≤—ã–∑–æ–≤–æ–≤")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è ThemeAgent: {str(e)}")
    
    # 2. QuestionAgent
    print(f"\nü§ñ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø QuestionAgent")
    print("-" * 30)
    
    try:
        question_agent = create_question_agent(
            subject=topic_info['subject'],
            difficulty=topic_info['difficulty'],
            topic_context=topic_context
        )
        
        print(f"‚úÖ QuestionAgent —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        agent_info = question_agent.get_agent_info()
        print(f"üìä ID –∞–≥–µ–Ω—Ç–∞: {agent_info['agent_id']}")
        
        if config['is_valid']:
            print("üöÄ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–æ–ø—Ä–æ—Å–∞...")
            question_data = question_agent.generate_question(1, [])
            
            if not question_data.get('error'):
                print(f"‚úÖ –í–æ–ø—Ä–æ—Å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: {question_data['question'][:60]}...")
                print(f"üéØ –£—Ä–æ–≤–µ–Ω—å: {question_data.get('topic_level', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
                print(f"üõ°Ô∏è  –ü—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å: {'–∑–∞—â–∏—â–µ–Ω–∞' if question_data.get('privacy_protected') else '—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è'}")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {question_data['error']}")
        else:
            print("‚ö†Ô∏è  –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –±–µ–∑ LLM –≤—ã–∑–æ–≤–æ–≤")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è QuestionAgent: {str(e)}")
    
    # 3. EvaluationAgent
    print(f"\nüîç –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø EvaluationAgent")
    print("-" * 30)
    
    try:
        evaluation_agent = create_evaluation_agent(
            subject=topic_info['subject'],
            topic_context=topic_context
        )
        
        print(f"‚úÖ EvaluationAgent —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        agent_info = evaluation_agent.get_agent_info()
        print(f"üìä ID –∞–≥–µ–Ω—Ç–∞: {agent_info['agent_id']}")
        
        if config['is_valid']:
            sample_question = "–û–±—ä—è—Å–Ω–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω—É—é –∫–æ–Ω—Ü–µ–ø—Ü–∏—é —Ç–µ–º—ã"
            sample_answer = "–≠—Ç–æ –≤–∞–∂–Ω–∞—è –∫–æ–Ω—Ü–µ–ø—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –≤–∫–ª—é—á–∞–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –∞—Å–ø–µ–∫—Ç–æ–≤ –∏ –∏–º–µ–µ—Ç –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ."
            
            print(f"üöÄ –û—Ü–µ–Ω–∫–∞ –æ—Ç–≤–µ—Ç–∞...")
            evaluation = evaluation_agent.evaluate_answer(
                sample_question, sample_answer, "–æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏, –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ", "–±–∞–∑–æ–≤—ã–π"
            )
            
            if not evaluation.get('error'):
                print(f"‚úÖ –û—Ç–≤–µ—Ç –æ—Ü–µ–Ω–µ–Ω: {evaluation.get('total_score', 0)}/10")
                print(f"üìä –¢–∏–ø –æ—Ü–µ–Ω–∫–∏: {evaluation.get('type', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
                print(f"‚è±Ô∏è  –í—Ä–µ–º—è: {evaluation.get('timestamp', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ü–µ–Ω–∫–∏: {evaluation['error']}")
        else:
            print("‚ö†Ô∏è  –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –±–µ–∑ LLM –≤—ã–∑–æ–≤–æ–≤")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è EvaluationAgent: {str(e)}")
    
    # 4. DiagnosticAgent
    print(f"\nüß† –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø DiagnosticAgent")
    print("-" * 30)
    
    try:
        diagnostic_agent = create_diagnostic_agent(
            subject=topic_info['subject'],
            topic_context=topic_context
        )
        
        print(f"‚úÖ DiagnosticAgent —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        agent_info = diagnostic_agent.get_agent_info()
        print(f"üìä ID –∞–≥–µ–Ω—Ç–∞: {agent_info['agent_id']}")
        
        if config['is_valid']:
            # –°–∏–º—É–ª–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —ç–∫–∑–∞–º–µ–Ω–∞
            mock_questions = [
                {'question': '–¢–µ—Å—Ç–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å 1', 'topic_level': '–±–∞–∑–æ–≤—ã–π'},
                {'question': '–¢–µ—Å—Ç–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å 2', 'topic_level': '–ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π'}
            ]
            mock_evaluations = [
                {'total_score': 8, 'type': 'detailed', 'criteria_scores': {'correctness': 8, 'completeness': 7}},
                {'total_score': 6, 'type': 'detailed', 'criteria_scores': {'correctness': 6, 'completeness': 5}}
            ]
            
            print(f"üöÄ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...")
            diagnosis = diagnostic_agent.diagnose_exam_results(mock_questions, mock_evaluations)
            
            if not diagnosis.get('error'):
                print(f"‚úÖ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
                print(f"üìä –ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞: {diagnosis['grade_info']['grade']}")
                print(f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç: {diagnosis['grade_info']['percentage']}%")
                print(f"üîç –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ–±–ª–∞—Å—Ç–µ–π: {len(diagnosis.get('critical_areas', []))}")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: {diagnosis['error']}")
        else:
            print("‚ö†Ô∏è  –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –±–µ–∑ LLM –≤—ã–∑–æ–≤–æ–≤")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è DiagnosticAgent: {str(e)}")
    
    print(f"\n‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print(f"üìä –í—Å–µ –∞–≥–µ–Ω—Ç—ã –≥–æ—Ç–æ–≤—ã –∫ —Ä–∞–±–æ—Ç–µ")


def demo_workflow_direct():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä—è–º–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è ExamWorkflow"""
    print("=== –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø EXAMWORKFLOW ===\n")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config = validate_yandex_config()
    if not config['is_valid']:
        print("‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: YandexGPT –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!")
        print("   Workflow –≤ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ.\n")
    
    # –í—ã–±–æ—Ä —Ç–µ–º—ã
    topic_manager = TopicManager()
    topic_info = topic_manager.get_topic_selection()
    
    print(f"\nüìö –°–æ–∑–¥–∞–Ω–∏–µ ExamWorkflow –¥–ª—è —Ç–µ–º—ã: {topic_info['name']}")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ workflow –Ω–∞–ø—Ä—è–º—É—é
    workflow = create_exam_workflow(
        topic_info=topic_info,
        max_questions=3,
        use_theme_structure=True
    )
    
    print(f"üîÑ ExamWorkflow —Å–æ–∑–¥–∞–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
    
    if config['is_valid']:
        print(f"\nüöÄ –ó–∞–ø—É—Å–∫ —ç–∫–∑–∞–º–µ–Ω–∞...")
        result = workflow.start_exam_workflow("–î–µ–º–æ-—Å—Ç—É–¥–µ–Ω—Ç")
        
        print(f"üìä –†–ï–ó–£–õ–¨–¢–ê–¢ WORKFLOW:")
        print(f"   üÜî Session: {result.get('session_id', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
        print(f"   üìä –°—Ç–∞—Ç—É—Å: {result.get('status', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
        print(f"   ‚ùì –í–æ–ø—Ä–æ—Å–æ–≤: {result.get('questions_count', 0)}")
        print(f"   üìä –û—Ü–µ–Ω–æ–∫: {result.get('evaluations_count', 0)}")
        
        if result.get('errors'):
            print(f"   ‚ùå –û—à–∏–±–æ–∫: {len(result['errors'])}")
            for error in result['errors'][:3]:
                print(f"      ‚Ä¢ {error}")
        
        if result.get('diagnostic_result'):
            diagnostic = result['diagnostic_result']
            print(f"   üß† –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞: {diagnostic.get('grade_info', {}).get('grade', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
        
        if result.get('messages'):
            print(f"   üìù –°–æ–æ–±—â–µ–Ω–∏–π workflow: {len(result['messages'])}")
    else:
        print(f"\n‚ö†Ô∏è  –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã workflow –±–µ–∑ LLM –≤—ã–∑–æ–≤–æ–≤")
        print(f"   üîÑ Workflow –≥—Ä–∞—Ñ –≥–æ—Ç–æ–≤ –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é")
        print(f"   üìä –í—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ –ø–µ—Ä–µ—Ö–æ–¥—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É workflow
    workflow_stats = workflow.get_workflow_statistics()
    print(f"\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê WORKFLOW:")
    print(f"   üìà –ò—Å—Ç–æ—Ä–∏—è workflow: {workflow_stats['workflow_history_count']} –∑–∞–ø–∏—Å–µ–π")
    print(f"   ü§ñ –ê–≥–µ–Ω—Ç–æ–≤ –∞–∫—Ç–∏–≤–Ω–æ: {len([a for a in workflow_stats['agents_statistics'].values() if a])}")
    
    print(f"\nüèóÔ∏è –ê–†–•–ò–¢–ï–ö–¢–£–†–ù–´–ï –û–°–û–ë–ï–ù–ù–û–°–¢–ò:")
    print(f"   ‚úÖ StateGraph —É–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Å–µ–º –ø–æ—Ç–æ–∫–æ–º —ç–∫–∑–∞–º–µ–Ω–∞")
    print(f"   ‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø–µ—Ä–µ—Ö–æ–¥—ã –º–µ–∂–¥—É —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏")
    print(f"   ‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –Ω–∞ —É—Ä–æ–≤–Ω–µ –≥—Ä–∞—Ñ–∞")
    print(f"   ‚úÖ –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º")


def architecture_comparison():
    """–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä LangChain vs LangGraph"""
    print("=== –°–†–ê–í–ù–ï–ù–ò–ï –ê–†–•–ò–¢–ï–ö–¢–£–†: LANGCHAIN VS LANGGRAPH ===\n")
    
    print("üìä –£–ü–†–ê–í–õ–ï–ù–ò–ï –°–û–°–¢–û–Ø–ù–ò–ï–ú:")
    print("   LangChain: –æ–±—ã—á–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ Python")
    print("   LangGraph: —Å—Ç—Ä–æ–≥–∏–µ TypedDict —Å–æ—Å—Ç–æ—è–Ω–∏—è ‚úÖ")
    
    print(f"\nüîÑ –ê–†–•–ò–¢–ï–ö–¢–£–†–ê:")
    print("   LangChain: –ø—Ä–æ—Å—Ç—ã–µ —Ü–µ–ø–æ—á–∫–∏ (LLMChain)")
    print("   LangGraph: –≥—Ä–∞—Ñ—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π (StateGraph) ‚úÖ")
    
    print(f"\nüìä –¢–ò–ü–ò–ó–ê–¶–ò–Ø:")
    print("   LangChain: —Å–ª–∞–±–∞—è —Ç–∏–ø–∏–∑–∞—Ü–∏—è")
    print("   LangGraph: —Å—Ç—Ä–æ–≥–∞—è TypedDict —Ç–∏–ø–∏–∑–∞—Ü–∏—è ‚úÖ")
    
    print(f"\nüîç –û–¢–°–õ–ï–ñ–ò–í–ê–ï–ú–û–°–¢–¨:")
    print("   LangChain: –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–∞—è (—Ç–æ–ª—å–∫–æ –ª–æ–≥–∏)")
    print("   LangGraph: –ø–æ–ª–Ω–∞—è (–≥—Ä–∞—Ñ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è) ‚úÖ")
    
    print(f"\n‚ùå –û–ë–†–ê–ë–û–¢–ö–ê –û–®–ò–ë–û–ö:")
    print("   LangChain: –±–∞–∑–æ–≤–∞—è try/catch")
    print("   LangGraph: –≤—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è –≤ –≥—Ä–∞—Ñ —Å fallback ‚úÖ")
    
    print(f"\nüõ°Ô∏è –ü–†–ò–í–ê–¢–ù–û–°–¢–¨ –î–ê–ù–ù–´–•:")
    print("   LangChain: –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–∞—è –∑–∞—â–∏—Ç–∞")
    print("   LangGraph: –≤—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è –∑–∞—â–∏—Ç–∞ –º–µ–∂–¥—É –∞–≥–µ–Ω—Ç–∞–º–∏ ‚úÖ")
    
    print(f"\nüìà –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–¨:")
    print("   LangChain: –±—ã—Å—Ç—Ä—ã–µ –ø—Ä–æ—Å—Ç—ã–µ —Ü–µ–ø–æ—á–∫–∏ ‚úÖ")
    print("   LangGraph: –Ω–µ–º–Ω–æ–≥–æ –º–µ–¥–ª–µ–Ω–Ω–µ–µ –∏–∑-–∑–∞ –≥—Ä–∞—Ñ–æ–≤")
    
    print(f"\nüîß –†–ê–°–®–ò–†–Ø–ï–ú–û–°–¢–¨:")
    print("   LangChain: —Å—Ä–µ–¥–Ω—è—è (—á–µ—Ä–µ–∑ –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ)")
    print("   LangGraph: –≤—ã—Å–æ–∫–∞—è (–º–æ–¥—É–ª—å–Ω—ã–µ —É–∑–ª—ã) ‚úÖ")
    
    print(f"\nüéØ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
    print("   üì¶ LangChain: –¥–ª—è –ø—Ä–æ—Å—Ç—ã—Ö –±—ã—Å—Ç—Ä—ã—Ö –ø—Ä–æ—Ç–æ—Ç–∏–ø–æ–≤")
    print("   üöÄ LangGraph: –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞ –∏ —Å–ª–æ–∂–Ω—ã—Ö —Å–∏—Å—Ç–µ–º ‚úÖ")
    
    print(f"\nüí° –ì–õ–ê–í–ù–´–ï –ü–†–ï–ò–ú–£–©–ï–°–¢–í–ê LANGGRAPH:")
    print("   ‚úÖ –°—Ç—Ä–æ–≥–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º")
    print("   ‚úÖ –ü–æ–ª–Ω–∞—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º–æ—Å—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è") 
    print("   ‚úÖ –í—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è –∑–∞—â–∏—Ç–∞ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏")
    print("   ‚úÖ Graceful degradation –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö")
    print("   ‚úÖ –õ–µ–≥–∫–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —É–∑–ª–æ–≤")
    print("   ‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –Ω–∞ –∫–∞–∂–¥–æ–º —ç—Ç–∞–ø–µ")


def system_status_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –≤—Å–µ–π LangGraph —Å–∏—Å—Ç–µ–º—ã"""
    print("=== –ü–†–û–í–ï–†–ö–ê –°–¢–ê–¢–£–°–ê LANGGRAPH –°–ò–°–¢–ï–ú–´ ===\n")
    
    # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    print("üîß –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø:")
    config = validate_yandex_config()
    print(f"   API Key: {'‚úÖ' if config['api_key'] else '‚ùå'}")
    print(f"   Folder ID: {'‚úÖ' if config['folder_id'] else '‚ùå'}")
    print(f"   Model ID: {config['model_id']}")
    print(f"   –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞: {'‚úÖ' if config['is_valid'] else '‚ùå'}")
    
    # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤
    print(f"\nüì¶ –ò–ú–ü–û–†–¢–´ LANGGRAPH:")
    try:
        import langgraph
        print(f"   langgraph: ‚úÖ")
    except ImportError:
        print(f"   langgraph: ‚ùå –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    try:
        from langgraph.graph import StateGraph, END
        print(f"   StateGraph: ‚úÖ")
    except ImportError:
        print(f"   StateGraph: ‚ùå –æ—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞")
    
    # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–≥–µ–Ω—Ç–æ–≤
    print(f"\nü§ñ –°–û–ó–î–ê–ù–ò–ï –ê–ì–ï–ù–¢–û–í:")
    agents_status = {}
    
    try:
        theme_agent = create_theme_agent("–¢–µ—Å—Ç", "–¢–µ—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç")
        agents_status['ThemeAgent'] = '‚úÖ'
    except Exception as e:
        agents_status['ThemeAgent'] = f'‚ùå {str(e)[:50]}...'
    
    try:
        question_agent = create_question_agent("–¢–µ—Å—Ç", "—Å—Ä–µ–¥–Ω–∏–π", "–¢–µ—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç")
        agents_status['QuestionAgent'] = '‚úÖ'
    except Exception as e:
        agents_status['QuestionAgent'] = f'‚ùå {str(e)[:50]}...'
    
    try:
        evaluation_agent = create_evaluation_agent("–¢–µ—Å—Ç", "–¢–µ—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç")
        agents_status['EvaluationAgent'] = '‚úÖ'
    except Exception as e:
        agents_status['EvaluationAgent'] = f'‚ùå {str(e)[:50]}...'
    
    try:
        diagnostic_agent = create_diagnostic_agent("–¢–µ—Å—Ç", "–¢–µ—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç")
        agents_status['DiagnosticAgent'] = '‚úÖ'
    except Exception as e:
        agents_status['DiagnosticAgent'] = f'‚ùå {str(e)[:50]}...'
    
    for agent_name, status in agents_status.items():
        print(f"   {agent_name}: {status}")
    
    # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ workflow
    print(f"\nüîÑ WORKFLOW:")
    try:
        workflow = create_exam_workflow(max_questions=1, use_theme_structure=False)
        print(f"   ExamWorkflow: ‚úÖ")
    except Exception as e:
        print(f"   ExamWorkflow: ‚ùå {str(e)[:50]}...")
    
    # 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    print(f"\nüéº –û–†–ö–ï–°–¢–†–ê–¢–û–†:")
    try:
        orchestrator = create_exam_orchestrator(max_questions=1, use_theme_structure=False)
        print(f"   ExamOrchestrator: ‚úÖ")
    except Exception as e:
        print(f"   ExamOrchestrator: ‚ùå {str(e)[:50]}...")
    
    # 6. –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å
    all_agents_ok = all('‚úÖ' in status for status in agents_status.values())
    
    print(f"\nüìä –û–ë–©–ò–ô –°–¢–ê–¢–£–°:")
    if config['is_valid'] and all_agents_ok:
        print(f"   üéâ –°–∏—Å—Ç–µ–º–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!")
        print(f"   üöÄ –ú–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å –ø–æ–ª–Ω–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —ç–∫–∑–∞–º–µ–Ω—ã")
    elif all_agents_ok:
        print(f"   ‚ö†Ô∏è  –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –≤ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ")
        print(f"   üîß –ù–∞—Å—Ç—Ä–æ–π—Ç–µ YandexGPT –¥–ª—è –ø–æ–ª–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏")
    else:
        print(f"   ‚ùå –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å —Å–∏—Å—Ç–µ–º–æ–π")
        print(f"   üõ†Ô∏è  –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—à–∏–±–∫–∏ –≤—ã—à–µ")


if __name__ == "__main__":
    print("üöÄ –°–ò–°–¢–ï–ú–ê –≠–ö–ó–ê–ú–ï–ù–ò–†–û–í–ê–ù–ò–Ø –ù–ê LANGGRAPH")
    print("=" * 60)
    print("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏:")
    print("1. üéØ –û—Å–Ω–æ–≤–Ω–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)")
    print("2. ü§ñ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —ç–∫–∑–∞–º–µ–Ω")
    print("3. üîß –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤")
    print("4. üîÑ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è ExamWorkflow")
    print("5. üìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä")
    print("6. ü©∫ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã")
    
    choice = input("\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä (1-6): ").strip()
    
    try:
        if choice == "1":
            main_example()
        elif choice == "2":
            interactive_langgraph_exam()
        elif choice == "3":
            demo_langgraph_agents()
        elif choice == "4":
            demo_workflow_direct()
        elif choice == "5":
            architecture_comparison()
        elif choice == "6":
            system_status_check()
        else:
            print("–ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–π –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏...")
            main_example()
    except KeyboardInterrupt:
        print("\n\nüëã –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        print("ü©∫ –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫—É —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã (–æ–ø—Ü–∏—è 6)")
