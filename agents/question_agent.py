"""
–ê–≥–µ–Ω—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–∞ LangGraph
"""
from typing import Dict, List, Optional, Any, TypedDict
from langgraph.graph import StateGraph, END
# ToolExecutor –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –Ω–æ–≤—ã—Ö –≤–µ—Ä—Å–∏—è—Ö LangGraph
from langchain_core.prompts import PromptTemplate
from langchain_core.output_parsers import StrOutputParser
from langchain_core.runnables import RunnablePassthrough

from base import LangGraphAgentBase, QuestionState, ExamState
from yagpt_llm import create_yandex_llm, YandexGPT
import json
import re
from datetime import datetime


class QuestionAgentLangGraph(LangGraphAgentBase):
    """–ê–≥–µ–Ω—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º LangGraph"""
    
    def __init__(self, difficulty: str = "—Å—Ä–µ–¥–Ω–∏–π", 
                 topic_context: str = None, theme_structure: dict = None):
        print(f"üîç [QuestionAgent] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–∞")
        super().__init__(topic_context)
        self.difficulty = difficulty
        self.theme_structure = theme_structure
        
        print("üîç [QuestionAgent] –°–æ–∑–¥–∞–Ω–∏–µ YandexGPT LLM...")
        self.llm = create_yandex_llm()
        print("‚úÖ [QuestionAgent] YandexGPT LLM —Å–æ–∑–¥–∞–Ω")
        
        self.current_theme_position = 0
        
        print("üîç [QuestionAgent] –°–æ–∑–¥–∞–Ω–∏–µ LangGraph —Å–æ—Å—Ç–æ—è–Ω–∏–π...")
        # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ —Å–æ—Å—Ç–æ—è–Ω–∏–π
        self.graph = self._create_question_graph()
        self.app = self.graph.compile()
        print("‚úÖ [QuestionAgent] LangGraph –≥—Ä–∞—Ñ —Å–æ–∑–¥–∞–Ω –∏ —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω")
        
        print("üîç [QuestionAgent] –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–º–ø—Ç–æ–≤...")
        self._setup_prompts()
        print("‚úÖ [QuestionAgent] –ê–≥–µ–Ω—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def _setup_prompts(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–º–ø—Ç–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤"""
        
        # –ü—Ä–æ–º–ø—Ç –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
        self.initial_question_prompt = PromptTemplate(
            input_variables=["difficulty", "topic_context"],
            template="""
–¢—ã —ç–∫—Å–ø–µ—Ä—Ç-—ç–∫–∑–∞–º–µ–Ω–∞—Ç–æ—Ä.

{topic_context}

–°–æ–∑–¥–∞–π –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å –¥–ª—è —ç–∫–∑–∞–º–µ–Ω–∞ —É—Ä–æ–≤–Ω—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ "{difficulty}" —Å—Ç—Ä–æ–≥–æ –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–π —Ç–µ–º–µ.

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –≤–æ–ø—Ä–æ—Å—É:
- –í–æ–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–∞–∑–æ–≤—ã–º –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ç–µ–º—ã
- –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ –∑–Ω–∞–Ω–∏—è –∏–º–µ–Ω–Ω–æ –ø–æ –¥–∞–Ω–Ω–æ–π —Ç–µ–º–µ
- –ß–µ—Ç–∫–∏–π –∏ –æ–¥–Ω–æ–∑–Ω–∞—á–Ω—ã–π
- –ü–æ–∑–≤–æ–ª—è–µ—Ç –æ—Ü–µ–Ω–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å —Å—Ç—É–¥–µ–Ω—Ç–∞ –≤ –¥–∞–Ω–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏
- –ù–ï –æ—Ç–∫–ª–æ–Ω—è–π—Å—è –æ—Ç –∑–∞–¥–∞–Ω–Ω–æ–π —Ç–µ–º—ã

–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:
–í–û–ü–†–û–°: [—Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞]
–ö–õ–Æ–ß–ï–í–´–ï_–ú–û–ú–ï–ù–¢–´: [—Å–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–≤—ã—Ö –º–æ–º–µ–Ω—Ç–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é]

–ü—Ä–∏–º–µ—Ä –¥–ª—è —Ç–µ–º—ã "–¶–∏–∫–ª—ã –≤ Python":
–í–û–ü–†–û–°: –û–±—ä—è—Å–Ω–∏—Ç–µ —Ä–∞–∑–Ω–∏—Ü—É –º–µ–∂–¥—É —Ü–∏–∫–ª–∞–º–∏ for –∏ while –≤ Python
–ö–õ–Æ–ß–ï–í–´–ï_–ú–û–ú–ï–ù–¢–´: –∏—Ç–µ—Ä–∞—Ü–∏—è –ø–æ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏, —É—Å–ª–æ–≤–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ range, –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–µ —Ü–∏–∫–ª—ã
"""
        )
        
        # –ü—Ä–æ–º–ø—Ç –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ —Å —É—á–µ—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        self.contextual_question_prompt = PromptTemplate(
            input_variables=["difficulty", "question_number", "topic_context", 
                           "previous_questions", "evaluation_characteristics"],
            template="""
–¢—ã —ç–∫—Å–ø–µ—Ä—Ç-—ç–∫–∑–∞–º–µ–Ω–∞—Ç–æ—Ä.

{topic_context}

–°–æ–∑–¥–∞–π –≤–æ–ø—Ä–æ—Å –Ω–æ–º–µ—Ä {question_number} —É—Ä–æ–≤–Ω—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ "{difficulty}" —Å—Ç—Ä–æ–≥–æ –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–π —Ç–µ–º–µ.

–ü–†–ï–î–´–î–£–©–ò–ï –í–û–ü–†–û–°–´:
{previous_questions}

–•–ê–†–ê–ö–¢–ï–†–ò–°–¢–ò–ö–ò –ü–†–ï–î–´–î–£–©–ò–• –û–¢–í–ï–¢–û–í:
{evaluation_characteristics}

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –Ω–æ–≤–æ–º—É –≤–æ–ø—Ä–æ—Å—É:
- –ù–ï –ø–æ–≤—Ç–æ—Ä—è–π —É–∂–µ –∑–∞–¥–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã
- –í–æ–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä–æ–≥–æ –ø–æ –∑–∞–¥–∞–Ω–Ω–æ–π —Ç–µ–º–µ
- –£—á–∏—Ç—ã–≤–∞–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
- –°—Ç—Ä–æ–π –ª–æ–≥–∏—á–µ—Å–∫—É—é –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏–∑—É—á–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ç–µ–º—ã
- –ù–ï –æ—Ç–∫–ª–æ–Ω—è–π—Å—è –æ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–º—ã —ç–∫–∑–∞–º–µ–Ω–∞

–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:
–í–û–ü–†–û–°: [—Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞]
–ö–õ–Æ–ß–ï–í–´–ï_–ú–û–ú–ï–ù–¢–´: [—Å–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–≤—ã—Ö –º–æ–º–µ–Ω—Ç–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é]
–£–†–û–í–ï–ù–¨_–¢–ï–ú–´: [–±–∞–∑–æ–≤—ã–π/–ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π/–ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π]
–û–ë–û–°–ù–û–í–ê–ù–ò–ï: [–ø–æ—á–µ–º—É —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞]

–ü—Ä–∏–º–µ—Ä –¥–ª—è —Ç–µ–º—ã "–¶–∏–∫–ª—ã –≤ Python":
–í–û–ü–†–û–°: –ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–¥ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤—Å–µ—Ö —á–µ—Ç–Ω—ã—Ö —á–∏—Å–µ–ª –≤ —Å–ø–∏—Å–∫–µ –∏—Å–ø–æ–ª—å–∑—É—è —Ü–∏–∫–ª for –∏ list comprehension
–ö–õ–Æ–ß–ï–í–´–ï_–ú–û–ú–ï–ù–¢–´: —Ü–∏–∫–ª for, —É—Å–ª–æ–≤–∏–µ if, –º–æ–¥—É–ª—å %, list comprehension, —Å–∏–Ω—Ç–∞–∫—Å–∏—Å
–£–†–û–í–ï–ù–¨_–¢–ï–ú–´: –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π
–û–ë–û–°–ù–û–í–ê–ù–ò–ï: –°—Ç—É–¥–µ–Ω—Ç –ø–æ–Ω—è–ª –±–∞–∑–æ–≤—ã–µ —Ü–∏–∫–ª—ã, –º–æ–∂–Ω–æ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –∫ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–º—É –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—é
"""
        )
        
        # –ü—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä—É–∫–æ–≤–æ–¥—è—â–∏—Ö –ø—Ä–∏–Ω—Ü–∏–ø–æ–≤ ThemeAgent
        self.theme_guided_question_prompt = PromptTemplate(
            input_variables=["topic_context", "difficulty", "question_requirements", 
                           "evaluation_characteristics"],
            template="""
–¢—ã —ç–∫—Å–ø–µ—Ä—Ç-—ç–∫–∑–∞–º–µ–Ω–∞—Ç–æ—Ä.

–ö–û–ù–¢–ï–ö–°–¢ –¢–ï–ú–´:
{topic_context}

–£–†–û–í–ï–ù–¨ –°–õ–û–ñ–ù–û–°–¢–ò: {difficulty}

–¢–†–ï–ë–û–í–ê–ù–ò–Ø –ö –í–û–ü–†–û–°–£ (–æ—Ç ThemeAgent):
{question_requirements}

–•–ê–†–ê–ö–¢–ï–†–ò–°–¢–ò–ö–ò –ü–†–ï–î–´–î–£–©–ò–• –û–¢–í–ï–¢–û–í (–æ—Ç EvaluationAgent):
{evaluation_characteristics}

–ó–ê–î–ê–ß–ê:
–°–æ–∑–¥–∞–π –û–î–ò–ù –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å, —Å—Ç—Ä–æ–≥–æ —Å–ª–µ–¥—É—è —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º ThemeAgent.
–ê–¥–∞–ø—Ç–∏—Ä—É–π –≤–æ–ø—Ä–æ—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤, –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–π –∑–∞–¥–∞–Ω–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –ë–ª—É–º–∞.

–í–ê–ñ–ù–û: 
- –¢—ã –ù–ï –í–ò–î–ò–®–¨ —Ç–µ–∫—Å—Ç–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤ —Å—Ç—É–¥–µ–Ω—Ç–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏
- –¢—ã –ø–æ–ª—É—á–∞–µ—à—å —Ç–æ–ª—å–∫–æ –æ–±–æ–±—â–µ–Ω–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –æ—Ç EvaluationAgent
- –ê–¥–∞–ø—Ç–∏—Ä—É–π –≤–æ–ø—Ä–æ—Å—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ —É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç–∏, –∞ –Ω–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è

–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ï –¢–†–ï–ë–û–í–ê–ù–ò–Ø:
1. –°–ª–µ–¥—É–π –ø—Ä–∏–Ω—Ü–∏–ø–∞–º —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π ThemeAgent
2. –í–∫–ª—é—á–∏ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
3. –ò—Å–ø–æ–ª—å–∑—É–π —É–∫–∞–∑–∞–Ω–Ω—ã–µ —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
4. –ü—Ä–∏–º–µ–Ω—è–π —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–µ –≥–ª–∞–≥–æ–ª—ã –∏ –¥–µ–π—Å—Ç–≤–∏—è
5. –°–æ–±–ª—é–¥–∞–π —É–∫–∞–∑–∞–Ω–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
6. –£—á–∏—Ç—ã–≤–∞–π –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
7. –ò–∑–±–µ–≥–∞–π —Ç–æ–≥–æ, —á—Ç–æ —É–∫–∞–∑–∞–Ω–æ –≤ —Ä–∞–∑–¥–µ–ª–µ "–∏–∑–±–µ–≥–∞—Ç—å"
8. –ê–¥–∞–ø—Ç–∏—Ä—É–π –ø–æ–¥ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞

–§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê:
–í–û–ü–†–û–°: [–∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞]
–ö–õ–Æ–ß–ï–í–´–ï_–ú–û–ú–ï–ù–¢–´: [—á—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –æ—Ç–≤–µ—Ç–µ]
–£–†–û–í–ï–ù–¨_–ë–õ–£–ú–ê: [—É—Ä–æ–≤–µ–Ω—å –∏–∑ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π]
–¢–ï–ú–ê–¢–ò–ß–ï–°–ö–û–ï_–ù–ê–ü–†–ê–í–õ–ï–ù–ò–ï: [–∫–∞–∫–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–∑ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ]
–ö–û–ì–ù–ò–¢–ò–í–ù–´–ô_–ü–†–û–¶–ï–°–°: [–∫–∞–∫–æ–π –ø—Ä–æ—Ü–µ—Å—Å –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è]
–ö–†–ò–¢–ï–†–ò–ò_–û–¶–ï–ù–ö–ò: [–∫–∞–∫ –æ—Ü–µ–Ω–∏–≤–∞—Ç—å —ç—Ç–æ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç]
–ê–î–ê–ü–¢–ê–¶–ò–Ø: [–∫–∞–∫ –≤–æ–ø—Ä–æ—Å –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω –ø–æ–¥ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞]
–ü–†–ò–í–ê–¢–ù–û–°–¢–¨: [–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —á—Ç–æ —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–æ–≤ –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è]

–ù–ï –æ—Ç–∫–ª–æ–Ω—è–π—Å—è –æ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π ThemeAgent! –°–æ–∑–¥–∞–≤–∞–π —Ç–æ–ª—å–∫–æ —Ç–æ, —á—Ç–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∑–∞–¥–∞–Ω–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ.
"""
        )
    
    def _create_question_graph(self) -> StateGraph:
        """–°–æ–∑–¥–∞–µ—Ç –≥—Ä–∞—Ñ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤"""
        graph = StateGraph(QuestionState)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —É–∑–ª—ã
        graph.add_node("determine_question_type", self._determine_question_type)
        graph.add_node("generate_initial_question", self._generate_initial_question_node)
        graph.add_node("generate_contextual_question", self._generate_contextual_question_node)
        graph.add_node("generate_theme_guided_question", self._generate_theme_guided_question_node)
        graph.add_node("parse_question_response", self._parse_question_response_node)
        graph.add_node("validate_question", self._validate_question_node)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–æ—á–∫—É –≤—Ö–æ–¥–∞
        graph.set_entry_point("determine_question_type")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —É—Å–ª–æ–≤–Ω—ã–µ —Ä–µ–±—Ä–∞
        graph.add_conditional_edges(
            "determine_question_type",
            self._decide_question_path,
            {
                "initial": "generate_initial_question",
                "contextual": "generate_contextual_question", 
                "theme_guided": "generate_theme_guided_question"
            }
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–±—Ä–∞ –∫ –ø–∞—Ä—Å–∏–Ω–≥—É
        graph.add_edge("generate_initial_question", "parse_question_response")
        graph.add_edge("generate_contextual_question", "parse_question_response")
        graph.add_edge("generate_theme_guided_question", "parse_question_response")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–±—Ä–æ –∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        graph.add_edge("parse_question_response", "validate_question")
        
        # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ
        graph.add_edge("validate_question", END)
        
        return graph
    
    def _determine_question_type(self, state: QuestionState) -> QuestionState:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
        print(f"üîç [QuestionAgent] –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞ #{state['question_number']}")
        try:
            # –õ–æ–≥–∏—Ä—É–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é
            self.log_operation("determine_question_type", state, None)
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ—ë
            if self.theme_structure:
                state["question_type"] = "theme_guided"
                print("‚úÖ [QuestionAgent] –í—ã–±—Ä–∞–Ω —Ç–∏–ø: theme_guided")
                return state
            
            # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å
            if state["question_number"] == 1 or not state.get("evaluation_summaries"):
                state["question_type"] = "initial"
                print("‚úÖ [QuestionAgent] –í—ã–±—Ä–∞–Ω —Ç–∏–ø: initial")
                return state
            
            # –ò–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –ø–æ–¥—Ö–æ–¥
            state["question_type"] = "contextual"
            print("‚úÖ [QuestionAgent] –í—ã–±—Ä–∞–Ω —Ç–∏–ø: contextual")
            return state
            
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ –≤–æ–ø—Ä–æ—Å–∞: {str(e)}"
            print(f"‚ùå [QuestionAgent] {error_msg}")
            state["error"] = error_msg
            self.log_operation("determine_question_type", state, None, str(e))
            return state
    
    def _decide_question_path(self, state: QuestionState) -> str:
        """–†–µ—à–∞–µ—Ç, –∫–∞–∫–æ–π –ø—É—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
        if state.get("error"):
            return "initial"  # Fallback –∫ –Ω–∞—á–∞–ª—å–Ω–æ–º—É –≤–æ–ø—Ä–æ—Å—É
        
        return state.get("question_type", "initial")
    
    def _generate_initial_question_node(self, state: QuestionState) -> QuestionState:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å"""
        print(f"üîç [QuestionAgent] –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–µ—Ä–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞")
        try:
            print("üîç [QuestionAgent] –°–æ–∑–¥–∞–Ω–∏–µ —Ü–µ–ø–æ—á–∫–∏ –ø—Ä–æ–º–ø—Ç ‚Üí LLM ‚Üí –ø–∞—Ä—Å–µ—Ä...")
            chain = self.initial_question_prompt | self.llm | StrOutputParser()
            
            print("üîç [QuestionAgent] –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–º–ø—Ç–∞...")
            prompt_data = {
                "difficulty": self.difficulty,
                "topic_context": self.topic_context
            }
            print(f"üîç [QuestionAgent] –î–∞–Ω–Ω—ã–µ –ø—Ä–æ–º–ø—Ç–∞: {prompt_data}")
            
            print("üîç [QuestionAgent] –í—ã–∑–æ–≤ YandexGPT API...")
            response = chain.invoke(prompt_data)
            
            print(f"‚úÖ [QuestionAgent] –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç YandexGPT: {response[:100]}...")
            state["raw_response"] = response
            self.log_operation("generate_initial_question", state, response)
            return state
            
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞: {str(e)}"
            print(f"‚ùå [QuestionAgent] {error_msg}")
            state["error"] = error_msg
            self.log_operation("generate_initial_question", state, None, str(e))
            return state
    
    def _generate_contextual_question_node(self, state: QuestionState) -> QuestionState:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å"""
        try:
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã
            previous_questions = self._format_previous_questions()
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –æ—Ü–µ–Ω–æ–∫
            evaluation_characteristics = self._format_evaluation_characteristics(
                state.get("evaluation_summaries", [])
            )
            
            chain = self.contextual_question_prompt | self.llm | StrOutputParser()
            
            response = chain.invoke({
                "difficulty": self.difficulty,
                "question_number": state["question_number"],
                "topic_context": self.topic_context,
                "previous_questions": previous_questions,
                "evaluation_characteristics": evaluation_characteristics
            })
            
            state["raw_response"] = response
            self.log_operation("generate_contextual_question", state, response)
            return state
            
        except Exception as e:
            state["error"] = f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞: {str(e)}"
            self.log_operation("generate_contextual_question", state, None, str(e))
            return state
    
    def _generate_theme_guided_question_node(self, state: QuestionState) -> QuestionState:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≤–æ–ø—Ä–æ—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
            theme_requirements = self._get_next_question_requirements()
            
            if not theme_requirements or theme_requirements.get("error"):
                # Fallback –∫ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–º—É –≤–æ–ø—Ä–æ—Å—É
                return self._generate_contextual_question_node(state)
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
            requirements_text = self._format_requirements_for_prompt(theme_requirements)
            evaluation_characteristics = self._format_evaluation_characteristics(
                state.get("evaluation_summaries", [])
            )
            
            chain = self.theme_guided_question_prompt | self.llm | StrOutputParser()
            
            response = chain.invoke({
                "topic_context": self.topic_context,
                "difficulty": self.difficulty,
                "question_requirements": requirements_text,
                "evaluation_characteristics": evaluation_characteristics
            })
            
            state["raw_response"] = response
            state["theme_requirements"] = theme_requirements
            self.log_operation("generate_theme_guided_question", state, response)
            return state
            
        except Exception as e:
            state["error"] = f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞: {str(e)}"
            self.log_operation("generate_theme_guided_question", state, None, str(e))
            return state
    
    def _parse_question_response_node(self, state: QuestionState) -> QuestionState:
        """–ü–∞—Ä—Å–∏—Ç –æ—Ç–≤–µ—Ç —Å –≤–æ–ø—Ä–æ—Å–æ–º"""
        try:
            if state.get("error") or not state.get("raw_response"):
                return state
            
            response = state["raw_response"]
            
            # –ë–∞–∑–æ–≤—ã–π –ø–∞—Ä—Å–∏–Ω–≥
            question_match = re.search(r'–í–û–ü–†–û–°:\s*(.+?)(?=\n|$)', response, re.DOTALL)
            key_points_match = re.search(r'–ö–õ–Æ–ß–ï–í–´–ï_–ú–û–ú–ï–ù–¢–´:\s*(.+?)(?=\n|$)', response)
            level_match = re.search(r'–£–†–û–í–ï–ù–¨_–¢–ï–ú–´:\s*(.+?)(?=\n|$)', response)
            reasoning_match = re.search(r'–û–ë–û–°–ù–û–í–ê–ù–ò–ï:\s*(.+?)(?=\n|$)', response, re.DOTALL)
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
            bloom_level_match = re.search(r'–£–†–û–í–ï–ù–¨_–ë–õ–£–ú–ê:\s*(.+?)(?=\n|$)', response)
            direction_match = re.search(r'–¢–ï–ú–ê–¢–ò–ß–ï–°–ö–û–ï_–ù–ê–ü–†–ê–í–õ–ï–ù–ò–ï:\s*(.+?)(?=\n|$)', response)
            process_match = re.search(r'–ö–û–ì–ù–ò–¢–ò–í–ù–´–ô_–ü–†–û–¶–ï–°–°:\s*(.+?)(?=\n|$)', response)
            criteria_match = re.search(r'–ö–†–ò–¢–ï–†–ò–ò_–û–¶–ï–ù–ö–ò:\s*(.+?)(?=\n|$)', response, re.DOTALL)
            adaptation_match = re.search(r'–ê–î–ê–ü–¢–ê–¶–ò–Ø:\s*(.+?)(?=\n|$)', response, re.DOTALL)
            
            question_data = {
                'question': question_match.group(1).strip() if question_match else "–í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω",
                'key_points': key_points_match.group(1).strip() if key_points_match else "",
                'topic_level': level_match.group(1).strip() if level_match else "–±–∞–∑–æ–≤—ã–π",
                'reasoning': reasoning_match.group(1).strip() if reasoning_match else "",
                'question_number': state["question_number"],
                'timestamp': datetime.now(),
                'raw_response': response
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—è –¥–ª—è —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
            if bloom_level_match or state.get("theme_requirements"):
                theme_requirements = state.get("theme_requirements", {})
                question_data.update({
                    'bloom_level': theme_requirements.get('bloom_level', 'remember'),
                    'bloom_level_name': theme_requirements.get('level_name', '–ù–µ —É–∫–∞–∑–∞–Ω'),
                    'thematic_direction': direction_match.group(1).strip() if direction_match else "",
                    'cognitive_process': process_match.group(1).strip() if process_match else "",
                    'evaluation_criteria': criteria_match.group(1).strip() if criteria_match else "",
                    'adaptation_notes': adaptation_match.group(1).strip() if adaptation_match else "",
                    'theme_requirements': theme_requirements,
                    'topic_level': self._map_bloom_to_topic_level(theme_requirements.get('bloom_level', 'remember'))
                })
            
            state["generated_question"] = question_data
            self.log_operation("parse_question_response", response, question_data)
            return state
            
        except Exception as e:
            state["error"] = f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤–æ–ø—Ä–æ—Å–∞: {str(e)}"
            self.log_operation("parse_question_response", state, None, str(e))
            return state
    
    def _validate_question_node(self, state: QuestionState) -> QuestionState:
        """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å"""
        try:
            if state.get("error"):
                return state
            
            question_data = state.get("generated_question")
            if not question_data:
                state["error"] = "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏"
                return state
            
            # –ë–∞–∑–æ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
            validation_errors = []
            
            if not question_data.get("question") or question_data["question"] == "–í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω":
                validation_errors.append("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞")
            
            if len(question_data.get("question", "")) < 10:
                validation_errors.append("–í–æ–ø—Ä–æ—Å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π")
            
            if not question_data.get("key_points"):
                validation_errors.append("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ (–µ—Å–ª–∏ –µ—Å—Ç—å –∏—Å—Ç–æ—Ä–∏—è)
            if hasattr(self, 'question_history'):
                for prev_q in self.question_history:
                    if prev_q.get("question", "").lower() == question_data["question"].lower():
                        validation_errors.append("–í–æ–ø—Ä–æ—Å –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è")
                        break
            
            if validation_errors:
                state["error"] = f"–û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {'; '.join(validation_errors)}"
            else:
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –≤ —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ
                if self.theme_structure:
                    self.current_theme_position += 1
                
                # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
                if not hasattr(self, 'question_history'):
                    self.question_history = []
                self.question_history.append(question_data)
            
            self.log_operation("validate_question", question_data, validation_errors)
            return state
            
        except Exception as e:
            state["error"] = f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–∞: {str(e)}"
            self.log_operation("validate_question", state, None, str(e))
            return state
    
    def generate_question(self, question_number: int, evaluation_summaries: List[Dict] = None) -> Dict[str, Any]:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≤–æ–ø—Ä–æ—Å —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º LangGraph
        
        Args:
            question_number: –ù–æ–º–µ—Ä –≤–æ–ø—Ä–æ—Å–∞
            evaluation_summaries: –°–ø–∏—Å–æ–∫ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –æ—Ü–µ–Ω–æ–∫ –æ—Ç EvaluationAgent
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –≤–æ–ø—Ä–æ—Å–æ–º –∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
        """
        print(f"üîç [QuestionAgent] –ù–∞—á–∞–ª–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–∞ #{question_number}")
        try:
            print("üîç [QuestionAgent] –°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è...")
            # –°–æ–∑–¥–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            initial_state = QuestionState(
                question_number=question_number,
                evaluation_summaries=evaluation_summaries or [],
                theme_requirements=None,
                generated_question=None,
                error=None,
                raw_response=None, # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–µ–µ –ø–æ–ª–µ
                question_type=None # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–µ–µ –ø–æ–ª–µ
            )
            print(f"‚úÖ [QuestionAgent] –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ: –Ω–æ–º–µ—Ä –≤–æ–ø—Ä–æ—Å–∞ {question_number}")
            
            print("üîç [QuestionAgent] –ó–∞–ø—É—Å–∫ LangGraph workflow...")
            # –ó–∞–ø—É—Å–∫–∞–µ–º –≥—Ä–∞—Ñ
            result = self.app.invoke(initial_state)
            print("‚úÖ [QuestionAgent] LangGraph workflow –∑–∞–≤–µ—Ä—à–µ–Ω")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if result.get("error"):
                error_msg = result["error"]
                print(f"‚ùå [QuestionAgent] –û—à–∏–±–∫–∞ –≤ workflow: {error_msg}")
                return {
                    "error": error_msg,
                    "question": "–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–∞",
                    "key_points": "",
                    "question_number": question_number,
                    "timestamp": datetime.now()
                }
            
            print(f"‚úÖ [QuestionAgent] –í–æ–ø—Ä–æ—Å #{question_number} —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω")
            return result.get("generated_question", {})
            
        except Exception as e:
            error_msg = f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ generate_question: {str(e)}"
            print(f"‚ùå [QuestionAgent] {error_msg}")
            self.log_operation("generate_question", {"question_number": question_number}, None, error_msg)
            
            return {
                "error": error_msg,
                "question": "–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–∞",
                "key_points": "",
                "question_number": question_number,
                "timestamp": datetime.now()
            }
    
    # –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã (—Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞ —Å –∞–¥–∞–ø—Ç–∞—Ü–∏–µ–π)
    
    def _format_previous_questions(self) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –ø—Ä–æ–º–ø—Ç–∞"""
        if not hasattr(self, 'question_history') or not self.question_history:
            return "–ù–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤"
        
        formatted = ""
        for i, q in enumerate(self.question_history, 1):
            formatted += f"{i}. {q['question']}\n"
        
        return formatted
    
    def _format_evaluation_characteristics(self, evaluation_summaries: List[Dict]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –æ—Ü–µ–Ω–æ–∫ –ë–ï–ó —Ç–µ–∫—Å—Ç–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤ —Å—Ç—É–¥–µ–Ω—Ç–∞"""
        if not evaluation_summaries:
            return "–ü—Ä–µ–¥—ã–¥—É—â–∏—Ö –æ—Ü–µ–Ω–æ–∫ –Ω–µ—Ç - —ç—Ç–æ –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å."
        
        characteristics = []
        
        for i, summary in enumerate(evaluation_summaries, 1):
            char_text = f"–û–¢–í–ï–¢ {i}:\n"
            
            # –û—Ü–µ–Ω–∫–∏ –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º (–ë–ï–ó —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞)
            if 'criteria_scores' in summary:
                scores = summary['criteria_scores']
                char_text += f"  ‚Ä¢ –ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å: {scores.get('correctness', 0)}/10\n"
                char_text += f"  ‚Ä¢ –ü–æ–ª–Ω–æ—Ç–∞: {scores.get('completeness', 0)}/10\n"
                char_text += f"  ‚Ä¢ –ü–æ–Ω–∏–º–∞–Ω–∏–µ: {scores.get('understanding', 0)}/10\n"
                char_text += f"  ‚Ä¢ –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ—Å—Ç—å: {scores.get('structure', 0)}/10\n"
            
            # –û–±—â–∏–π –±–∞–ª–ª
            char_text += f"  ‚Ä¢ –û–±—â–∏–π –±–∞–ª–ª: {summary.get('total_score', 0)}/10\n"
            
            # –°–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã (–æ–±–æ–±—â–µ–Ω–Ω–æ)
            if 'strengths' in summary:
                char_text += f"  ‚Ä¢ –°–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã: {summary['strengths'][:100]}...\n"
            
            # –û–±–ª–∞—Å—Ç–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è (–æ–±–æ–±—â–µ–Ω–Ω–æ)
            if 'weaknesses' in summary:
                char_text += f"  ‚Ä¢ –°–ª–∞–±—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã: {summary['weaknesses'][:100]}...\n"
            
            # –£—Ä–æ–≤–µ–Ω—å –ë–ª—É–º–∞
            if 'bloom_level' in summary:
                char_text += f"  ‚Ä¢ –£—Ä–æ–≤–µ–Ω—å –ë–ª—É–º–∞: {summary['bloom_level']}\n"
            
            characteristics.append(char_text)
        
        return "\n".join(characteristics)
    
    def _get_next_question_requirements(self) -> Optional[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –æ—Ç ThemeAgent"""
        if not self.theme_structure:
            return None
        
        try:
            from theme_agent import ThemeAgentLangGraph
            theme_agent = ThemeAgentLangGraph()
            requirements = theme_agent.get_next_bloom_level_requirements(
                self.theme_structure, 
                self.current_theme_position
            )
            return requirements
        except:
            return None
    
    def _format_requirements_for_prompt(self, requirements: Dict) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è ThemeAgent –¥–ª—è –ø—Ä–æ–º–ø—Ç–∞"""
        if not requirements or 'error' in requirements:
            return "–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –Ω–µ –¥–æ—Å—Ç—É–ø–Ω—ã"
        
        text = f"–£–†–û–í–ï–ù–¨ –ë–õ–£–ú–ê: {requirements.get('level_name', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
        text += f"–ö–û–õ–ò–ß–ï–°–¢–í–û –í–û–ü–†–û–°–û–í –≠–¢–û–ì–û –¢–ò–ü–ê: {requirements.get('question_count', 1)}\n\n"
        
        if requirements.get('formulation_principles'):
            text += f"–ü–†–ò–ù–¶–ò–ü–´ –§–û–†–ú–£–õ–ò–†–û–í–ê–ù–ò–Ø:\n{requirements['formulation_principles']}\n\n"
        
        if requirements.get('mandatory_elements'):
            text += f"–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ï –≠–õ–ï–ú–ï–ù–¢–´:\n{requirements['mandatory_elements']}\n\n"
        
        if requirements.get('thematic_directions'):
            text += f"–¢–ï–ú–ê–¢–ò–ß–ï–°–ö–ò–ï –ù–ê–ü–†–ê–í–õ–ï–ù–ò–Ø:\n{requirements['thematic_directions']}\n\n"
        
        if requirements.get('verbs_and_actions'):
            text += f"–†–ï–ö–û–ú–ï–ù–î–£–ï–ú–´–ï –ì–õ–ê–ì–û–õ–´ –ò –î–ï–ô–°–¢–í–ò–Ø:\n{requirements['verbs_and_actions']}\n\n"
        
        if requirements.get('complexity_level'):
            text += f"–¢–†–ï–ë–û–í–ê–ù–ò–Ø –ö –°–õ–û–ñ–ù–û–°–¢–ò:\n{requirements['complexity_level']}\n\n"
        
        if requirements.get('contextual_requirements'):
            text += f"–ö–û–ù–¢–ï–ö–°–¢–ù–´–ï –¢–†–ï–ë–û–í–ê–ù–ò–Ø:\n{requirements['contextual_requirements']}\n\n"
        
        if requirements.get('quality_criteria'):
            text += f"–ö–†–ò–¢–ï–†–ò–ò –ö–ê–ß–ï–°–¢–í–ê:\n{requirements['quality_criteria']}\n\n"
        
        if requirements.get('avoid'):
            text += f"–ò–ó–ë–ï–ì–ê–¢–¨:\n{requirements['avoid']}\n\n"
        
        if requirements.get('student_adaptation'):
            text += f"–ê–î–ê–ü–¢–ê–¶–ò–Ø –ü–û–î –°–¢–£–î–ï–ù–¢–ê:\n{requirements['student_adaptation']}\n\n"
        
        if requirements.get('format_requirements'):
            text += f"–¢–†–ï–ë–û–í–ê–ù–ò–Ø –ö –§–û–†–ú–ê–¢–£:\n{requirements['format_requirements']}\n\n"
        
        return text
    
    def _map_bloom_to_topic_level(self, bloom_level: str) -> str:
        """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —É—Ä–æ–≤–µ–Ω—å –ë–ª—É–º–∞ –≤ —É—Ä–æ–≤–µ–Ω—å —Ç–µ–º—ã"""
        mapping = {
            'remember': '–±–∞–∑–æ–≤—ã–π',
            'understand': '–±–∞–∑–æ–≤—ã–π',
            'apply': '–ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π',
            'analyze': '–ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π',
            'evaluate': '–ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π',
            'create': '–ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π'
        }
        return mapping.get(bloom_level, '–±–∞–∑–æ–≤—ã–π')
    
    def get_question_history(self) -> List[Dict]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –∑–∞–¥–∞–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤"""
        return getattr(self, 'question_history', []).copy()
    
    def get_theme_progress(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ"""
        if not self.theme_structure:
            return {'error': '–¢–µ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞'}
        
        distribution = self.theme_structure.get('questions_distribution', {})
        total_questions = sum(distribution.values())
        
        return {
            'current_position': self.current_theme_position,
            'total_questions': total_questions,
            'progress_percentage': (self.current_theme_position / total_questions * 100) if total_questions > 0 else 0,
            'current_bloom_level': self._get_current_theme_level(),
            'completed_levels': self._get_completed_theme_levels(),
            'remaining_levels': self._get_remaining_theme_levels(),
            'theme_structure_id': self.theme_structure.get('curriculum_id', 'unknown')
        }
    
    def _get_current_theme_level(self) -> str:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å –≤ —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ"""
        requirements = self._get_next_question_requirements()
        if requirements and 'bloom_level' in requirements:
            return requirements['bloom_level']
        return 'completed'
    
    def _get_completed_theme_levels(self) -> List[str]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —É—Ä–æ–≤–Ω–∏ –≤ —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ"""
        if not self.theme_structure:
            return []
        
        distribution = self.theme_structure.get('questions_distribution', {})
        bloom_sequence = self.theme_structure.get('bloom_sequence', ['remember', 'understand', 'apply', 'analyze', 'evaluate', 'create'])
        
        completed = []
        current_pos = 0
        
        for level in bloom_sequence:
            if level in distribution:
                level_questions_count = distribution[level]
                if self.current_theme_position >= current_pos + level_questions_count:
                    completed.append(level)
                current_pos += level_questions_count
        
        return completed
    
    def _get_remaining_theme_levels(self) -> List[str]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —É—Ä–æ–≤–Ω–∏ –≤ —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ"""
        if not self.theme_structure:
            return []
        
        all_levels = ['remember', 'understand', 'apply', 'analyze', 'evaluate', 'create']
        completed = self._get_completed_theme_levels()
        current_level = self._get_current_theme_level()
        
        remaining = []
        for level in all_levels:
            if level not in completed and level != current_level and level != 'completed':
                remaining.append(level)
        
        return remaining
    
    def reset_history(self):
        """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –≤–æ–ø—Ä–æ—Å–æ–≤"""
        if hasattr(self, 'question_history'):
            self.question_history = []
        self.current_theme_position = 0
        super().reset_history()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è QuestionAgent –Ω–∞ LangGraph
def create_question_agent(
    difficulty: str = "—Å—Ä–µ–¥–Ω–∏–π",
    topic_context: str = None,
    theme_structure: dict = None
) -> QuestionAgentLangGraph:
    """–°–æ–∑–¥–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä QuestionAgent –Ω–∞ LangGraph"""
    print(f"üîç [create_question_agent] –°–æ–∑–¥–∞–Ω–∏–µ QuestionAgent —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ '{difficulty}'")
    agent = QuestionAgentLangGraph(
        difficulty=difficulty,
        topic_context=topic_context,
        theme_structure=theme_structure
    )
    print("‚úÖ [create_question_agent] QuestionAgent —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
    return agent

# –ü—Å–µ–≤–¥–æ–Ω–∏–º –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
def create_question_agent_langgraph(
    difficulty: str = "—Å—Ä–µ–¥–Ω–∏–π",
    topic_context: str = None,
    theme_structure: dict = None
) -> QuestionAgentLangGraph:
    """–°–æ–∑–¥–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä QuestionAgent –Ω–∞ LangGraph (–ø—Å–µ–≤–¥–æ–Ω–∏–º –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)"""
    return create_question_agent(difficulty, topic_context, theme_structure)

