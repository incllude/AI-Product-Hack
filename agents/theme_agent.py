"""
–ê–≥–µ–Ω—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —ç–∫–∑–∞–º–µ–Ω–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∞–∫—Å–æ–Ω–æ–º–∏–∏ –ë–ª—É–º–∞ –Ω–∞ LangGraph
"""
from typing import Dict, List, Optional, Any
from langgraph.graph import StateGraph, END
from langchain_core.prompts import PromptTemplate
from langchain_core.output_parsers import StrOutputParser

from base import LangGraphAgentBase, ThemeState
from yagpt_llm import create_yandex_llm
import json
import re
from datetime import datetime


class ThemeAgentLangGraph(LangGraphAgentBase):
    """–ê–≥–µ–Ω—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —ç–∫–∑–∞–º–µ–Ω–∞ —Å —Ä—É–∫–æ–≤–æ–¥—è—â–∏–º–∏ –ø—Ä–∏–Ω—Ü–∏–ø–∞–º–∏ –¥–ª—è QuestionAgent –Ω–∞ LangGraph"""
    
    def __init__(self, topic_context: str = None):
        print(f"üîç [ThemeAgent] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–∞ —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä")
        super().__init__(topic_context)
        
        print("üîç [ThemeAgent] –°–æ–∑–¥–∞–Ω–∏–µ YandexGPT LLM...")
        self.llm = create_yandex_llm()
        print("‚úÖ [ThemeAgent] YandexGPT LLM —Å–æ–∑–¥–∞–Ω")
        
        self.generated_structures = []
        
        # –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–∫—Å–æ–Ω–æ–º–∏–∏ –ë–ª—É–º–∞ (–ø–µ—Ä–µ—Å–º–æ—Ç—Ä–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
        self.bloom_levels = {
            "remember": {
                "name": "–ó–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ",
                "description": "–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∑–Ω–∞–Ω–∏–π –∏–∑ –¥–æ–ª–≥–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–∞–º—è—Ç–∏",
                "verbs": ["–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å", "–Ω–∞–∑–≤–∞—Ç—å", "–ø–µ—Ä–µ—á–∏—Å–ª–∏—Ç—å", "–æ–ø–∏—Å–∞—Ç—å", "—É–∑–Ω–∞—Ç—å", "–≤—Å–ø–æ–º–Ω–∏—Ç—å"],
                "question_types": ["–ß—Ç–æ —Ç–∞–∫–æ–µ...?", "–ù–∞–∑–æ–≤–∏—Ç–µ...", "–ü–µ—Ä–µ—á–∏—Å–ª–∏—Ç–µ...", "–û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ..."],
                "weight": 0.15  # 15% –æ—Ç –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤–æ–ø—Ä–æ—Å–æ–≤
            },
            "understand": {
                "name": "–ü–æ–Ω–∏–º–∞–Ω–∏–µ", 
                "description": "–ü–æ–Ω–∏–º–∞–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞",
                "verbs": ["–æ–±—ä—è—Å–Ω–∏—Ç—å", "–∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä–æ–≤–∞—Ç—å", "—Å—Ä–∞–≤–Ω–∏—Ç—å", "–∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å", "–æ–±–æ–±—â–∏—Ç—å"],
                "question_types": ["–û–±—ä—è—Å–Ω–∏—Ç–µ...", "–ü–æ—á–µ–º—É...?", "–í —á–µ–º —Ä–∞–∑–Ω–∏—Ü–∞...?", "–°—Ä–∞–≤–Ω–∏—Ç–µ..."],
                "weight": 0.25  # 25% –æ—Ç –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤–æ–ø—Ä–æ—Å–æ–≤
            },
            "apply": {
                "name": "–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ",
                "description": "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∑–Ω–∞–Ω–∏–π –≤ –Ω–æ–≤—ã—Ö —Å–∏—Ç—É–∞—Ü–∏—è—Ö",
                "verbs": ["–∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å", "—Ä–µ—à–∏—Ç—å", "–ø–æ–∫–∞–∑–∞—Ç—å", "–ø—Ä–æ–¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å", "–ø—Ä–∏–º–µ–Ω–∏—Ç—å"],
                "question_types": ["–ö–∞–∫ –±—ã –≤—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏...?", "–†–µ—à–∏—Ç–µ –∑–∞–¥–∞—á—É...", "–ü–æ–∫–∞–∂–∏—Ç–µ –∫–∞–∫..."],
                "weight": 0.25  # 25% –æ—Ç –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤–æ–ø—Ä–æ—Å–æ–≤
            },
            "analyze": {
                "name": "–ê–Ω–∞–ª–∏–∑",
                "description": "–†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏ –∏ –ø–æ–Ω–∏–º–∞–Ω–∏–µ —Å–≤—è–∑–µ–π",
                "verbs": ["–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å", "—Ä–∞–∑–ª–∏—á–∞—Ç—å", "–∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å", "—Å—Ä–∞–≤–Ω–∏—Ç—å", "–ø—Ä–æ—Ç–∏–≤–æ–ø–æ—Å—Ç–∞–≤–∏—Ç—å"],
                "question_types": ["–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ...", "–ö–∞–∫–∏–µ —Ñ–∞–∫—Ç–æ—Ä—ã...?", "–ö–∞–∫–∏–µ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞...?"],
                "weight": 0.20  # 20% –æ—Ç –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤–æ–ø—Ä–æ—Å–æ–≤
            },
            "evaluate": {
                "name": "–û—Ü–µ–Ω–∏–≤–∞–Ω–∏–µ",
                "description": "–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É–∂–¥–µ–Ω–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤",
                "verbs": ["–æ—Ü–µ–Ω–∏—Ç—å", "–∫—Ä–∏—Ç–∏–∫–æ–≤–∞—Ç—å", "—Å—É–¥–∏—Ç—å", "–æ–±–æ—Å–Ω–æ–≤–∞—Ç—å", "–∞—Ä–≥—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å"],
                "question_types": ["–û—Ü–µ–Ω–∏—Ç–µ...", "–ß—Ç–æ –ª—É—á—à–µ...?", "–û–±–æ—Å–Ω—É–π—Ç–µ...", "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –æ—Ü–µ–Ω–∏—Ç–µ..."],
                "weight": 0.10  # 10% –æ—Ç –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤–æ–ø—Ä–æ—Å–æ–≤
            },
            "create": {
                "name": "–°–æ–∑–¥–∞–Ω–∏–µ",
                "description": "–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞ –∏–ª–∏ —Ç–æ—á–∫–∏ –∑—Ä–µ–Ω–∏—è",
                "verbs": ["—Å–æ–∑–¥–∞—Ç—å", "—Ä–∞–∑—Ä–∞–±–æ—Ç–∞—Ç—å", "–ø–æ—Å—Ç—Ä–æ–∏—Ç—å", "—Å–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å", "–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏"],
                "question_types": ["–°–æ–∑–¥–∞–π—Ç–µ...", "–†–∞–∑—Ä–∞–±–æ—Ç–∞–π—Ç–µ –ø–ª–∞–Ω...", "–ü—Ä–µ–¥–ª–æ–∂–∏—Ç–µ —Ä–µ—à–µ–Ω–∏–µ..."],
                "weight": 0.05  # 5% –æ—Ç –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤–æ–ø—Ä–æ—Å–æ–≤
            }
        }
        
        # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ —Å–æ—Å—Ç–æ—è–Ω–∏–π
        self.graph = self._create_theme_graph()
        self.app = self.graph.compile()
        
        self._setup_prompts()
    
    def _setup_prompts(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–º–ø—Ç–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã"""
        
        # –ü—Ä–æ–º–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–º—ã –∏ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ–±—É—á–µ–Ω–∏—è
        self.theme_analysis_prompt = PromptTemplate(
            input_variables=["topic_context", "bloom_levels_info"],
            template="""
–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –ø–µ–¥–∞–≥–æ–≥–∏—á–µ—Å–∫–æ–º—É –¥–∏–∑–∞–π–Ω—É –∏ —Ç–∞–∫—Å–æ–Ω–æ–º–∏–∏ –ë–ª—É–º–∞.
–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ç–µ–º—É –∏ —Å–æ–∑–¥–∞–π —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ–±—É—á–µ–Ω–∏—è –∏ –æ—Ü–µ–Ω–∫–∏ –ø–æ –≤—Å–µ–º —É—Ä–æ–≤–Ω—è–º —Ç–∞–∫—Å–æ–Ω–æ–º–∏–∏ –ë–ª—É–º–∞.

–¢–ï–ú–ê –≠–ö–ó–ê–ú–ï–ù–ê:
{topic_context}

–£–†–û–í–ù–ò –¢–ê–ö–°–û–ù–û–ú–ò–ò –ë–õ–£–ú–ê:
{bloom_levels_info}

–ó–ê–î–ê–ß–ê:
–°–æ–∑–¥–∞–π —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ–±—É—á–µ–Ω–∏—è, –æ–ø—Ä–µ–¥–µ–ª–∏–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É—Ä–æ–≤–Ω—è –ë–ª—É–º–∞:
1. –û—Å–Ω–æ–≤–Ω—ã–µ –∞—Å–ø–µ–∫—Ç—ã —Ç–µ–º—ã –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è
2. –†—É–∫–æ–≤–æ–¥—è—â–∏–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤
3. –û–∂–∏–¥–∞–µ–º—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—É—á–µ–Ω–∏—è
4. –ö—Ä–∏—Ç–µ—Ä–∏–∏ –æ—Ü–µ–Ω–∫–∏

–í–ê–ñ–ù–û: –ù–ï —Å–æ–∑–¥–∞–≤–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã! –°–æ–∑–¥–∞–≤–∞–π —Ç–æ–ª—å–∫–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∏ –ø—Ä–∏–Ω—Ü–∏–ø—ã.

–§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê:
–û–ë–©–ò–ô_–û–ë–ó–û–†: [–∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã]

–£–†–û–í–ï–ù–¨_–ó–ê–ü–û–ú–ò–ù–ê–ù–ò–ï:
–û—Å–Ω–æ–≤–Ω—ã–µ_–∞—Å–ø–µ–∫—Ç—ã: [–æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–Ω—è—Ç–∏—è, —Ç–µ—Ä–º–∏–Ω—ã, —Ñ–∞–∫—Ç—ã –¥–ª—è –∑–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è]
–†—É–∫–æ–≤–æ–¥—è—â–∏–µ_–ø—Ä–∏–Ω—Ü–∏–ø—ã: [–∫–∞–∫ –¥–æ–ª–∂–Ω—ã —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤–æ–ø—Ä–æ—Å—ã —ç—Ç–æ–≥–æ —É—Ä–æ–≤–Ω—è]
–ü—Ä–∏–º–µ—Ä—ã_–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π: [–ø—Ä–∏–º–µ—Ä—ã —Ç–µ–º –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤, –ù–ï —Å–∞–º–∏ –≤–æ–ø—Ä–æ—Å—ã]
–ö—Ä–∏—Ç–µ—Ä–∏–∏_–æ—Ü–µ–Ω–∫–∏: [–∫–∞–∫ –æ—Ü–µ–Ω–∏–≤–∞—Ç—å –æ—Ç–≤–µ—Ç—ã –Ω–∞ —ç—Ç–æ–º —É—Ä–æ–≤–Ω–µ]

–£–†–û–í–ï–ù–¨_–ü–û–ù–ò–ú–ê–ù–ò–ï:
–û—Å–Ω–æ–≤–Ω—ã–µ_–∞—Å–ø–µ–∫—Ç—ã: [–∫–æ–Ω—Ü–µ–ø—Ü–∏–∏ –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è –∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è]
–†—É–∫–æ–≤–æ–¥—è—â–∏–µ_–ø—Ä–∏–Ω—Ü–∏–ø—ã: [–ø—Ä–∏–Ω—Ü–∏–ø—ã —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤]
–ü—Ä–∏–º–µ—Ä—ã_–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π: [–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤]
–ö—Ä–∏—Ç–µ—Ä–∏–∏_–æ—Ü–µ–Ω–∫–∏: [–∫—Ä–∏—Ç–µ—Ä–∏–∏ –æ—Ü–µ–Ω–∫–∏ –ø–æ–Ω–∏–º–∞–Ω–∏—è]

–£–†–û–í–ï–ù–¨_–ü–†–ò–ú–ï–ù–ï–ù–ò–ï:
–û—Å–Ω–æ–≤–Ω—ã–µ_–∞—Å–ø–µ–∫—Ç—ã: [–Ω–∞–≤—ã–∫–∏ –∏ –∑–Ω–∞–Ω–∏—è –¥–ª—è –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è]
–†—É–∫–æ–≤–æ–¥—è—â–∏–µ_–ø—Ä–∏–Ω—Ü–∏–ø—ã: [–∫–∞–∫ —Å–æ–∑–¥–∞–≤–∞—Ç—å –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞–Ω–∏—è]
–ü—Ä–∏–º–µ—Ä—ã_–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π: [–æ–±–ª–∞—Å—Ç–∏ –¥–ª—è –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞–Ω–∏–π]
–ö—Ä–∏—Ç–µ—Ä–∏–∏_–æ—Ü–µ–Ω–∫–∏: [–æ—Ü–µ–Ω–∫–∞ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö –Ω–∞–≤—ã–∫–æ–≤]

–£–†–û–í–ï–ù–¨_–ê–ù–ê–õ–ò–ó:
–û—Å–Ω–æ–≤–Ω—ã–µ_–∞—Å–ø–µ–∫—Ç—ã: [—ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è]
–†—É–∫–æ–≤–æ–¥—è—â–∏–µ_–ø—Ä–∏–Ω—Ü–∏–ø—ã: [–ø—Ä–∏–Ω—Ü–∏–ø—ã —Å–æ–∑–¥–∞–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞–Ω–∏–π]
–ü—Ä–∏–º–µ—Ä—ã_–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π: [–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞]
–ö—Ä–∏—Ç–µ—Ä–∏–∏_–æ—Ü–µ–Ω–∫–∏: [–æ—Ü–µ–Ω–∫–∞ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π]

–£–†–û–í–ï–ù–¨_–û–¶–ï–ù–ò–í–ê–ù–ò–ï:
–û—Å–Ω–æ–≤–Ω—ã–µ_–∞—Å–ø–µ–∫—Ç—ã: [–∞—Å–ø–µ–∫—Ç—ã –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—Ü–µ–Ω–∫–∏]
–†—É–∫–æ–≤–æ–¥—è—â–∏–µ_–ø—Ä–∏–Ω—Ü–∏–ø—ã: [–∫–∞–∫ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –æ—Ü–µ–Ω–æ—á–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è]
–ü—Ä–∏–º–µ—Ä—ã_–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π: [–æ–±–ª–∞—Å—Ç–∏ –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—Ü–µ–Ω–∫–∏]
–ö—Ä–∏—Ç–µ—Ä–∏–∏_–æ—Ü–µ–Ω–∫–∏: [–æ—Ü–µ–Ω–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ –º—ã—à–ª–µ–Ω–∏—è]

–£–†–û–í–ï–ù–¨_–°–û–ó–î–ê–ù–ò–ï:
–û—Å–Ω–æ–≤–Ω—ã–µ_–∞—Å–ø–µ–∫—Ç—ã: [—ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è —Ç–≤–æ—Ä—á–µ—Å–∫–æ–≥–æ —Å–∏–Ω—Ç–µ–∑–∞]
–†—É–∫–æ–≤–æ–¥—è—â–∏–µ_–ø—Ä–∏–Ω—Ü–∏–ø—ã: [–ø—Ä–∏–Ω—Ü–∏–ø—ã —Å–æ–∑–¥–∞–Ω–∏—è —Ç–≤–æ—Ä—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞–Ω–∏–π]
–ü—Ä–∏–º–µ—Ä—ã_–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π: [–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è —Ç–≤–æ—Ä—á–µ—Å–∫–∏—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤]
–ö—Ä–∏—Ç–µ—Ä–∏–∏_–æ—Ü–µ–Ω–∫–∏: [–æ—Ü–µ–Ω–∫–∞ —Ç–≤–æ—Ä—á–µ—Å–∫–∏—Ö —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π]

–†–ï–ö–û–ú–ï–ù–î–£–ï–ú–ê–Ø_–ü–û–°–õ–ï–î–û–í–ê–¢–ï–õ–¨–ù–û–°–¢–¨: [–≤ –∫–∞–∫–æ–º –ø–æ—Ä—è–¥–∫–µ –∏–∑—É—á–∞—Ç—å —É—Ä–æ–≤–Ω–∏]
–ú–ï–ñ–£–†–û–í–ù–ï–í–´–ï_–°–í–Ø–ó–ò: [–∫–∞–∫ —É—Ä–æ–≤–Ω–∏ —Å–≤—è–∑–∞–Ω—ã –º–µ–∂–¥—É —Å–æ–±–æ–π]
"""
        )
        
        # –ü—Ä–æ–º–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ä—É–∫–æ–≤–æ–¥—è—â–∏—Ö –ø—Ä–∏–Ω—Ü–∏–ø–æ–≤ –¥–ª—è QuestionAgent
        self.question_guidelines_prompt = PromptTemplate(
            input_variables=["topic_context", "bloom_level", "level_structure", "question_count"],
            template="""
–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤.
–°–æ–∑–¥–∞–π –ø–æ–¥—Ä–æ–±–Ω—ã–µ —Ä—É–∫–æ–≤–æ–¥—è—â–∏–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ {question_count} –≤–æ–ø—Ä–æ—Å–æ–≤ —É—Ä–æ–≤–Ω—è "{bloom_level}".

–¢–ï–ú–ê:
{topic_context}

–°–¢–†–£–ö–¢–£–†–ê –£–†–û–í–ù–Ø:
{level_structure}

–ó–ê–î–ê–ß–ê:
–°–æ–∑–¥–∞–π —Ä—É–∫–æ–≤–æ–¥—è—â–∏–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã –¥–ª—è QuestionAgent, —á—Ç–æ–±—ã –æ–Ω –º–æ–≥ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã.
–ù–ï —Å–æ–∑–¥–∞–≤–∞–π —Å–∞–º–∏ –≤–æ–ø—Ä–æ—Å—ã - —Ç–æ–ª—å–∫–æ –¥–µ—Ç–∞–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –∏—Ö —Å–æ–∑–¥–∞–Ω–∏—è.

–§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê:
–ü–†–ò–ù–¶–ò–ü–´_–§–û–†–ú–£–õ–ò–†–û–í–ê–ù–ò–Ø:
[–∫–∞–∫ –¥–æ–ª–∂–Ω—ã —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤–æ–ø—Ä–æ—Å—ã —ç—Ç–æ–≥–æ —É—Ä–æ–≤–Ω—è]

–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ï_–≠–õ–ï–ú–ï–ù–¢–´:
[—á—Ç–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –∫–∞–∂–¥–æ–º –≤–æ–ø—Ä–æ—Å–µ]

–¢–ï–ú–ê–¢–ò–ß–ï–°–ö–ò–ï_–ù–ê–ü–†–ê–í–õ–ï–ù–ò–Ø:
[–∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∞—Å–ø–µ–∫—Ç—ã —Ç–µ–º—ã –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤]

–£–†–û–í–ï–ù–¨_–°–õ–û–ñ–ù–û–°–¢–ò:
[—Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–æ–∫]

–ö–û–ù–¢–ï–ö–°–¢–ù–´–ï_–¢–†–ï–ë–û–í–ê–ù–ò–Ø:
[–∫–∞–∫ —Å–≤—è–∑–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã —Å —Ç–µ–º–æ–π]

–ö–†–ò–¢–ï–†–ò–ò_–ö–ê–ß–ï–°–¢–í–ê:
[–∫–∞–∫ –ø–æ–Ω—è—Ç—å, —á—Ç–æ –≤–æ–ø—Ä–æ—Å —Ö–æ—Ä–æ—à–æ —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞–Ω]

–ò–ó–ë–ï–ì–ê–¢–¨:
[—á–µ–≥–æ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –≤–æ–ø—Ä–æ—Å–∞—Ö —ç—Ç–æ–≥–æ —É—Ä–æ–≤–Ω—è]
"""
        )
    
    def _create_theme_graph(self) -> StateGraph:
        """–°–æ–∑–¥–∞–µ—Ç –≥—Ä–∞—Ñ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã"""
        graph = StateGraph(ThemeState)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —É–∑–ª—ã
        graph.add_node("validate_theme_input", self._validate_theme_input_node)
        graph.add_node("format_bloom_levels", self._format_bloom_levels_node)
        graph.add_node("analyze_theme", self._analyze_theme_node)
        graph.add_node("distribute_questions", self._distribute_questions_node)
        graph.add_node("create_question_guidelines", self._create_question_guidelines_node)
        graph.add_node("build_theme_curriculum", self._build_theme_curriculum_node)
        graph.add_node("validate_theme_structure", self._validate_theme_structure_node)
        graph.add_node("save_theme_structure", self._save_theme_structure_node)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–æ—á–∫—É –≤—Ö–æ–¥–∞
        graph.set_entry_point("validate_theme_input")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ —Ä–µ–±—Ä–∞
        graph.add_edge("validate_theme_input", "format_bloom_levels")
        graph.add_edge("format_bloom_levels", "analyze_theme")
        graph.add_edge("analyze_theme", "distribute_questions")
        graph.add_edge("distribute_questions", "create_question_guidelines")
        graph.add_edge("create_question_guidelines", "build_theme_curriculum")
        graph.add_edge("build_theme_curriculum", "validate_theme_structure")
        graph.add_edge("validate_theme_structure", "save_theme_structure")
        
        # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ
        graph.add_edge("save_theme_structure", END)
        
        return graph
    
    def _validate_theme_input_node(self, state: ThemeState) -> ThemeState:
        """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã"""
        try:
            # Subject field is no longer required - using topic_context instead
            
            if not state.get("topic_context"):
                state["error"] = "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ç–µ–º—ã"
                return state
            
            if state.get("total_questions", 0) <= 0:
                state["error"] = "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤"
                return state
            
            self.log_operation("validate_theme_input", state, "Validation passed")
            return state
            
        except Exception as e:
            state["error"] = f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {str(e)}"
            self.log_operation("validate_theme_input", state, None, str(e))
            return state
    
    def _format_bloom_levels_node(self, state: ThemeState) -> ThemeState:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Ä–æ–≤–Ω—è—Ö –ë–ª—É–º–∞ –¥–ª—è –ø—Ä–æ–º–ø—Ç–∞"""
        try:
            if state.get("error"):
                return state
            
            info = ""
            for level, data in self.bloom_levels.items():
                info += f"\n{data['name'].upper()} ({level}):\n"
                info += f"–û–ø–∏—Å–∞–Ω–∏–µ: {data['description']}\n"
                info += f"–î–µ–π—Å—Ç–≤–∏—è: {', '.join(data['verbs'])}\n"
                info += f"–¢–∏–ø—ã –≤–æ–ø—Ä–æ—Å–æ–≤: {', '.join(data['question_types'])}\n"
                info += f"–î–æ–ª—è –æ—Ç —ç–∫–∑–∞–º–µ–Ω–∞: {int(data['weight']*100)}%\n"
            
            state["bloom_levels_info"] = info
            self.log_operation("format_bloom_levels", len(self.bloom_levels), len(info))
            return state
            
        except Exception as e:
            state["error"] = f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É—Ä–æ–≤–Ω–µ–π –ë–ª—É–º–∞: {str(e)}"
            self.log_operation("format_bloom_levels", state, None, str(e))
            return state
    
    def _analyze_theme_node(self, state: ThemeState) -> ThemeState:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–µ–º—É –∏ —Å–æ–∑–¥–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ–±—É—á–µ–Ω–∏—è"""
        try:
            if state.get("error"):
                return state
            
            chain = self.theme_analysis_prompt | self.llm | StrOutputParser()
            
            theme_structure = chain.invoke({
                "topic_context": state["topic_context"],
                "bloom_levels_info": state["bloom_levels_info"]
            })
            
            state["raw_theme_structure"] = theme_structure
            self.log_operation("analyze_theme", state["topic_context"][:100], theme_structure[:200])
            return state
            
        except Exception as e:
            state["error"] = f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–º—ã: {str(e)}"
            self.log_operation("analyze_theme", state, None, str(e))
            return state
    
    def _distribute_questions_node(self, state: ThemeState) -> ThemeState:
        """–†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ—Ç –≤–æ–ø—Ä–æ—Å—ã –ø–æ —É—Ä–æ–≤–Ω—è–º –ë–ª—É–º–∞ —Å–æ–≥–ª–∞—Å–Ω–æ –≤–µ—Å–∞–º"""
        try:
            if state.get("error"):
                return state
            
            total_questions = state["total_questions"]
            distribution = {}
            
            for level, data in self.bloom_levels.items():
                count = max(1, round(total_questions * data['weight']))
                distribution[level] = count
            
            # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –æ–±—â–µ–º—É –∫–æ–ª–∏—á–µ—Å—Ç–≤—É
            current_total = sum(distribution.values())
            if current_total != total_questions:
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–ª–∏ —É–±–∏—Ä–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã —Å –Ω–∞–∏–±–æ–ª–µ–µ –≤–∞–∂–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π
                diff = total_questions - current_total
                priority_levels = ['understand', 'apply', 'analyze']
                
                for level in priority_levels:
                    if diff == 0:
                        break
                    if diff > 0:
                        distribution[level] += 1
                        diff -= 1
                    elif diff < 0 and distribution[level] > 1:
                        distribution[level] -= 1
                        diff += 1
            
            state["questions_distribution"] = distribution
            self.log_operation("distribute_questions", total_questions, distribution)
            return state
            
        except Exception as e:
            state["error"] = f"–û—à–∏–±–∫–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤: {str(e)}"
            self.log_operation("distribute_questions", state, None, str(e))
            return state
    
    def _create_question_guidelines_node(self, state: ThemeState) -> ThemeState:
        """–°–æ–∑–¥–∞–µ—Ç —Ä—É–∫–æ–≤–æ–¥—è—â–∏–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã –¥–ª—è QuestionAgent –ø–æ –∫–∞–∂–¥–æ–º—É —É—Ä–æ–≤–Ω—é –ë–ª—É–º–∞"""
        try:
            if state.get("error"):
                return state
            
            distribution = state["questions_distribution"]
            raw_theme_structure = state["raw_theme_structure"]
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–∞–∂–¥–æ–≥–æ —É—Ä–æ–≤–Ω—è –∏–∑ –æ–±—â–µ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–µ–º—ã
            level_structures = self._parse_theme_structure(raw_theme_structure)
            
            guidelines = {}
            
            for level, count in distribution.items():
                if count > 0:
                    level_structure = level_structures.get(level, f"–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —É—Ä–æ–≤–Ω—è {level}")
                    
                    chain = self.question_guidelines_prompt | self.llm | StrOutputParser()
                    
                    response = chain.invoke({
                        "topic_context": state["topic_context"],
                        "bloom_level": self.bloom_levels[level]['name'],
                        "level_structure": level_structure,
                        "question_count": count
                    })
                    
                    # –ü–∞—Ä—Å–∏–º –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–µ–º —Ä—É–∫–æ–≤–æ–¥—è—â–∏–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã
                    parsed_guidelines = self._parse_question_guidelines(response)
                    
                    guidelines[level] = {
                        'bloom_level': level,
                        'level_name': self.bloom_levels[level]['name'],
                        'question_count': count,
                        'guidelines': parsed_guidelines,
                        'raw_response': response
                    }
            
            state["question_guidelines"] = guidelines
            self.log_operation("create_question_guidelines", len(distribution), len(guidelines))
            return state
            
        except Exception as e:
            state["error"] = f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä—É–∫–æ–≤–æ–¥—è—â–∏—Ö –ø—Ä–∏–Ω—Ü–∏–ø–æ–≤: {str(e)}"
            self.log_operation("create_question_guidelines", state, None, str(e))
            return state
    
    def _build_theme_curriculum_node(self, state: ThemeState) -> ThemeState:
        """–°—Ç—Ä–æ–∏—Ç –∏—Ç–æ–≥–æ–≤—É—é —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É"""
        try:
            if state.get("error"):
                return state
            
            curriculum_id = self._generate_curriculum_id()
            
            theme_curriculum = {
                'curriculum_id': curriculum_id,
                'topic_context': state["topic_context"],
                'total_questions': state["total_questions"],
                'difficulty': state["difficulty"],
                'theme_structure': state["raw_theme_structure"],
                'questions_distribution': state["questions_distribution"],
                'question_guidelines': state["question_guidelines"],
                'bloom_sequence': self._create_bloom_sequence(),
                'assessment_framework': self._create_assessment_framework(),
                'metadata': {
                    'created_at': datetime.now(),
                    'bloom_coverage': self._calculate_bloom_coverage(state["questions_distribution"]),
                    'estimated_duration': self._estimate_duration(state["questions_distribution"])
                }
            }
            
            state["theme_structure"] = theme_curriculum
            self.log_operation("build_theme_curriculum", curriculum_id, "Curriculum built")
            return state
            
        except Exception as e:
            state["error"] = f"–û—à–∏–±–∫–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã: {str(e)}"
            self.log_operation("build_theme_curriculum", state, None, str(e))
            return state
    
    def _validate_theme_structure_node(self, state: ThemeState) -> ThemeState:
        """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—É—é —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É"""
        try:
            if state.get("error"):
                return state
            
            theme_structure = state["theme_structure"]
            validation_result = self._validate_structure(theme_structure)
            
            state["validation_result"] = validation_result
            
            if not validation_result.get("is_valid"):
                state["error"] = f"–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –Ω–µ –ø—Ä–æ—à–ª–∞ –≤–∞–ª–∏–¥–∞—Ü–∏—é: {validation_result.get('issues', [])}"
            
            self.log_operation("validate_theme_structure", "Structure validated", validation_result)
            return state
            
        except Exception as e:
            state["error"] = f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã: {str(e)}"
            self.log_operation("validate_theme_structure", state, None, str(e))
            return state
    
    def _save_theme_structure_node(self, state: ThemeState) -> ThemeState:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –≤ –∏—Å—Ç–æ—Ä–∏—é"""
        try:
            if state.get("error"):
                return state
            
            theme_structure = state["theme_structure"]
            if theme_structure:
                self.generated_structures.append(theme_structure)
                self.log_operation("save_theme_structure", "Structure saved", len(self.generated_structures))
            
            return state
            
        except Exception as e:
            state["error"] = f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã: {str(e)}"
            self.log_operation("save_theme_structure", state, None, str(e))
            return state
    
    def _parse_theme_structure(self, theme_structure: str) -> Dict[str, str]:
        """–ü–∞—Ä—Å–∏—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–µ–º—ã –ø–æ —É—Ä–æ–≤–Ω—è–º"""
        level_structures = {}
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–∞–∂–¥–æ–≥–æ —É—Ä–æ–≤–Ω—è
        patterns = {
            'remember': r'–£–†–û–í–ï–ù–¨_–ó–ê–ü–û–ú–ò–ù–ê–ù–ò–ï:(.*?)(?=–£–†–û–í–ï–ù–¨_|$)',
            'understand': r'–£–†–û–í–ï–ù–¨_–ü–û–ù–ò–ú–ê–ù–ò–ï:(.*?)(?=–£–†–û–í–ï–ù–¨_|$)',
            'apply': r'–£–†–û–í–ï–ù–¨_–ü–†–ò–ú–ï–ù–ï–ù–ò–ï:(.*?)(?=–£–†–û–í–ï–ù–¨_|$)',
            'analyze': r'–£–†–û–í–ï–ù–¨_–ê–ù–ê–õ–ò–ó:(.*?)(?=–£–†–û–í–ï–ù–¨_|$)',
            'evaluate': r'–£–†–û–í–ï–ù–¨_–û–¶–ï–ù–ò–í–ê–ù–ò–ï:(.*?)(?=–£–†–û–í–ï–ù–¨_|$)',
            'create': r'–£–†–û–í–ï–ù–¨_–°–û–ó–î–ê–ù–ò–ï:(.*?)(?=–£–†–û–í–ï–ù–¨_|$)'
        }
        
        for level, pattern in patterns.items():
            match = re.search(pattern, theme_structure, re.DOTALL)
            if match:
                level_structures[level] = match.group(1).strip()
            else:
                level_structures[level] = f"–ë–∞–∑–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —É—Ä–æ–≤–Ω—è {level}"
        
        return level_structures
    
    def _parse_question_guidelines(self, response: str) -> Dict[str, str]:
        """–ü–∞—Ä—Å–∏—Ç —Ä—É–∫–æ–≤–æ–¥—è—â–∏–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã –∏–∑ –æ—Ç–≤–µ—Ç–∞ LLM"""
        guidelines = {}
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å–µ–∫—Ü–∏–π
        patterns = {
            'formulation_principles': r'–ü–†–ò–ù–¶–ò–ü–´_–§–û–†–ú–£–õ–ò–†–û–í–ê–ù–ò–Ø:(.*?)(?=\n[–ê-–Ø_]+:|$)',
            'mandatory_elements': r'–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ï_–≠–õ–ï–ú–ï–ù–¢–´:(.*?)(?=\n[–ê-–Ø_]+:|$)',
            'thematic_directions': r'–¢–ï–ú–ê–¢–ò–ß–ï–°–ö–ò–ï_–ù–ê–ü–†–ê–í–õ–ï–ù–ò–Ø:(.*?)(?=\n[–ê-–Ø_]+:|$)',
            'verbs_and_actions': r'–ì–õ–ê–ì–û–õ–´_–ò_–î–ï–ô–°–¢–í–ò–Ø:(.*?)(?=\n[–ê-–Ø_]+:|$)',
            'complexity_level': r'–£–†–û–í–ï–ù–¨_–°–õ–û–ñ–ù–û–°–¢–ò:(.*?)(?=\n[–ê-–Ø_]+:|$)',
            'contextual_requirements': r'–ö–û–ù–¢–ï–ö–°–¢–ù–´–ï_–¢–†–ï–ë–û–í–ê–ù–ò–Ø:(.*?)(?=\n[–ê-–Ø_]+:|$)',
            'quality_criteria': r'–ö–†–ò–¢–ï–†–ò–ò_–ö–ê–ß–ï–°–¢–í–ê:(.*?)(?=\n[–ê-–Ø_]+:|$)',
            'avoid': r'–ò–ó–ë–ï–ì–ê–¢–¨:(.*?)(?=\n[–ê-–Ø_]+:|$)',
            'student_adaptation': r'–ê–î–ê–ü–¢–ê–¶–ò–Ø_–ü–û–î_–°–¢–£–î–ï–ù–¢–ê:(.*?)(?=\n[–ê-–Ø_]+:|$)',
            'format_requirements': r'–¢–†–ï–ë–û–í–ê–ù–ò–Ø_–ö_–§–û–†–ú–ê–¢–£:(.*?)(?=\n[–ê-–Ø_]+:|$)'
        }
        
        for key, pattern in patterns.items():
            match = re.search(pattern, response, re.DOTALL)
            guidelines[key] = match.group(1).strip() if match else ""
        
        return guidelines
    
    def _create_bloom_sequence(self) -> List[str]:
        """–°–æ–∑–¥–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—É—é –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —É—Ä–æ–≤–Ω–µ–π –ë–ª—É–º–∞"""
        return ['remember', 'understand', 'apply', 'analyze', 'evaluate', 'create']
    
    def _create_assessment_framework(self) -> Dict[str, str]:
        """–°–æ–∑–¥–∞–µ—Ç –æ–±—â–∏–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã –æ—Ü–µ–Ω–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É—Ä–æ–≤–Ω—è"""
        framework = {}
        
        for level, data in self.bloom_levels.items():
            if level == "remember":
                framework[level] = "–û—Ü–µ–Ω–∏–≤–∞–π—Ç–µ —Ç–æ—á–Ω–æ—Å—Ç—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è —Ñ–∞–∫—Ç–æ–≤, —Ç–µ—Ä–º–∏–Ω–æ–≤, –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π"
            elif level == "understand":
                framework[level] = "–û—Ü–µ–Ω–∏–≤–∞–π—Ç–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –æ–±—ä—è—Å–Ω–∏—Ç—å —Å–º—ã—Å–ª, –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä–æ–≤–∞—Ç—å, —Å—Ä–∞–≤–Ω–∏–≤–∞—Ç—å"
            elif level == "apply":
                framework[level] = "–û—Ü–µ–Ω–∏–≤–∞–π—Ç–µ —É–º–µ–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∑–Ω–∞–Ω–∏—è –≤ –Ω–æ–≤—ã—Ö —Å–∏—Ç—É–∞—Ü–∏—è—Ö, —Ä–µ—à–∞—Ç—å –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏"
            elif level == "analyze":
                framework[level] = "–û—Ü–µ–Ω–∏–≤–∞–π—Ç–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å —Ä–∞–∑–ª–æ–∂–∏—Ç—å –Ω–∞ —á–∞—Å—Ç–∏, –≤—ã—è–≤–∏—Ç—å —Å–≤—è–∑–∏, –Ω–∞–π—Ç–∏ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞"
            elif level == "evaluate":
                framework[level] = "–û—Ü–µ–Ω–∏–≤–∞–π—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –∞—Ä–≥—É–º–µ–Ω—Ç–∞—Ü–∏–∏, –æ–±–æ—Å–Ω–æ–≤–∞–Ω–Ω–æ—Å—Ç—å —Å—É–∂–¥–µ–Ω–∏–π, –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –º—ã—à–ª–µ–Ω–∏–µ"
            elif level == "create":
                framework[level] = "–û—Ü–µ–Ω–∏–≤–∞–π—Ç–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—å, –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å, —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å —Å–∏–Ω—Ç–µ–∑–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤–æ–µ"
        
        return framework
    
    def _calculate_bloom_coverage(self, distribution: Dict[str, int]) -> Dict[str, float]:
        """–í—ã—á–∏—Å–ª—è–µ—Ç –ø–æ–∫—Ä—ã—Ç–∏–µ —É—Ä–æ–≤–Ω–µ–π –ë–ª—É–º–∞ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö"""
        total = sum(distribution.values())
        return {level: (count / total) * 100 for level, count in distribution.items()}
    
    def _estimate_duration(self, distribution: Dict[str, int]) -> int:
        """–û—Ü–µ–Ω–∏–≤–∞–µ—Ç –æ–±—â—É—é –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —ç–∫–∑–∞–º–µ–Ω–∞ –≤ –º–∏–Ω—É—Ç–∞—Ö (–ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ)"""
        # –ë–∞–∑–æ–≤–æ–µ –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É—Ä–æ–≤–Ω—è –ë–ª—É–º–∞
        level_time = {
            'remember': 3,      # –ø—Ä–æ—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã –Ω–∞ –ø–∞–º—è—Ç—å
            'understand': 5,    # –≤–æ–ø—Ä–æ—Å—ã –Ω–∞ –ø–æ–Ω–∏–º–∞–Ω–∏–µ
            'apply': 8,         # –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞–Ω–∏—è
            'analyze': 10,      # –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞–Ω–∏—è
            'evaluate': 12,     # –æ—Ü–µ–Ω–æ—á–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è
            'create': 15        # —Ç–≤–æ—Ä—á–µ—Å–∫–∏–µ –∑–∞–¥–∞–Ω–∏—è
        }
        
        total_time = 0
        for level, count in distribution.items():
            total_time += count * level_time.get(level, 5)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è –Ω–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ç–∞–∂ –∏ –ø–µ—Ä–µ—Ö–æ–¥—ã
        total_time += 10
        
        return total_time
    
    def _generate_curriculum_id(self) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
        return f"theme_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
    
    def _validate_structure(self, curriculum: Dict[str, Any]) -> Dict[str, Any]:
        """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É —ç–∫–∑–∞–º–µ–Ω–∞"""
        issues = []
        warnings = []
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –≤—Å–µ—Ö —É—Ä–æ–≤–Ω–µ–π –ë–ª—É–º–∞
        question_guidelines = curriculum.get('question_guidelines', {})
        missing_levels = set(self.bloom_levels.keys()) - set(question_guidelines.keys())
        
        if missing_levels:
            issues.append(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —É—Ä–æ–≤–Ω–∏ –ë–ª—É–º–∞: {', '.join(missing_levels)}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä—É–∫–æ–≤–æ–¥—è—â–∏—Ö –ø—Ä–∏–Ω—Ü–∏–ø–æ–≤
        for level, guidelines in question_guidelines.items():
            if not guidelines.get('guidelines', {}).get('formulation_principles'):
                warnings.append(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø—Ä–∏–Ω—Ü–∏–ø—ã —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —É—Ä–æ–≤–Ω—è {level}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –≤–æ–ø—Ä–æ—Å–æ–≤
        distribution = curriculum.get('questions_distribution', {})
        total_questions = sum(distribution.values())
        
        if total_questions != curriculum.get('total_questions', 0):
            issues.append("–ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä–∞–º–æ–∫
        estimated_duration = curriculum.get('metadata', {}).get('estimated_duration', 0)
        if estimated_duration > 180:  # –±–æ–ª–µ–µ 3 —á–∞—Å–æ–≤
            warnings.append("–≠–∫–∑–∞–º–µ–Ω –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–º (>3 —á–∞—Å–æ–≤)")
        
        return {
            'is_valid': len(issues) == 0,
            'issues': issues,
            'warnings': warnings,
            'recommendations': self._generate_validation_recommendations(issues, warnings)
        }
    
    def _generate_validation_recommendations(self, issues: List[str], warnings: List[str]) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ–±–ª–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
        recommendations = []
        
        if issues:
            recommendations.append("–ò—Å–ø—Ä–∞–≤—å—Ç–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—ã")
        
        if warnings:
            recommendations.append("–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ —ç–∫–∑–∞–º–µ–Ω–∞")
        
        if not issues and not warnings:
            recommendations.append("–¢–µ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é —Å QuestionAgent")
        
        return recommendations
    
    def generate_theme_structure(self, total_questions: int = 10, difficulty: str = "—Å—Ä–µ–¥–Ω–∏–π") -> Dict[str, Any]:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É —ç–∫–∑–∞–º–µ–Ω–∞ —Å —Ä—É–∫–æ–≤–æ–¥—è—â–∏–º–∏ –ø—Ä–∏–Ω—Ü–∏–ø–∞–º–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º LangGraph
        
        Args:
            total_questions: –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤
            difficulty: –£—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ —ç–∫–∑–∞–º–µ–Ω–∞
            
        Returns:
            –¢–µ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å –ø—Ä–∏–Ω—Ü–∏–ø–∞–º–∏ –¥–ª—è QuestionAgent
        """
        try:
            # –°–æ–∑–¥–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            initial_state = ThemeState(
                subject="–û–±—â–∏–µ –∑–Ω–∞–Ω–∏—è",  # Default value since subject is no longer used
                topic_context=self.topic_context,
                total_questions=total_questions,
                difficulty=difficulty,
                theme_structure=None,
                validation_result=None,
                error=None
            )
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –≥—Ä–∞—Ñ
            result = self.app.invoke(initial_state)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if result.get("error"):
                return {'error': result["error"]}
            
            return result.get("theme_structure", {})
            
        except Exception as e:
            error_msg = f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ generate_theme_structure: {str(e)}"
            self.log_operation("generate_theme_structure", {
                "total_questions": total_questions,
                "difficulty": difficulty
            }, None, error_msg)
            
            return {'error': error_msg}
    
    def get_question_requirements_for_level(self, curriculum: Dict[str, Any], bloom_level: str) -> Dict[str, Any]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –≤–æ–ø—Ä–æ—Å–∞–º –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è –ë–ª—É–º–∞
        
        Args:
            curriculum: –¢–µ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞
            bloom_level: –£—Ä–æ–≤–µ–Ω—å –ë–ª—É–º–∞
            
        Returns:
            –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –¥–ª—è QuestionAgent
        """
        guidelines = curriculum.get('question_guidelines', {}).get(bloom_level, {})
        
        if not guidelines:
            return {'error': f'–ù–µ—Ç —Ä—É–∫–æ–≤–æ–¥—è—â–∏—Ö –ø—Ä–∏–Ω—Ü–∏–ø–æ–≤ –¥–ª—è —É—Ä–æ–≤–Ω—è {bloom_level}'}
        
        return {
            'bloom_level': bloom_level,
            'level_name': guidelines.get('level_name'),
            'question_count': guidelines.get('question_count'),
            'formulation_principles': guidelines.get('guidelines', {}).get('formulation_principles'),
            'mandatory_elements': guidelines.get('guidelines', {}).get('mandatory_elements'),
            'thematic_directions': guidelines.get('guidelines', {}).get('thematic_directions'),
            'verbs_and_actions': guidelines.get('guidelines', {}).get('verbs_and_actions'),
            'complexity_level': guidelines.get('guidelines', {}).get('complexity_level'),
            'quality_criteria': guidelines.get('guidelines', {}).get('quality_criteria'),
            'contextual_requirements': guidelines.get('guidelines', {}).get('contextual_requirements'),
            'avoid': guidelines.get('guidelines', {}).get('avoid'),
            'student_adaptation': guidelines.get('guidelines', {}).get('student_adaptation'),
            'format_requirements': guidelines.get('guidelines', {}).get('format_requirements')
        }
    
    def get_next_bloom_level_requirements(self, curriculum: Dict[str, Any], current_position: int) -> Optional[Dict]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ —Å–æ–≥–ª–∞—Å–Ω–æ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ë–ª—É–º–∞
        
        Args:
            curriculum: –¢–µ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞
            current_position: –¢–µ–∫—É—â–∞—è –ø–æ–∑–∏—Ü–∏—è –≤ —ç–∫–∑–∞–º–µ–Ω–µ (0-based)
            
        Returns:
            –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –∏–ª–∏ None –µ—Å–ª–∏ —ç–∫–∑–∞–º–µ–Ω –∑–∞–≤–µ—Ä—à–µ–Ω
        """
        distribution = curriculum.get('questions_distribution', {})
        bloom_sequence = curriculum.get('bloom_sequence', ['remember', 'understand', 'apply', 'analyze', 'evaluate', 'create'])
        
        # –°—á–∏—Ç–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å
        position_counter = 0
        
        for level in bloom_sequence:
            level_questions = distribution.get(level, 0)
            if current_position < position_counter + level_questions:
                # –ú—ã –Ω–∞—Ö–æ–¥–∏–º—Å—è –Ω–∞ —ç—Ç–æ–º —É—Ä–æ–≤–Ω–µ
                return self.get_question_requirements_for_level(curriculum, level)
            position_counter += level_questions
        
        return None  # –≠–∫–∑–∞–º–µ–Ω –∑–∞–≤–µ—Ä—à–µ–Ω
    
    def generate_summary_report(self, curriculum: Dict[str, Any]) -> str:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç –æ —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ —ç–∫–∑–∞–º–µ–Ω–∞
        
        Args:
            curriculum: –¢–µ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞
            
        Returns:
            –¢–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç
        """
        report = f"""
=== –û–¢–ß–ï–¢ –û –¢–ï–ú–ê–¢–ò–ß–ï–°–ö–û–ô –°–¢–†–£–ö–¢–£–†–ï –≠–ö–ó–ê–ú–ï–ù–ê ===

–û–ë–©–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø:
‚Ä¢ –ü—Ä–µ–¥–º–µ—Ç: {curriculum['subject']}
‚Ä¢ –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {curriculum['total_questions']}
‚Ä¢ –£—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏: {curriculum['difficulty']}
‚Ä¢ –ü—Ä–∏–º–µ—Ä–Ω–∞—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {curriculum['metadata']['estimated_duration']} –º–∏–Ω—É—Ç

–†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ü–û –£–†–û–í–ù–Ø–ú –ë–õ–£–ú–ê:
"""
        
        distribution = curriculum['questions_distribution']
        coverage = curriculum['metadata']['bloom_coverage']
        
        for level, count in distribution.items():
            level_name = self.bloom_levels[level]['name']
            percentage = coverage[level]
            report += f"‚Ä¢ {level_name}: {count} –≤–æ–ø—Ä–æ—Å–æ–≤ ({percentage:.1f}%)\n"
        
        report += f"""
–û–°–û–ë–ï–ù–ù–û–°–¢–ò –¢–ï–ú–ê–¢–ò–ß–ï–°–ö–û–ô –°–¢–†–£–ö–¢–£–†–´:
‚Ä¢ QuestionAgent –ø–æ–ª—É—á–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–µ —Ä—É–∫–æ–≤–æ–¥—è—â–∏–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É—Ä–æ–≤–Ω—è
‚Ä¢ –í–æ–ø—Ä–æ—Å—ã –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π ThemeAgent
‚Ä¢ –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç—Å—è –∞–¥–∞–ø—Ç–∞—Ü–∏—è –ø–æ–¥ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Ç–µ–º—É –∏ —É—Ä–æ–≤–µ–Ω—å —Å—Ç—É–¥–µ–Ω—Ç–∞
‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ –∫–æ–≥–Ω–∏—Ç–∏–≤–Ω—ã—Ö –Ω–∞–≤—ã–∫–æ–≤

–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –ü–†–û–í–ï–î–ï–ù–ò–Æ:
‚Ä¢ –°–ª–µ–¥—É–π—Ç–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —É—Ä–æ–≤–Ω–µ–π –ë–ª—É–º–∞
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä—É–∫–æ–≤–æ–¥—è—â–∏–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è –∫–∞—á–µ—Å—Ç–≤–∞ –≤–æ–ø—Ä–æ—Å–æ–≤
‚Ä¢ –ê–¥–∞–ø—Ç–∏—Ä—É–π—Ç–µ —Å–ª–æ–∂–Ω–æ—Å—Ç—å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ—Ç–≤–µ—Ç–æ–≤ —Å—Ç—É–¥–µ–Ω—Ç–∞
‚Ä¢ –û–±—Ä–∞—â–∞–π—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –º–µ–∂—É—Ä–æ–≤–Ω–µ–≤—ã–µ —Å–≤—è–∑–∏ –≤ –æ–±—É—á–µ–Ω–∏–∏
"""
        
        return report
    
    def get_structure_history(self) -> List[Dict]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä"""
        return self.generated_structures.copy()
    
    def export_structure_to_json(self, curriculum: Dict[str, Any]) -> str:
        """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –≤ JSON —Ñ–æ—Ä–º–∞—Ç"""
        return json.dumps(curriculum, ensure_ascii=False, indent=2, default=str)
    
    def validate_theme_structure(self, curriculum: Dict[str, Any]) -> Dict[str, Any]:
        """
        –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É —ç–∫–∑–∞–º–µ–Ω–∞
        
        Args:
            curriculum: –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        """
        return self._validate_structure(curriculum)
    
    def reset_history(self):
        """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä"""
        self.generated_structures = []
        super().reset_history()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è ThemeAgent –Ω–∞ LangGraph
def create_theme_agent(
    topic_context: str = None
) -> ThemeAgentLangGraph:
    """–°–æ–∑–¥–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä ThemeAgent –Ω–∞ LangGraph"""
    return ThemeAgentLangGraph(
        topic_context=topic_context
    )

# –ü—Å–µ–≤–¥–æ–Ω–∏–º –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
def create_theme_agent_langgraph(
    topic_context: str = None
) -> ThemeAgentLangGraph:
    """–°–æ–∑–¥–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä ThemeAgent –Ω–∞ LangGraph (–ø—Å–µ–≤–¥–æ–Ω–∏–º –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)"""
    return create_theme_agent(topic_context)
