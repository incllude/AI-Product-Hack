"""
–ú–æ–¥—É–ª—å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–µ–º–∞–º–∏ —ç–∫–∑–∞–º–µ–Ω–æ–≤
"""
from typing import Dict, List, Optional
import json


class TopicManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä —Ç–µ–º –¥–ª—è —ç–∫–∑–∞–º–µ–Ω–∞—Ü–∏–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã"""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Ç–µ–º"""
        self.predefined_topics = {
            "python_loops": {
                "name": "–¶–∏–∫–ª—ã –≤ Python",
                "subject": "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ",
                "description": "–ò–∑—É—á–µ–Ω–∏–µ —Ü–∏–∫–ª–æ–≤ for, while, break, continue –≤ Python",
                "difficulty_levels": ["–ª–µ–≥–∫–∏–π", "—Å—Ä–µ–¥–Ω–∏–π", "—Å–ª–æ–∂–Ω—ã–π"],
                "key_concepts": [
                    "—Ü–∏–∫–ª for",
                    "—Ü–∏–∫–ª while",
                    "–æ–ø–µ—Ä–∞—Ç–æ—Ä—ã break –∏ continue",
                    "–≤–ª–æ–∂–µ–Ω–Ω—ã–µ —Ü–∏–∫–ª—ã",
                    "–∏—Ç–µ—Ä–∞—Ç–æ—Ä—ã –∏ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ã",
                    "list comprehension"
                ],
                "sample_questions": [
                    "–û–±—ä—è—Å–Ω–∏—Ç–µ —Ä–∞–∑–Ω–∏—Ü—É –º–µ–∂–¥—É —Ü–∏–∫–ª–æ–º for –∏ while",
                    "–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä break –≤ Python?",
                    "–ß—Ç–æ —Ç–∞–∫–æ–µ list comprehension –∏ –∫–∞–∫ –µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å?"
                ]
            },
            "photoeffect": {
                "name": "–ó–∞–∫–æ–Ω—ã —Ñ–æ—Ç–æ—ç—Ñ—Ñ–µ–∫—Ç–∞",
                "subject": "–§–∏–∑–∏–∫–∞",
                "description": "–ò–∑—É—á–µ–Ω–∏–µ —Ñ–æ—Ç–æ—ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–æ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞ –∏ –µ–≥–æ –∑–∞–∫–æ–Ω–æ–≤",
                "difficulty_levels": ["–ª–µ–≥–∫–∏–π", "—Å—Ä–µ–¥–Ω–∏–π", "—Å–ª–æ–∂–Ω—ã–π"],
                "key_concepts": [
                    "—Ñ–æ—Ç–æ—ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏–π —ç—Ñ—Ñ–µ–∫—Ç",
                    "—É—Ä–∞–≤–Ω–µ–Ω–∏–µ –≠–π–Ω—à—Ç–µ–π–Ω–∞",
                    "—Ä–∞–±–æ—Ç–∞ –≤—ã—Ö–æ–¥–∞",
                    "–∫—Ä–∞—Å–Ω–∞—è –≥—Ä–∞–Ω–∏—Ü–∞ —Ñ–æ—Ç–æ—ç—Ñ—Ñ–µ–∫—Ç–∞",
                    "–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–∞—è —ç–Ω–µ—Ä–≥–∏—è —Ñ–æ—Ç–æ—ç–ª–µ–∫—Ç—Ä–æ–Ω–æ–≤",
                    "–∫–≤–∞–Ω—Ç–æ–≤–∞—è –ø—Ä–∏—Ä–æ–¥–∞ —Å–≤–µ—Ç–∞"
                ],
                "sample_questions": [
                    "–°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π—Ç–µ –∑–∞–∫–æ–Ω—ã —Ñ–æ—Ç–æ—ç—Ñ—Ñ–µ–∫—Ç–∞",
                    "–û–±—ä—è—Å–Ω–∏—Ç–µ —É—Ä–∞–≤–Ω–µ–Ω–∏–µ –≠–π–Ω—à—Ç–µ–π–Ω–∞ –¥–ª—è —Ñ–æ—Ç–æ—ç—Ñ—Ñ–µ–∫—Ç–∞",
                    "–ß—Ç–æ —Ç–∞–∫–æ–µ –∫—Ä–∞—Å–Ω–∞—è –≥—Ä–∞–Ω–∏—Ü–∞ —Ñ–æ—Ç–æ—ç—Ñ—Ñ–µ–∫—Ç–∞?"
                ]
            }
        }
    
    def get_predefined_topics(self) -> Dict[str, Dict]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö —Ç–µ–º"""
        return self.predefined_topics.copy()
    
    def get_topic_info(self, topic_key: str) -> Optional[Dict]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ç–µ–º–µ
        
        Args:
            topic_key: –ö–ª—é—á —Ç–µ–º—ã
            
        Returns:
            –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–º–µ –∏–ª–∏ None
        """
        return self.predefined_topics.get(topic_key)
    
    def display_topic_menu(self) -> None:
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ç–µ–º"""
        print("–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ–º—ã —ç–∫–∑–∞–º–µ–Ω–∞:")
        print("=" * 50)
        
        for i, (key, topic) in enumerate(self.predefined_topics.items(), 1):
            print(f"{i}. {topic['name']}")
            print(f"   –ü—Ä–µ–¥–º–µ—Ç: {topic['subject']}")
            print(f"   –û–ø–∏—Å–∞–Ω–∏–µ: {topic['description']}")
            print(f"   –£—Ä–æ–≤–Ω–∏: {', '.join(topic['difficulty_levels'])}")
            print()
    
    def get_topic_selection(self) -> Dict[str, any]:
        """
        –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≤—ã–±–æ—Ä —Ç–µ–º—ã —ç–∫–∑–∞–º–µ–Ω–∞
        
        Returns:
            –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ç–µ–º–µ
        """
        print("üéØ –í–´–ë–û–† –¢–ï–ú–´ –≠–ö–ó–ê–ú–ï–ù–ê")
        print("=" * 40)
        print("1. –í—ã–±—Ä–∞—Ç—å –∏–∑ –≥–æ—Ç–æ–≤—ã—Ö —Ç–µ–º")
        print("2. –í–≤–µ—Å—Ç–∏ —Å–≤–æ—é —Ç–µ–º—É")
        
        choice = input("\n–í–∞—à –≤—ã–±–æ—Ä (1 –∏–ª–∏ 2): ").strip()
        
        if choice == "1":
            return self._select_predefined_topic()
        elif choice == "2":
            return self._create_custom_topic()
        else:
            print("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–µ–º–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.")
            return self._get_default_topic()
    
    def _select_predefined_topic(self) -> Dict[str, any]:
        """–í—ã–±–æ—Ä –∏–∑ –ø—Ä–µ–¥–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö —Ç–µ–º"""
        print("\nüìö –ì–û–¢–û–í–´–ï –¢–ï–ú–´:")
        self.display_topic_menu()
        
        topic_keys = list(self.predefined_topics.keys())
        
        while True:
            try:
                choice = input(f"–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É (1-{len(topic_keys)}): ").strip()
                topic_index = int(choice) - 1
                
                if 0 <= topic_index < len(topic_keys):
                    selected_key = topic_keys[topic_index]
                    topic_info = self.predefined_topics[selected_key]
                    
                    print(f"\n‚úÖ –í—ã–±—Ä–∞–Ω–∞ —Ç–µ–º–∞: {topic_info['name']}")
                    
                    # –í—ã–±–æ—Ä —É—Ä–æ–≤–Ω—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
                    difficulty = self._select_difficulty(topic_info['difficulty_levels'])
                    
                    return {
                        'type': 'predefined',
                        'key': selected_key,
                        'name': topic_info['name'],
                        'description': topic_info['description'],
                        'difficulty': difficulty,
                        'key_concepts': topic_info['key_concepts']
                    }
                else:
                    print("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            except ValueError:
                print("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    
    def _create_custom_topic(self) -> Dict[str, any]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π —Ç–µ–º—ã"""
        print("\n‚úèÔ∏è –°–û–ó–î–ê–ù–ò–ï –°–í–û–ï–ô –¢–ï–ú–´:")
        
        name = input("–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã: ").strip()
        if not name:
            name = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è —Ç–µ–º–∞"
        
        subject = input("–ü—Ä–µ–¥–º–µ—Ç (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é '–û–±—â–∏–µ –∑–Ω–∞–Ω–∏—è'): ").strip()
        if not subject:
            subject = "–û–±—â–∏–µ –∑–Ω–∞–Ω–∏—è"
        
        description = input("–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–µ–º—ã (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ): ").strip()
        if not description:
            description = f"–≠–∫–∑–∞–º–µ–Ω –ø–æ —Ç–µ–º–µ: {name}"
        
        # –í—ã–±–æ—Ä —É—Ä–æ–≤–Ω—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
        print("\n–î–æ—Å—Ç—É–ø–Ω—ã–µ —É—Ä–æ–≤–Ω–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏:")
        print("1. –õ–µ–≥–∫–∏–π")
        print("2. –°—Ä–µ–¥–Ω–∏–π")
        print("3. –°–ª–æ–∂–Ω—ã–π")
        
        difficulty = self._select_difficulty(["–ª–µ–≥–∫–∏–π", "—Å—Ä–µ–¥–Ω–∏–π", "—Å–ª–æ–∂–Ω—ã–π"])
        
        # –ö–ª—é—á–µ–≤—ã–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
        concepts_input = input("\n–ö–ª—é—á–µ–≤—ã–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ): ").strip()
        key_concepts = []
        if concepts_input:
            key_concepts = [concept.strip() for concept in concepts_input.split(',') if concept.strip()]
        
        print(f"\n‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ç–µ–º–∞: {name}")
        
        return {
            'type': 'custom',
            'key': 'custom',
            'name': name,
            'subject': subject,
            'description': description,
            'difficulty': difficulty,
            'key_concepts': key_concepts
        }
    
    def _select_difficulty(self, available_levels: List[str]) -> str:
        """–í—ã–±–æ—Ä —É—Ä–æ–≤–Ω—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏"""
        print(f"\n–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏:")
        for i, level in enumerate(available_levels, 1):
            print(f"{i}. {level.capitalize()}")
        
        while True:
            try:
                choice = input(f"–í–∞—à –≤—ã–±–æ—Ä (1-{len(available_levels)}): ").strip()
                if not choice:
                    return "—Å—Ä–µ–¥–Ω–∏–π"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
                
                level_index = int(choice) - 1
                if 0 <= level_index < len(available_levels):
                    return available_levels[level_index]
                else:
                    print("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            except ValueError:
                print("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    
    def _get_default_topic(self) -> Dict[str, any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–º—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        default_key = "python_loops"
        topic_info = self.predefined_topics[default_key]
        
        return {
            'type': 'predefined',
            'key': default_key,
            'name': topic_info['name'],
            'description': topic_info['description'],
            'difficulty': "—Å—Ä–µ–¥–Ω–∏–π",
            'key_concepts': topic_info['key_concepts']
        }
    
    def get_topic_context_for_prompts(self, topic_info: Dict[str, any]) -> str:
        """
        –°–æ–∑–¥–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ç–µ–º—ã –¥–ª—è –ø—Ä–æ–º–ø—Ç–æ–≤ –∞–≥–µ–Ω—Ç–æ–≤
        
        Args:
            topic_info: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–º–µ
            
        Returns:
            –¢–µ–∫—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –ø—Ä–æ–º–ø—Ç–æ–≤
        """
        context = f"–¢–ï–ú–ê –≠–ö–ó–ê–ú–ï–ù–ê: {topic_info['name']}\n"
        context += f"–û–ü–ò–°–ê–ù–ò–ï: {topic_info['description']}\n"
        context += f"–£–†–û–í–ï–ù–¨ –°–õ–û–ñ–ù–û–°–¢–ò: {topic_info['difficulty']}\n"
        
        if topic_info.get('key_concepts'):
            context += f"–ö–õ–Æ–ß–ï–í–´–ï –ö–û–ù–¶–ï–ü–¶–ò–ò: {', '.join(topic_info['key_concepts'])}\n"
        
        context += "\n–í–æ–ø—Ä–æ—Å—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å—Ç—Ä–æ–≥–æ –ø–æ –¥–∞–Ω–Ω–æ–π —Ç–µ–º–µ –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —É–∫–∞–∑–∞–Ω–Ω–æ–º—É —É—Ä–æ–≤–Ω—é —Å–ª–æ–∂–Ω–æ—Å—Ç–∏."
        
        return context
    
    def suggest_related_topics(self, custom_topic_name: str) -> List[str]:
        """
        –ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –ø–æ—Ö–æ–∂–∏–µ —Ç–µ–º—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞
        
        Args:
            custom_topic_name: –ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π —Ç–µ–º—ã
            
        Returns:
            –°–ø–∏—Å–æ–∫ –ø–æ—Ö–æ–∂–∏—Ö —Ç–µ–º
        """
        suggestions = []
        topic_name_lower = custom_topic_name.lower()
        
        # –ü—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
        if any(word in topic_name_lower for word in ['python', '–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ', '–∫–æ–¥', '—Ü–∏–∫–ª']):
            suggestions.append("–¶–∏–∫–ª—ã –≤ Python")
        
        if any(word in topic_name_lower for word in ['—Ñ–∏–∑–∏–∫–∞', '—Ñ–æ—Ç–æ—ç—Ñ—Ñ–µ–∫—Ç', '—ç–π–Ω—à—Ç–µ–π–Ω', '–∫–≤–∞–Ω—Ç']):
            suggestions.append("–ó–∞–∫–æ–Ω—ã —Ñ–æ—Ç–æ—ç—Ñ—Ñ–µ–∫—Ç–∞")
        
        return suggestions
    
    def export_topic_info(self, topic_info: Dict[str, any], format: str = 'json') -> Dict[str, any]:
        """
        –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–º–µ
        
        Args:
            topic_info: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–º–µ
            format: –§–æ—Ä–º–∞—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞
            
        Returns:
            –î–∞–Ω–Ω—ã–µ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
        """
        if format == 'json':
            return {
                'topic_export': topic_info,
                'export_timestamp': str(json.dumps(topic_info, ensure_ascii=False, indent=2))
            }
        else:
            return topic_info
    
    def validate_topic_info(self, topic_info: Dict[str, any]) -> bool:
        """
        –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–º–µ
        
        Args:
            topic_info: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–º–µ
            
        Returns:
            True –µ—Å–ª–∏ —Ç–µ–º–∞ –≤–∞–ª–∏–¥–Ω–∞
        """
        required_fields = ['name', 'difficulty']
        
        for field in required_fields:
            if field not in topic_info or not topic_info[field]:
                return False
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Ä–æ–≤–Ω—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
        valid_difficulties = ['–ª–µ–≥–∫–∏–π', '—Å—Ä–µ–¥–Ω–∏–π', '—Å–ª–æ–∂–Ω—ã–π']
        if topic_info['difficulty'] not in valid_difficulties:
            return False
        
        return True
