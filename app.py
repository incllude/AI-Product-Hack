"""
Streamlit –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ-—á–∞—Ç–±–æ—Ç –¥–ª—è –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
"""
import streamlit as st
import sys
import os
import json
import time
from datetime import datetime
import plotly.express as px
import plotly.graph_objects as go
import pandas as pd

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º –∞–≥–µ–Ω—Ç–æ–≤
sys.path.append(os.path.join(os.path.dirname(__file__), 'agents'))

from exam_orchestrator import ExamOrchestrator
from topic_manager import TopicManager

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="üéì –°–∫–æ–ª—å–∑—è—â–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞",
    page_icon="üéì",
    layout="wide",
    initial_sidebar_state="expanded"
)

# –ù–∏–∫–∞–∫–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Å—Ç–∏–ª–µ–π - –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π Streamlit

def initialize_session_state():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–∏"""
    if 'messages' not in st.session_state:
        st.session_state.messages = []
    
    if 'orchestrator' not in st.session_state:
        st.session_state.orchestrator = None
    
    if 'exam_started' not in st.session_state:
        st.session_state.exam_started = False
    
    if 'current_question' not in st.session_state:
        st.session_state.current_question = None
    
    if 'waiting_for_answer' not in st.session_state:
        st.session_state.waiting_for_answer = False
    
    if 'exam_completed' not in st.session_state:
        st.session_state.exam_completed = False
    
    if 'topic_selected' not in st.session_state:
        st.session_state.topic_selected = False
    
    if 'student_name' not in st.session_state:
        st.session_state.student_name = "–°—Ç—É–¥–µ–Ω—Ç"
    
    if 'first_question_generated' not in st.session_state:
        st.session_state.first_question_generated = False

def add_message(role, content, message_type="text"):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç"""
    st.session_state.messages.append({
        "role": role,
        "content": content,
        "type": message_type,
        "timestamp": datetime.now()
    })

def display_chat_messages():
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞"""
    for message in st.session_state.messages:
        if message["role"] == "user":
            st.write("**üë§ –í–∞—à –æ—Ç–≤–µ—Ç:**")
            st.write(message['content'])
            st.divider()
        
        elif message["role"] == "assistant":
            if message.get("type") == "question":
                st.write("**‚ùì –í–æ–ø—Ä–æ—Å:**")
                st.write(message['content'])
                st.divider()
            
            elif message.get("type") == "evaluation":
                st.write("**üìä –û—Ü–µ–Ω–∫–∞:**")
                st.write(message['content'])
                st.divider()
            
            else:
                st.info(message['content'])
                st.divider()

def setup_exam():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —ç–∫–∑–∞–º–µ–Ω–∞"""
    st.sidebar.header("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —ç–∫–∑–∞–º–µ–Ω–∞")
    
    # –ò–º—è —Å—Ç—É–¥–µ–Ω—Ç–∞
    student_name = st.sidebar.text_input("–ò–º—è —Å—Ç—É–¥–µ–Ω—Ç–∞", value=st.session_state.student_name)
    if student_name != st.session_state.student_name:
        st.session_state.student_name = student_name
    
    # –í—ã–±–æ—Ä —Å–ø–æ—Å–æ–±–∞ –∑–∞–¥–∞–Ω–∏—è —Ç–µ–º—ã
    topic_source = st.sidebar.radio(
        "–°–ø–æ—Å–æ–± –≤—ã–±–æ—Ä–∞ —Ç–µ–º—ã:",
        options=["–ì–æ—Ç–æ–≤—ã–µ —Ç–µ–º—ã", "–°–≤–æ—è —Ç–µ–º–∞"],
        index=0
    )
    
    topic_manager = TopicManager()
    
    if topic_source == "–ì–æ—Ç–æ–≤—ã–µ —Ç–µ–º—ã":
        # –í—ã–±–æ—Ä –∏–∑ –ø—Ä–µ–¥–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö —Ç–µ–º
        topics = topic_manager.get_predefined_topics()
        
        topic_options = {f"{topic['name']} ({topic['subject']})": key 
                        for key, topic in topics.items()}
        
        selected_topic_display = st.sidebar.selectbox(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É —ç–∫–∑–∞–º–µ–Ω–∞",
            options=list(topic_options.keys()),
            index=0
        )
        
        selected_topic_key = topic_options[selected_topic_display]
        raw_topic = topics[selected_topic_key]
        
        # –í—ã–±–æ—Ä —É—Ä–æ–≤–Ω—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
        difficulty_options = ["–ª–µ–≥–∫–∏–π", "—Å—Ä–µ–¥–Ω–∏–π", "—Å–ª–æ–∂–Ω—ã–π"]
        selected_difficulty = st.sidebar.selectbox(
            "–£—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏",
            options=difficulty_options,
            index=1  # —Å—Ä–µ–¥–Ω–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        )
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É topic_info —Å –ø–æ–ª–µ–º difficulty
        topic_info = {
            'type': 'predefined',
            'key': selected_topic_key,
            'name': raw_topic['name'],
            'subject': raw_topic['subject'],
            'description': raw_topic['description'],
            'difficulty': selected_difficulty,
            'key_concepts': raw_topic['key_concepts']
        }
    
    else:
        # –í–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π —Ç–µ–º—ã
        custom_name = st.sidebar.text_input(
            "–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã:",
            placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ö–≤–∞–Ω—Ç–æ–≤–∞—è —Ñ–∏–∑–∏–∫–∞"
        )
        
        custom_subject = st.sidebar.text_input(
            "–ü—Ä–µ–¥–º–µ—Ç:",
            placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –§–∏–∑–∏–∫–∞",
            value="–û–±—â–∏–µ –∑–Ω–∞–Ω–∏—è"
        )
        
        custom_description = st.sidebar.text_area(
            "–û–ø–∏—Å–∞–Ω–∏–µ —Ç–µ–º—ã (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):",
            placeholder="–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≥–æ, —á—Ç–æ –±—É–¥–µ—Ç –∏–∑—É—á–∞—Ç—å—Å—è...",
            height=80
        )
        
        # –í—ã–±–æ—Ä —É—Ä–æ–≤–Ω—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
        difficulty_options = ["–ª–µ–≥–∫–∏–π", "—Å—Ä–µ–¥–Ω–∏–π", "—Å–ª–æ–∂–Ω—ã–π"]
        selected_difficulty = st.sidebar.selectbox(
            "–£—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏",
            options=difficulty_options,
            index=1  # —Å—Ä–µ–¥–Ω–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        )
        
        # –ö–ª—é—á–µ–≤—ã–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
        custom_concepts_input = st.sidebar.text_area(
            "–ö–ª—é—á–µ–≤—ã–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é):",
            placeholder="–∫–æ–Ω—Ü–µ–ø—Ü–∏—è1, –∫–æ–Ω—Ü–µ–ø—Ü–∏—è2, –∫–æ–Ω—Ü–µ–ø—Ü–∏—è3...",
            height=60
        )
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö –∫–æ–Ω—Ü–µ–ø—Ü–∏–π
        key_concepts = []
        if custom_concepts_input.strip():
            key_concepts = [concept.strip() for concept in custom_concepts_input.split(',') if concept.strip()]
        
        # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π —Ç–µ–º—ã
        topic_info = {
            'type': 'custom',
            'key': 'custom',
            'name': custom_name if custom_name.strip() else "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è —Ç–µ–º–∞",
            'subject': custom_subject if custom_subject.strip() else "–û–±—â–∏–µ –∑–Ω–∞–Ω–∏—è",
            'description': custom_description if custom_description.strip() else f"–≠–∫–∑–∞–º–µ–Ω –ø–æ —Ç–µ–º–µ: {custom_name if custom_name.strip() else '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è —Ç–µ–º–∞'}",
            'difficulty': selected_difficulty,
            'key_concepts': key_concepts
        }
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —ç–∫–∑–∞–º–µ–Ω–∞
    max_questions = st.sidebar.slider("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤", 3, 10, 5)
    use_theme_structure = st.sidebar.checkbox("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–æ –ë–ª—É–º—É", False)  # –û—Ç–∫–ª—é—á–µ–Ω–æ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ –Ω–∞—á–∞–ª—É —ç–∫–∑–∞–º–µ–Ω–∞
    can_start_exam = True
    if topic_source == "–°–≤–æ—è —Ç–µ–º–∞":
        if not custom_name.strip():
            can_start_exam = False
            st.sidebar.warning("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã")
    
    # –ö–Ω–æ–ø–∫–∞ –Ω–∞—á–∞–ª–∞ —ç–∫–∑–∞–º–µ–Ω–∞
    exam_disabled = st.session_state.exam_started or not can_start_exam
    if st.sidebar.button("üöÄ –ù–∞—á–∞—Ç—å —ç–∫–∑–∞–º–µ–Ω", disabled=exam_disabled):
        start_exam(topic_info, max_questions, use_theme_structure)
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–º–µ
    if not st.session_state.exam_started:
        st.sidebar.markdown("### üìö –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–º–µ")
        st.sidebar.write(f"**–ü—Ä–µ–¥–º–µ—Ç:** {topic_info['subject']}")
        st.sidebar.write(f"**–û–ø–∏—Å–∞–Ω–∏–µ:** {topic_info['description']}")
        st.sidebar.write(f"**–£—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏:** {topic_info['difficulty']}")
        
        if topic_info.get('key_concepts'):
            st.sidebar.write("**–ö–ª—é—á–µ–≤—ã–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏:**")
            for concept in topic_info['key_concepts'][:5]:
                st.sidebar.write(f"‚Ä¢ {concept}")

def start_exam(topic_info, max_questions, use_theme_structure):
    """–ó–∞–ø—É—Å–∫ —ç–∫–∑–∞–º–µ–Ω–∞"""
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
    with st.spinner("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —ç–∫–∑–∞–º–µ–Ω–∞..."):
        try:
            # –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            st.session_state.orchestrator = ExamOrchestrator(
                topic_info=topic_info,
                max_questions=max_questions,
                use_theme_structure=use_theme_structure
            )
            
            # –ó–∞–ø—É—Å–∫ —ç–∫–∑–∞–º–µ–Ω–∞
            session_info = st.session_state.orchestrator.start_exam(st.session_state.student_name)
            
            st.session_state.exam_started = True
            st.session_state.topic_selected = True
            st.session_state.exam_completed = False
            st.session_state.first_question_generated = False
            
            # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            welcome_msg = f"""–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {st.session_state.student_name}! üéì

**–¢–µ–º–∞:** {topic_info['name']}
**–ü—Ä–µ–¥–º–µ—Ç:** {topic_info['subject']}
**–í–æ–ø—Ä–æ—Å–æ–≤:** {max_questions}
**–†–µ–∂–∏–º:** {'–°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π' if use_theme_structure else '–ë—ã—Å—Ç—Ä—ã–π'}

–≠–∫–∑–∞–º–µ–Ω –≥–æ—Ç–æ–≤ –∫ –Ω–∞—á–∞–ª—É! –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞."""
            
            add_message("assistant", welcome_msg)
            
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —ç–∫–∑–∞–º–µ–Ω–∞: {str(e)}")
            return
    
    st.rerun()

def get_next_question():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞"""
    if not st.session_state.orchestrator:
        return
    
    try:
        question_data = st.session_state.orchestrator.get_next_question()
        
        if 'question' in question_data:
            st.session_state.current_question = question_data
            st.session_state.waiting_for_answer = True
            
            # –£–ø—Ä–æ—â–µ–Ω–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞
            question_text = f"""**–í–æ–ø—Ä–æ—Å {question_data.get('question_number', '?')}**

{question_data['question']}

*–£—Ä–æ–≤–µ–Ω—å: {question_data.get('topic_level', '–±–∞–∑–æ–≤—ã–π')}*"""
            
            add_message("assistant", question_text, "question")
            
        elif 'message' in question_data:
            # –≠–∫–∑–∞–º–µ–Ω –∑–∞–≤–µ—Ä—à–µ–Ω
            st.session_state.exam_completed = True
            st.session_state.waiting_for_answer = False
            add_message("assistant", f"üìù {question_data['message']}")
            generate_final_report()
            
        else:
            add_message("assistant", f"‚ùå –û—à–∏–±–∫–∞: {question_data.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
            
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–∞: {str(e)}")

def submit_answer(answer):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –æ—Ü–µ–Ω–∫—É"""
    if not st.session_state.orchestrator or not st.session_state.current_question:
        return
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á–∞—Ç
    add_message("user", answer)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ –¥–ª—è –æ—Ü–µ–Ω–∫–∏
    with st.spinner("–û—Ü–µ–Ω–∫–∞ –≤–∞—à–µ–≥–æ –æ—Ç–≤–µ—Ç–∞..."):
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Ü–µ–Ω–∫—É
            evaluation = st.session_state.orchestrator.submit_answer(answer)
            
            # –£–ø—Ä–æ—â–µ–Ω–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –æ—Ü–µ–Ω–∫–∏
            eval_text = f"""**–û—Ü–µ–Ω–∫–∞: {evaluation.get('total_score', 0)}/10 –±–∞–ª–ª–æ–≤**"""
            
            if evaluation.get('criteria_scores'):
                eval_text += "\n\n**–û—Ü–µ–Ω–∫–∏ –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º:**\n"
                criteria_names = {
                    'correctness': '–ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å',
                    'completeness': '–ü–æ–ª–Ω–æ—Ç–∞', 
                    'understanding': '–ü–æ–Ω–∏–º–∞–Ω–∏–µ'
                }
                for criterion, score in evaluation['criteria_scores'].items():
                    name = criteria_names.get(criterion, criterion)
                    eval_text += f"‚Ä¢ {name}: {score}/10\n"
            
            if evaluation.get('strengths'):
                eval_text += f"\n**‚úÖ –°–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã:** {evaluation['strengths']}"
            
            if evaluation.get('weaknesses'):
                eval_text += f"\n\n**‚ùå –û–±–ª–∞—Å—Ç–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è:** {evaluation['weaknesses']}"
            
            add_message("assistant", eval_text, "evaluation")
            
            st.session_state.waiting_for_answer = False
            st.session_state.current_question = None
            
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞: {str(e)}")
            return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å
    if st.session_state.orchestrator.can_continue():
        with st.spinner("–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞..."):
            time.sleep(0.5)
            get_next_question()
    else:
        # –≠–∫–∑–∞–º–µ–Ω –∑–∞–≤–µ—Ä—à–µ–Ω
        st.session_state.exam_completed = True
        generate_final_report()
    
    st.rerun()

def generate_final_report():
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
    if not st.session_state.orchestrator:
        return
    
    try:
        # –ó–∞–≤–µ—Ä—à–∞–µ–º —ç–∫–∑–∞–º–µ–Ω –µ—Å–ª–∏ –µ—â–µ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω
        if st.session_state.orchestrator.exam_session['status'] == 'in_progress':
            st.session_state.orchestrator.force_complete()
        
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç —á–µ—Ä–µ–∑ complete_exam
        final_report = st.session_state.orchestrator.complete_exam()
        
        if 'error' not in final_report:
            report_text = f"""üéâ **–≠–∫–∑–∞–º–µ–Ω –∑–∞–≤–µ—Ä—à–µ–Ω!**

**–ò—Ç–æ–≥–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:**
‚Ä¢ –û—Ü–µ–Ω–∫–∞: {final_report['grade_info']['grade'].upper()}
‚Ä¢ –£—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç—å: {final_report['grade_info']['percentage']}%
‚Ä¢ –ë–∞–ª–ª—ã: {final_report['grade_info']['points']}

**–û–ø–∏—Å–∞–Ω–∏–µ:** {final_report['grade_info']['description']}

**–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**"""
            
            for i, recommendation in enumerate(final_report['recommendations'][:3], 1):
                report_text += f"\n{i}. {recommendation}"
            
            add_message("assistant", report_text)
        else:
            add_message("assistant", f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {final_report.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
    
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {str(e)}")

def display_progress():
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —ç–∫–∑–∞–º–µ–Ω–∞"""
    if not st.session_state.orchestrator or not st.session_state.exam_started:
        return
    
    try:
        progress = st.session_state.orchestrator.get_progress()
        
        st.sidebar.markdown("### üìä –ü—Ä–æ–≥—Ä–µ—Å—Å —ç–∫–∑–∞–º–µ–Ω–∞")
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
        progress_percentage = (progress['questions_answered'] / progress['max_questions']) * 100
        st.sidebar.progress(progress_percentage / 100)
        
        # –ú–µ—Ç—Ä–∏–∫–∏
        col1, col2 = st.sidebar.columns(2)
        with col1:
            st.metric("–í–æ–ø—Ä–æ—Å—ã", f"{progress['questions_answered']}/{progress['max_questions']}")
        with col2:
            st.metric("–ë–∞–ª–ª—ã", f"{progress['current_score']}/{progress['max_possible_score']}")
        
        # –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç–∏
        if progress['max_possible_score'] > 0:
            success_rate = (progress['current_score'] / progress['max_possible_score']) * 100
            st.sidebar.metric("–£—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç—å", f"{success_rate:.1f}%")
        
        # –°—Ç–∞—Ç—É—Å
        status_emoji = {
            'in_progress': 'üü°',
            'completed': 'üü¢',
            'not_started': 'üî¥'
        }
        st.sidebar.write(f"**–°—Ç–∞—Ç—É—Å:** {status_emoji.get(progress['status'], '‚ùì')} {progress['status']}")
        
    except Exception as e:
        st.sidebar.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: {str(e)}")

def display_analytics():
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏"""
    if not st.session_state.orchestrator or not st.session_state.exam_started:
        return
    
    try:
        progress = st.session_state.orchestrator.get_progress()
        
        if progress['questions_answered'] > 0:
            st.sidebar.markdown("### üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞")
            
            # –ì—Ä–∞—Ñ–∏–∫ –±–∞–ª–ª–æ–≤ –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º
            evaluations = st.session_state.orchestrator.exam_session['evaluations']
            if evaluations:
                scores = [eval_data.get('total_score', 0) for eval_data in evaluations]
                question_numbers = list(range(1, len(scores) + 1))
                
                fig = px.line(
                    x=question_numbers, 
                    y=scores,
                    title="–ë–∞–ª–ª—ã –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º",
                    labels={'x': '–ù–æ–º–µ—Ä –≤–æ–ø—Ä–æ—Å–∞', 'y': '–ë–∞–ª–ª—ã'}
                )
                fig.update_layout(height=300, showlegend=False)
                st.sidebar.plotly_chart(fig, use_container_width=True)
                
                # –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª
                avg_score = sum(scores) / len(scores)
                st.sidebar.metric("–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª", f"{avg_score:.1f}/10")
    
    except Exception as e:
        st.sidebar.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏: {str(e)}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    initialize_session_state()
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    st.title("üéì –°–∫–æ–ª—å–∑—è—â–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞")
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —ç–∫–∑–∞–º–µ–Ω–∞ (–±–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å)
    setup_exam()
    
    # –ü—Ä–æ–≥—Ä–µ—Å—Å –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
    display_progress()
    display_analytics()
    
    # –û—Å–Ω–æ–≤–Ω–∞—è –æ–±–ª–∞—Å—Ç—å —á–∞—Ç–∞
    chat_container = st.container()
    
    with chat_container:
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π —á–∞—Ç–∞
        display_chat_messages()
        
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–µ—Ä–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
        if st.session_state.exam_started and not st.session_state.get('first_question_generated', False) and not st.session_state.exam_completed:
            if st.button("üöÄ –ü–æ–ª—É—á–∏—Ç—å –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å", type="primary"):
                with st.spinner("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–µ—Ä–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞..."):
                    get_next_question()
                    st.session_state.first_question_generated = True
                st.rerun()
        
        # –ü–æ–ª–µ –≤–≤–æ–¥–∞ –æ—Ç–≤–µ—Ç–∞
        elif st.session_state.waiting_for_answer and not st.session_state.exam_completed:
            with st.form("answer_form", clear_on_submit=True):
                user_answer = st.text_area(
                    "–í–∞—à –æ—Ç–≤–µ—Ç:",
                    height=100,
                    placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π –æ—Ç–≤–µ—Ç –∑–¥–µ—Å—å..."
                )
                
                col1, col2, col3 = st.columns([1, 1, 2])
                with col1:
                    submit_button = st.form_submit_button("üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç")
                with col2:
                    skip_button = st.form_submit_button("‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")
                
                if submit_button and user_answer.strip():
                    submit_answer(user_answer.strip())
                elif skip_button:
                    submit_answer("–û—Ç–≤–µ—Ç –ø—Ä–æ–ø—É—â–µ–Ω")
        
        # –ö–Ω–æ–ø–∫–∞ —Å–±—Ä–æ—Å–∞ —ç–∫–∑–∞–º–µ–Ω–∞
        if st.session_state.exam_started:
            st.sidebar.markdown("---")
            if st.sidebar.button("üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", type="secondary"):
                # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
                keys_to_keep = ['student_name']
                for key in list(st.session_state.keys()):
                    if key not in keys_to_keep:
                        del st.session_state[key]
                initialize_session_state()
                st.rerun()
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ
    if not st.session_state.exam_started:
        st.markdown("""
        ### ü§ñ –û —Å–∏—Å—Ç–µ–º–µ
        
        –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —ç–∫–∑–∞–º–µ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏ –∏ –¥–µ—Ç–∞–ª—å–Ω—ã–º –∞–Ω–∞–ª–∏–∑–æ–º –æ—Ç–≤–µ—Ç–æ–≤.
        
        **–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**
        - üéØ –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã
        - üìä –ú–Ω–æ–≥–æ–∫—Ä–∏—Ç–µ—Ä–∏–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
        - üí° –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        - ‚úèÔ∏è –°–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ç–µ–º—ã —ç–∫–∑–∞–º–µ–Ω–æ–≤
        
        **–°–ø–æ—Å–æ–±—ã –≤—ã–±–æ—Ä–∞ —Ç–µ–º—ã:**
        - **–ì–æ—Ç–æ–≤—ã–µ —Ç–µ–º—ã** - –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö —Ç–µ–º
        - **–°–≤–æ—è —Ç–µ–º–∞** - —Å–æ–∑–¥–∞–π—Ç–µ —ç–∫–∑–∞–º–µ–Ω –ø–æ –ª—é–±–æ–π —Ç–µ–º–µ
        
        –í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏ –∏ –Ω–∞—á–Ω–∏—Ç–µ —ç–∫–∑–∞–º–µ–Ω!
        """)

if __name__ == "__main__":
    main()
